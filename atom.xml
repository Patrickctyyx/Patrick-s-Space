<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Patrick&#39;s Space</title>
  <subtitle>Stay hungry, stay foolish!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.patrickcty.cc/"/>
  <updated>2019-03-01T02:28:11.682Z</updated>
  <id>https://blog.patrickcty.cc/</id>
  
  <author>
    <name>Patrick</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>C 语言输入的一个坑</title>
    <link href="https://blog.patrickcty.cc/2019/03/01/C%E8%AF%AD%E8%A8%80%E8%BE%93%E5%85%A5%E7%9A%84%E4%B8%80%E4%B8%AA%E5%9D%91/"/>
    <id>https://blog.patrickcty.cc/2019/03/01/C语言输入的一个坑/</id>
    <published>2019-03-01T02:19:18.000Z</published>
    <updated>2019-03-01T02:28:11.682Z</updated>
    
    <content type="html"><![CDATA[<p>原题如下：</p>
<blockquote>
<p>题目描述<br>不借用任何字符串库函数实现无冗余地接受两个字符串，然后把它们无冗余的连接起来。</p>
</blockquote>
<p>输入描述:</p>
<ul>
<li>每一行包括两个字符串，长度不超过100。</li>
</ul>
<p>输出描述:</p>
<ul>
<li>可能有多组测试数据，对于每组数据，不借用任何字符串库函数实现无冗余地接受两个字符串，然后把它们无冗余的连接起来。</li>
<li>输出连接后的字符串。</li>
</ul>
<p>这是个很简单的题，但是有一个坑。</p>
<p>通常我们 C 语言存放字符串要么是用字符数组要么是用指针，我第一反应就是用指针来存储，所以我写了如下代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">char *a, *b;</div><div class="line">scanf(&quot;%s %s&quot;, a, b);</div></pre></td></tr></table></figure>
<p>但是当输入一行的时候会出现段错误。</p>
<p>这是因为 a b 都是未初始化的指针，如果打印二者的地址可以发现它们是相邻的</p>
<blockquote>
<p>0x7ffee27a5610 0x7ffee27a5608</p>
</blockquote>
<p>所以当你接受两个字符串的时候就很可能会出现段错误了。</p>
<p>使用长度固定的字符数组就能完美避免这个问题了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">char a[105], b[105];</div><div class="line">scanf(&quot;%s %s&quot;, a, b);</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;原题如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;题目描述&lt;br&gt;不借用任何字符串库函数实现无冗余地接受两个字符串，然后把它们无冗余的连接起来。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;输入描述:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每一行包括两个字符串，长度不超过100。&lt;/l
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>2.28随想</title>
    <link href="https://blog.patrickcty.cc/2019/02/28/2-28%E9%9A%8F%E6%83%B3/"/>
    <id>https://blog.patrickcty.cc/2019/02/28/2-28随想/</id>
    <published>2019-02-28T01:30:45.000Z</published>
    <updated>2019-02-28T06:20:55.613Z</updated>
    
    <content type="html"><![CDATA[<p>今天看的是《中国知识分子与中古遗风》。</p>
<p>不知何时起，“公知”已经变成了一个贬义词，虽然我没有关注这些人，但有一些的睿智言论还是是不是会传到我的眼中。</p>
<p>就像文章里面说的一样，这些所谓的知识分子，认为自己有文化，站在伦理道德的制高点之上，去批判别人，针砭时弊——其实很多时候是站着说话不腰疼。经常拿出一些大道理来唬人，却没有什么真正有意义的讨论。</p>
<p>我觉得的话，还是心里的优越感在作怪，讨论是完全没问题的，但是颐指气使就显得太过嚣张，令人讨厌了。嚣张这事不仅仅是公知容易出现，就是一个学生会的小部长也容易有。</p>
<p>希望我能保持一颗平和的心态，不膨胀也不妄自菲薄，不过这又是一件难事了。</p>
<p>之后又看了《花剌子模信使问题》，这一篇可以充分体现王小波的思想是如何的活跃。</p>
<p>他把这样一个问题引申到了学术上，学术上也有花剌子模的问题，学者的研究究竟是应该纯粹，还是为了产生好消息？这貌似是一个很简单的问题，但是实际选择又其实是很难的。但更多的时候我们是没得选择的，如果不选择迎合，就是给自己找麻烦。所以当看到耍滑头的时候，我们应该抱着人艰不拆的心态来看待，谁没做过违心的事没说过违心的话呢？</p>
<p>最可怕的就是，你不知道你自己是不是身在花剌子模，意思就是你在自己不知道的情况下做出了耍滑头的事情。</p>
<p>不过作为一个还未踏上社会的乳臭未干的毛头小子，现在讨论这种事情也只是空口无凭，只能祈祷自己所处的环境能够好一点，自己不会成为花剌子模信使，也不会遇上花剌子模君王。</p>
<p>P.S. 经过了这几天的学习（？还是划水），我发现了我还是过于依赖搜索引擎和现有的模块，很多东西我都是做一个伸手党，把东西要到了就不管了。这样就明明是最近才用到的东西，却还是得再去谷歌一次……虽然我记忆力不好，但是我觉得更多情况下是我压根没有去使用我的记忆力……哎，得多动动脑筋了，说不定我的脑袋就是这样生锈的呢。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天看的是《中国知识分子与中古遗风》。&lt;/p&gt;
&lt;p&gt;不知何时起，“公知”已经变成了一个贬义词，虽然我没有关注这些人，但有一些的睿智言论还是是不是会传到我的眼中。&lt;/p&gt;
&lt;p&gt;就像文章里面说的一样，这些所谓的知识分子，认为自己有文化，站在伦理道德的制高点之上，去批判别人，
    
    </summary>
    
      <category term="日记" scheme="https://blog.patrickcty.cc/categories/%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="王小波" scheme="https://blog.patrickcty.cc/tags/%E7%8E%8B%E5%B0%8F%E6%B3%A2/"/>
    
  </entry>
  
  <entry>
    <title>《阿丽塔：战斗天使》</title>
    <link href="https://blog.patrickcty.cc/2019/02/27/%E3%80%8A%E9%98%BF%E4%B8%BD%E5%A1%94%EF%BC%9A%E6%88%98%E6%96%97%E5%A4%A9%E4%BD%BF%E3%80%8B/"/>
    <id>https://blog.patrickcty.cc/2019/02/27/《阿丽塔：战斗天使》/</id>
    <published>2019-02-27T06:17:38.000Z</published>
    <updated>2019-02-27T06:48:50.838Z</updated>
    
    <content type="html"><![CDATA[<h2 id="总体感觉"><a href="#总体感觉" class="headerlink" title="总体感觉"></a>总体感觉</h2><p>这部电影比我想象中的要好不少，可能因为在看之前看到了许多批评，比如故事很差，感情很尬等等问题。我看起来反而觉得并没有他们说的那么严重的问题。</p>
<p>首先很明显这是系列电影的开山之作，所以交代背景和世界观用了一些篇幅，阿丽塔从懵懂无知到变强也花了一些篇幅，因此不可避免的前面有些平淡；再加上到了最后大 Boss 和阿丽塔都还没碰面过，所以也没有太大的高潮可言。</p>
<p>至于感情戏，我觉得一点都不尬，最后男主的死（？存疑）是一个比较好的展开。在阿丽塔懵懂无知的时候，总要有个人引领她成长，开阔她的眼界。很明显这个人的另一个角色不应该是父亲，而是恋人更为合适。至于我为什么觉得男主的死亡反而是一件好事，那是因为，首先男主的能力值和阿丽塔差了太多，整部电影中男主基本上就是围观群众 + 连小怪都打不过的这样一个角色。这样的一个存在会严重影响阿丽塔的表现，其中我还真的担心她把自己的心掏给男主了……而男主的死亡反而是她成长的一个契机，那个最重要的人的去世会给她带来更加充足的动力，从而极大地推动剧情。</p>
<p>如果要说不足的话那一定就是那些反派太弱了，特别是格鲁依什卡，送了三次，除了第二次好一点之外，其他都被秒杀；还有就是全场最佳二五仔扎潘了，实力嘴炮 + 送神器，为阿丽塔之后超神的表现做出了重要助攻。另外不仅仅是反派，其他的人物也都太没有存在感了。不过这也没办法，就像一开始说的，这是系列的开山之作，而且阿丽塔太强了，和其他人完全不在一个档次上……之后的撒冷篇应该在这个方面有大的提升。</p>
<h2 id="评分"><a href="#评分" class="headerlink" title="评分"></a>评分</h2><p>评分的话我个人认为：8 / 10。剧情平淡，世界观表现令人惊喜，没有大的槽点，结局也不算太突兀，比《复仇者联盟 3》的懵逼结局好多了……</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;总体感觉&quot;&gt;&lt;a href=&quot;#总体感觉&quot; class=&quot;headerlink&quot; title=&quot;总体感觉&quot;&gt;&lt;/a&gt;总体感觉&lt;/h2&gt;&lt;p&gt;这部电影比我想象中的要好不少，可能因为在看之前看到了许多批评，比如故事很差，感情很尬等等问题。我看起来反而觉得并没有他们说的
    
    </summary>
    
      <category term="电影" scheme="https://blog.patrickcty.cc/categories/%E7%94%B5%E5%BD%B1/"/>
    
    
      <category term="科幻" scheme="https://blog.patrickcty.cc/tags/%E7%A7%91%E5%B9%BB/"/>
    
      <category term="漫改" scheme="https://blog.patrickcty.cc/tags/%E6%BC%AB%E6%94%B9/"/>
    
  </entry>
  
  <entry>
    <title>2.27随想</title>
    <link href="https://blog.patrickcty.cc/2019/02/27/2-27%E9%9A%8F%E6%83%B3/"/>
    <id>https://blog.patrickcty.cc/2019/02/27/2-27随想/</id>
    <published>2019-02-27T05:54:18.000Z</published>
    <updated>2019-02-27T06:12:20.607Z</updated>
    
    <content type="html"><![CDATA[<p>又看了一遍《特立独行的猪》，第一次看的时候我还感慨这只猪真聪明，不过这次看的时候我倒是想到了《少年派》里面那个动物的故事。究竟是真的有这样的猪，又或者是有这样一个特立独行的人，还或者这是王小波在那个年代所憧憬的样子？这些都不重要，但在那个时代，这样的特立独行就是那个让人喘不过气的日子中的一阵清风，一股清流了。</p>
<p>顺便，把《少年派》添加到待看清单了，之前一次看不是特别懂，也特别赶，是时候重新回顾一下了，这次要带着自己的思考进行。</p>
<p>对于另一篇文章《&lt;我的精神家园&gt;序》，有几句话我觉得深有其然，在此摘录下：</p>
<blockquote>
<p>假如一个社会的宗旨就是反对有趣，那它比寒冰地狱又有不如。在这个领域里发议论的人总是在说：这个不宜提倡，那个不宜提倡。仿佛人活着就是为了被提倡。要真是这样，就不如不活。罗素先生说，参差多态乃是幸福的本源——弟兄姐妹们，让我们睁开眼睛往周围看看，所谓的参差多态，它在哪里呢。</p>
</blockquote>
<p>现在整个社会的参差多态比起之前的时代确实有了不小的进步，但是一些人的思想还停留在之前的时代，真是为他们的孩子感到悲哀。我也知道，面对与自己的认知相冲突的事物是多么的不爽，但你可以不喜欢，但是不能随便评判。参差多态需要我们对与自己观念不同的人和事物的包容甚至是忍受。</p>
<p>我也要时刻提醒自己，求同存异，只有蠢人才会无时无刻不用自己的价值观去约束别人的行为。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;又看了一遍《特立独行的猪》，第一次看的时候我还感慨这只猪真聪明，不过这次看的时候我倒是想到了《少年派》里面那个动物的故事。究竟是真的有这样的猪，又或者是有这样一个特立独行的人，还或者这是王小波在那个年代所憧憬的样子？这些都不重要，但在那个时代，这样的特立独行就是那个让人喘不
    
    </summary>
    
      <category term="日记" scheme="https://blog.patrickcty.cc/categories/%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="王小波" scheme="https://blog.patrickcty.cc/tags/%E7%8E%8B%E5%B0%8F%E6%B3%A2/"/>
    
  </entry>
  
  <entry>
    <title>2.26 随想</title>
    <link href="https://blog.patrickcty.cc/2019/02/26/2-26%E9%9A%8F%E6%83%B3/"/>
    <id>https://blog.patrickcty.cc/2019/02/26/2-26随想/</id>
    <published>2019-02-26T06:30:37.000Z</published>
    <updated>2019-02-26T06:46:19.927Z</updated>
    
    <content type="html"><![CDATA[<p>今天看了《沉默的大多数》，虽然这个标题鼎鼎有名，经常被拿出来形容中国人，不过真正看过这篇文章的人可能并不多。</p>
<p>王小波说得对，大多数中国人都喜欢沉默——“在公共场合什么都不说，在私底下妙语连珠”，这话到现在还适用。</p>
<p>但其实沉默也不止一种，有蠢的沉默，也有聪明的沉默，这其中的区别就在于是否思考。一直以来我都是属于那种蠢的沉默，所以也特别容易被那些在各种地方夸夸而谈的人带节奏。</p>
<p>为什么说沉默不见得是件好事呢？因为话语这东西对无知的人，或者说是信息缺失的人来说作用很大。而沉默的人多了，那些夸夸而谈的坏心人的话语就更容易突出了，而且反驳的声音少了更多人可能就被带节奏了。所以我还是希望大家能从沉默中走出来。</p>
<p>不过就我个人而言，我还是喜欢保持沉默，一是言多必失，我怕别人抓住某一点不恰当的地方喷；再就是怕麻烦，觉得有些东西没必要说出来。不过保持沉默真的容易走向蠢的那一边，因为沉默的时候太容易不思考了，很多时候说出来就已经完成了思考的过程。</p>
<p>最后，我给自己的要求就是，可以沉默，可以宅，可以懒，但是当需要声音的时候不能保持沉默，沉默的时候不能停止思考。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天看了《沉默的大多数》，虽然这个标题鼎鼎有名，经常被拿出来形容中国人，不过真正看过这篇文章的人可能并不多。&lt;/p&gt;
&lt;p&gt;王小波说得对，大多数中国人都喜欢沉默——“在公共场合什么都不说，在私底下妙语连珠”，这话到现在还适用。&lt;/p&gt;
&lt;p&gt;但其实沉默也不止一种，有蠢的沉默
    
    </summary>
    
      <category term="日记" scheme="https://blog.patrickcty.cc/categories/%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="王小波" scheme="https://blog.patrickcty.cc/tags/%E7%8E%8B%E5%B0%8F%E6%B3%A2/"/>
    
  </entry>
  
  <entry>
    <title>2.25 随想</title>
    <link href="https://blog.patrickcty.cc/2019/02/25/2-25%E9%9A%8F%E6%83%B3/"/>
    <id>https://blog.patrickcty.cc/2019/02/25/2-25随想/</id>
    <published>2019-02-25T07:07:58.000Z</published>
    <updated>2019-02-25T07:23:13.962Z</updated>
    
    <content type="html"><![CDATA[<p>今天看了王小波《思维的乐趣》，其中最让我印象深刻的是道德与思维。</p>
<p>很多“蠢人”会过分注重道德，尤其是其他人的道德，因为这是一种再好不过的禁锢他人思想的武器了。但真正有思维能力的人则不会过分注重于事物的正确与否，因为思维中有太多比是非更令人感到愉悦的内容了。</p>
<p>一个让人变得听话——又或者说是蠢的方法就是教他道德，而非明辨是非的方法，也不培养独立的思维。</p>
<p>一直以来，虽然我开始有了独立的思维，但是在思维的方向上还是有些偏执，之后就继续读读王小波，多思考思考。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天看了王小波《思维的乐趣》，其中最让我印象深刻的是道德与思维。&lt;/p&gt;
&lt;p&gt;很多“蠢人”会过分注重道德，尤其是其他人的道德，因为这是一种再好不过的禁锢他人思想的武器了。但真正有思维能力的人则不会过分注重于事物的正确与否，因为思维中有太多比是非更令人感到愉悦的内容了。&lt;/
    
    </summary>
    
      <category term="日记" scheme="https://blog.patrickcty.cc/categories/%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="王小波" scheme="https://blog.patrickcty.cc/tags/%E7%8E%8B%E5%B0%8F%E6%B3%A2/"/>
    
  </entry>
  
  <entry>
    <title>《青春猪头少年不会梦到兔女郎学姐》</title>
    <link href="https://blog.patrickcty.cc/2019/01/02/%E3%80%8A%E9%9D%92%E6%98%A5%E7%8C%AA%E5%A4%B4%E5%B0%91%E5%B9%B4%E4%B8%8D%E4%BC%9A%E6%A2%A6%E5%88%B0%E5%85%94%E5%A5%B3%E9%83%8E%E5%AD%A6%E5%A7%90%E3%80%8B/"/>
    <id>https://blog.patrickcty.cc/2019/01/02/《青春猪头少年不会梦到兔女郎学姐》/</id>
    <published>2019-01-02T12:37:20.000Z</published>
    <updated>2019-01-02T12:43:40.473Z</updated>
    
    <content type="html"><![CDATA[<p>这是我刚刚看完的番，以下是作为纯动画党没有看过原作的我的看法。</p>
<p>首先，个人认为，这部番是一部神番，如果让我评分的话十分可以得到九分。</p>
<p>从故事的角度，片中两到三集为一个完整的情节，讲述着不同的获得「青春期综合征」的人的故事。故事节奏把握得很好，没有拖也没有赶的倾向。</p>
<p>另，虽然连官方都吐槽了“哥哥又带新的女人回家”，但其实这并不是一个后宫番，相反，男主是对女主绝对忠心的，而对其他的女生则更多是出于友情、责任心等情感。换句话来说，是问题找上了他，而非后宫找上了他。也幸好作者没有安排那些女生全都喜欢上男主，这样安排的话整部剧就会变得 low 很多……</p>
<p>虽然题材是校园，但涉及还是比较广泛和深刻的，比如校园中的小团体、霸凌、合群等现象，个人的各种心理，家庭的一些问题等等，完全没有为了 XX 而 XX 的那种俗气感。</p>
<p>不过我想说的是，正常生活中根本不会遇到这么多妹子！（<del>来自一个理工男的无能怒吼</del>）</p>
<p>从人物的角度，用一句话来形容就是：你们全都是天使吗！男主就不说了，无论是双叶还是国见，无论是学姐还是妹妹，还有众多的配角，都在用自己的方式支撑帮助着周围的人，正是因为有了真实而不造作情感，人物才丰满，正是因为人物丰满，故事情节才会让人深陷其中。</p>
<p>在这些天使之中我最喜欢的还是男主了，简直温柔的不像话，要是我有他的一半的撩妹技巧该多好啊（痛哭）。男主的温柔之处就表现在，尽管他对自己的事情不太关心，任由别人的流言蜚语来诋毁，但是对身边的人，他却总是尽力帮助他们解决困难。更加让人印象深刻的是他的性格，他属于那种“不正经”型的，虽然表面看起来非常不靠谱，但他总是能察觉到他人的真实想法，然后用一种非常合适的方法来帮助解决问题——不知不觉就说出了一些很撩的话（<del>你说这谁受得了</del>）</p>
<p>而反观我们，很少有人能像他一样察觉出别人的痛点，有时候又会显得太矫揉造作，或是表现得像“舔狗”一样。总之男主的处理思考问题的方式以及说话<del>撩妹</del>技巧非常值得我们学习。</p>
<p>不多说，期待后续的剧情！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是我刚刚看完的番，以下是作为纯动画党没有看过原作的我的看法。&lt;/p&gt;
&lt;p&gt;首先，个人认为，这部番是一部神番，如果让我评分的话十分可以得到九分。&lt;/p&gt;
&lt;p&gt;从故事的角度，片中两到三集为一个完整的情节，讲述着不同的获得「青春期综合征」的人的故事。故事节奏把握得很好，没有
    
    </summary>
    
      <category term="校园" scheme="https://blog.patrickcty.cc/categories/%E6%A0%A1%E5%9B%AD/"/>
    
    
      <category term="恋爱" scheme="https://blog.patrickcty.cc/tags/%E6%81%8B%E7%88%B1/"/>
    
      <category term="校园" scheme="https://blog.patrickcty.cc/tags/%E6%A0%A1%E5%9B%AD/"/>
    
      <category term="青春" scheme="https://blog.patrickcty.cc/tags/%E9%9D%92%E6%98%A5/"/>
    
  </entry>
  
  <entry>
    <title>近几天Flask、小程序中的坑</title>
    <link href="https://blog.patrickcty.cc/2018/06/09/%E8%BF%91%E5%87%A0%E5%A4%A9Flask%E3%80%81%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B8%AD%E7%9A%84%E5%9D%91/"/>
    <id>https://blog.patrickcty.cc/2018/06/09/近几天Flask、小程序中的坑/</id>
    <published>2018-06-09T02:49:08.000Z</published>
    <updated>2018-06-09T02:49:51.896Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关于服务器部署-Flask-的坑"><a href="#关于服务器部署-Flask-的坑" class="headerlink" title="关于服务器部署 Flask 的坑"></a>关于服务器部署 Flask 的坑</h2><ul>
<li>在服务器上如果使用 uWSGI 来运行 Flask 的话是没办法读取到环境变量的，因而可以考虑把一些配置信息写到 config 文件中。</li>
<li>Nginx 的配置文件中不同的 server 对应的可以是不同的服务器与端口，也可以是同一个服务器的多个不同的请求端口，例如 http 的 80 和 https 的 443。其中相应的配置文件一般存放在 <code>/etc/nginx</code> 目录下，我的配置文件存放在 <code>/etc/nginx/sites-available</code> 下，编辑的时候需要 sudo 权限。</li>
<li>uWSGI 的配置文件中，不知道为什么增加了 <code>buffer-size = 32768</code> 字段就无法成功运行，去掉后就正常，如要注意的话，如果配置文件中端口是用 socket 来配置的，那么就必须要通过 Nginx 来处理访问，而想直接通过 http 来访问就应该配置为 http。</li>
</ul>
<h2 id="小程序的坑"><a href="#小程序的坑" class="headerlink" title="小程序的坑"></a>小程序的坑</h2><ul>
<li>APPID 和 js_code 是相互对应的，如果不对应地调用微信的接口就会返回 Invalid APPID 的错误。</li>
<li>微信中的几乎所有接口都是异步接口，因为经常会出现数据不一致的问题，如果想保证后面数据调用前面数据是一致的话就应该采用回调嵌套的链式调用，或者使用 JS 中的异步，例如 <code>promise</code>、<code>async/await</code> 等，下面是一个封装了微信接口的 <code>promise</code> (微信已经自带)的使用实例:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line">function wxPromisify(fn) &#123;</div><div class="line">  return function (obj = &#123;&#125;) &#123;</div><div class="line">    return new Promise((resolve, reject) =&gt; &#123;</div><div class="line">      obj.success = function (res) &#123;</div><div class="line">        resolve(res)</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      obj.fail = function (res) &#123;</div><div class="line">        reject(res)</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      fn(obj)</div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">function getRequest(url, data) &#123;</div><div class="line">  var getRequest = wxPromisify(wx.request)</div><div class="line">  return getRequest(&#123;</div><div class="line">    url: url,</div><div class="line">    method: &apos;GET&apos;,</div><div class="line">    data: data,</div><div class="line">    header: &#123;</div><div class="line">      &apos;Content-Type&apos;: &apos;application/text&apos;</div><div class="line">    &#125;</div><div class="line">  &#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line">onLoad: function () &#123;</div><div class="line">    var that = this;</div><div class="line">    var url = &apos;https://api.jnugeek.cn/api/&apos;</div><div class="line">    var commentItemsData;</div><div class="line"></div><div class="line">    var driverObj = wx.getStorageSync(&apos;searchDriver&apos;)</div><div class="line">    this.setData(&#123;</div><div class="line">      searchDriver: driverObj</div><div class="line">    &#125;)</div><div class="line"></div><div class="line">    // 使用 then 来进行链式调用</div><div class="line">    util.getRequest(</div><div class="line">      url + &apos;driver_evals/&apos; + driverObj.id</div><div class="line">    ).then(res =&gt; &#123;</div><div class="line">      console.log(&apos;patrick&apos;)</div><div class="line">      console.log(res.data)</div><div class="line">      </div><div class="line">      var promises = []</div><div class="line">      commentItemsData = res.data</div><div class="line">      commentItemsData.forEach(item =&gt; &#123;</div><div class="line">        // 多个 promise 对象放在数组里面</div><div class="line">        promises.push(</div><div class="line">          util.getRequest(</div><div class="line">            url + &apos;user_info/&apos; + item.user_id</div><div class="line">          ).then(data =&gt; &#123;</div><div class="line">            console.log(&apos;data&apos;)</div><div class="line">            console.log(data)</div><div class="line">            console.log(url)</div><div class="line">            console.log(commentItemsData)</div><div class="line">            commentItemsData[commentItemsData.indexOf(item)][&apos;user&apos;] = data.data</div><div class="line">          &#125;)</div><div class="line">        )</div><div class="line">      &#125;)</div><div class="line"></div><div class="line">      // 等数组中所有的都返回了就会执行回调</div><div class="line">      return Promise.all(promises).then(() =&gt; &#123;</div><div class="line">        that.setData(&#123;</div><div class="line">          commentItems: commentItemsData</div><div class="line">        &#125;)</div><div class="line">      &#125;)</div><div class="line">    &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>参考教程:</p>
<ol>
<li><a href="https://shady-xia.github.io/es6-promise-loop/" target="_blank" rel="external">使用 primise.all 解决循环异步</a></li>
<li><a href="https://segmentfault.com/a/1190000005894077?_ea=943171" target="_blank" rel="external">Promise 的四种常用方法</a></li>
<li><a href="https://blog.csdn.net/qq_31383345/article/details/60574200" target="_blank" rel="external">微信小程序 引入es6 promise</a></li>
<li><a href="https://www.jianshu.com/p/e92c7495da76" target="_blank" rel="external">微信小程序中使用Promise进行异步流程处理</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;关于服务器部署-Flask-的坑&quot;&gt;&lt;a href=&quot;#关于服务器部署-Flask-的坑&quot; class=&quot;headerlink&quot; title=&quot;关于服务器部署 Flask 的坑&quot;&gt;&lt;/a&gt;关于服务器部署 Flask 的坑&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;在服务器上如果使
    
    </summary>
    
      <category term="Web" scheme="https://blog.patrickcty.cc/categories/Web/"/>
    
    
      <category term="Flask" scheme="https://blog.patrickcty.cc/tags/Flask/"/>
    
      <category term="小程序" scheme="https://blog.patrickcty.cc/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
      <category term="JavaScript" scheme="https://blog.patrickcty.cc/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>《复仇者联盟3》</title>
    <link href="https://blog.patrickcty.cc/2018/05/22/%E3%80%8A%E5%A4%8D%E4%BB%87%E8%80%85%E8%81%94%E7%9B%9F3%E3%80%8B/"/>
    <id>https://blog.patrickcty.cc/2018/05/22/《复仇者联盟3》/</id>
    <published>2018-05-22T08:00:19.000Z</published>
    <updated>2018-12-26T03:30:11.132Z</updated>
    
    <content type="html"><![CDATA[<h2 id="开始之前"><a href="#开始之前" class="headerlink" title="开始之前"></a>开始之前</h2><p>如果问 2018 最受关注的电影是什么？那一定非复联三莫属了——超级豪华的演员阵容，漫威十年布局，前期病毒式的营销……这一切的一切，都带动了大家对复联三的期待。</p>
<p>终于，在前一段时间，复联三终于在大陆上映了，我也去电影院刷了两次，那么究竟这部电影怎样？是否吹的太过头了呢？就让我来进行简要的分析。</p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>首先如果让我用四个字来形容这部电影的话，那一定是<strong>酣畅淋漓</strong>，或是<strong>意犹未尽</strong>，又或是<strong>值回票价</strong>。为什么能得到如此高的评价呢？因为它确实是一部制作精良的大作。</p>
<p>首先是演员阵容，这次除了鹰眼和蚁人之外，其他我们熟悉的超级英雄几乎悉数登场，且人虽多，但是由于影片内容安排得精妙，完全不会显得有走过场的嫌疑（虽然还是有不少英雄出来就是打酱油，说的就是你冬兵，猎鹰，战争机器）。</p>
<p>再者就是电影的特效了，特效这事其实不用多说，看过漫威电影的应该深有感触，而这次的水平更是巅峰水平（虽然和之前拉不开差距）。</p>
<p>剧情方面的话比较反套路、有新意，这次超级英雄们基本上都处在被动的局面，结局也比较出乎意料，这就使得电影结束的时候大家都是一脸懵逼。</p>
<p>不过剧情方面受制于时间以及众多支线的原因，一些重要的地方表达不太到位，因此有些地方看起来会有些突兀感。</p>
<p>具体来说其一就是灭霸对卡魔拉的感情，作为绝对主角的灭霸，影片对他感情的刻画居然不到位，真是不太应该。在感情这方面，影片插入了灭霸收养卡魔拉的会议部分，但是灭霸为什么对卡魔拉爱的那么深，卡魔拉对灭霸又为什么是又爱又恨这些都没有进行相应的回忆穿插（不知道银护一有没有刻画）。因而当灭霸把卡魔拉推下悬崖的时候我的内心是毫无波澜的，甚至还有点懵逼……</p>
<p>其二就是有一些角色的能力没有好好利用，例如在泰坦星的时候，明明奇异博士可以直接用圈圈剪掉灭霸的手套的，也可以用时间宝石回溯到星爵打灭霸拳头之前的，但是就是没这样做……如果硬要说这一切都在奇异博士的预料中那我也无话可说。再就是幻视了，这么强的战斗力，结果反而变成了拖后腿的存在……我觉得最大的败笔在于在瓦坎达，为什么这些英雄要和小喽啰打……眼睁睁看着外星飞船下来都不拦截一下的么……瓦坎达的科技这么强……这部分就只有战斗场面比较恢弘了，真的感觉他们都不讲一点智谋的……</p>
<p>吐槽归吐槽，兵分多路这个点我觉得是及其妙的，不至于一大堆英雄都聚集到一起，失去重点，多路汇合成两路是最精妙的部分，中间银护和铁人他们起冲突部分也非常有趣。而最后结局部分，让人无比期待下一部复联的内容了。漫威的一个优点就是从来不坑，因此安心等下一部就好啦~</p>
<h2 id="评分"><a href="#评分" class="headerlink" title="评分"></a>评分</h2><p>8/10.</p>
<p>优点上面强调过多次了，不足的话就是参与的人太多而不可避免的一些问题。瑕不掩瑜，这一个漫威电影十周年给出的答卷，不会让粉丝失望！</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;开始之前&quot;&gt;&lt;a href=&quot;#开始之前&quot; class=&quot;headerlink&quot; title=&quot;开始之前&quot;&gt;&lt;/a&gt;开始之前&lt;/h2&gt;&lt;p&gt;如果问 2018 最受关注的电影是什么？那一定非复联三莫属了——超级豪华的演员阵容，漫威十年布局，前期病毒式的营销……这一切
    
    </summary>
    
      <category term="电影" scheme="https://blog.patrickcty.cc/categories/%E7%94%B5%E5%BD%B1/"/>
    
    
      <category term="漫威" scheme="https://blog.patrickcty.cc/tags/%E6%BC%AB%E5%A8%81/"/>
    
      <category term="超级英雄" scheme="https://blog.patrickcty.cc/tags/%E8%B6%85%E7%BA%A7%E8%8B%B1%E9%9B%84/"/>
    
  </entry>
  
  <entry>
    <title>Truffle 框架开发 Dapp 中的注意事项</title>
    <link href="https://blog.patrickcty.cc/2018/05/01/Truffle%E6%A1%86%E6%9E%B6%E5%BC%80%E5%8F%91Dapp%E4%B8%AD%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/"/>
    <id>https://blog.patrickcty.cc/2018/05/01/Truffle框架开发Dapp中的注意事项/</id>
    <published>2018-05-01T08:43:03.000Z</published>
    <updated>2018-05-01T08:43:54.480Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Truffle 是开发 Ethereum 的一个框架。</p>
<h2 id="编写合约"><a href="#编写合约" class="headerlink" title="编写合约"></a>编写合约</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>智能合约使用的是 solidity 语言，这个语言在一些地方与平常使用的高级语言不同，因而可能会遇到一些坑。</p>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><ul>
<li>solidity 中变量分为两类：memory 和 storage，前者就类似于我们平常语言中的变量，存放在内存中，在调用结束后就会释放掉。</li>
<li>而 storage 类型的变量则会存放在区块链中，因而它实际表示的是指针，也正是因为这个原因，这两种变量不能混合使用。</li>
<li>另外，定义在 Contract 函数之外的变量默认是 storage 类型的。</li>
</ul>
<h4 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h4><ul>
<li>solidity 中 event 的作用就是把发生的事件记录在区块链上成为日志。事件可以通过 web3 来监听。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// 定义事件</div><div class="line">event transfer(address indexed _from, address indexed _to, uint indexed value);</div><div class="line"></div><div class="line">// 事件发生，新版本需要加入 emit 关键词</div><div class="line">emit transfer(msg.sender, current, value);</div></pre></td></tr></table></figure>
<h4 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mapping(address =&gt; User) userPool;</div></pre></td></tr></table></figure>
<ul>
<li>solidty 中的映射不需要初始化，而且对于不在映射中的内容，通过 m[key] 来调用并不会返回类似于 null 的内容，而是会返回这个类型的默认值，比如 uint 返回的就是 0，因而要检查是否在映射中的时候可能需要辅助的属性：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">struct Num &#123;</div><div class="line">    uint count,</div><div class="line">    bool inMap</div><div class="line">&#125;</div><div class="line"></div><div class="line">mapping(uint =&gt; Num) numMap;</div><div class="line"></div><div class="line">if (numMap[1].inMap) &#123; 在映射中 &#125;</div><div class="line">else &#123; 不在映射中 &#125;</div></pre></td></tr></table></figure>
<h4 id="字符串比较"><a href="#字符串比较" class="headerlink" title="字符串比较"></a>字符串比较</h4><ul>
<li>solidity 中不能直接使用 <code>==</code> 来比较字符串，需要一个一个字符来比较或者来比较二者的 hash 值：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">keccak256(str1) == keccak256(str2)</div></pre></td></tr></table></figure>
<h4 id="msg-sender-amp-amp-tx-origin"><a href="#msg-sender-amp-amp-tx-origin" class="headerlink" title="msg.sender &amp;&amp; tx.origin"></a>msg.sender &amp;&amp; tx.origin</h4><ul>
<li>在用户调用合约的时候，msg.sender 和 tx.origin 都是用户的地址</li>
<li>在合约调用合约的时候，msg.sender 是 合约的地址，而 tx.origin 是用户</li>
</ul>
<p>这个一定要注意，我就在这里卡了很久。</p>
<h4 id="三个常用方法"><a href="#三个常用方法" class="headerlink" title="三个常用方法"></a>三个常用方法</h4><h5 id="require"><a href="#require" class="headerlink" title="require()"></a>require()</h5><p>里面是一个 bool 表达式，为真的时候才会执行下面的内容。用来检查不严重的错误，可以退回 gas。</p>
<h5 id="assert"><a href="#assert" class="headerlink" title="assert()"></a>assert()</h5><p>这个方法和 require 类似，但是一般是用来检查严重的错误，会拿走 gas。</p>
<h5 id="revert"><a href="#revert" class="headerlink" title="revert()"></a>revert()</h5><p>这个方法里面没有参数，会终止并且恢复之前的状态。</p>
<h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><ul>
<li>solidity 数组可以定义不定长的数组，但是要初始化空的不定长数组则要使用 new </li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// 这里默认是长度为一的数组</div><div class="line">// 但是可以通过两种方法来改变：</div><div class="line">// 1. 直接改变长度：list.length++</div><div class="line">// 2. 通过 push 来增加元素 list.push(123)</div><div class="line">uint[] list = new int[](1);</div></pre></td></tr></table></figure>
<h2 id="truffle-常用命令"><a href="#truffle-常用命令" class="headerlink" title="truffle 常用命令"></a>truffle 常用命令</h2><h3 id="compile"><a href="#compile" class="headerlink" title="compile"></a>compile</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">truffle compile</div></pre></td></tr></table></figure>
<p>这个命令用来把合约编译成 EVM 可以读懂的语言</p>
<h3 id="migrate"><a href="#migrate" class="headerlink" title="migrate"></a>migrate</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">truffle migrate</div></pre></td></tr></table></figure>
<p>这个命令用来把合约部署到区块链上，在修改合约之后就不用再次编译，直接使用这个命令部署即可</p>
<p>如果想清除掉之前的数据而不像删除掉编译已生成的 build 则可以加一个 <code>--reset</code> 参数</p>
<h3 id="test"><a href="#test" class="headerlink" title="test"></a>test</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">truffle test</div></pre></td></tr></table></figure>
<p>这个命令会运行 test 文件夹中的单元测试，其中单元测试文件要以 Test 作为开头，单元测试方法需要以 test 开头</p>
<h2 id="在-js-中调用合约"><a href="#在-js-中调用合约" class="headerlink" title="在 js 中调用合约"></a>在 js 中调用合约</h2><h3 id="创建-web3-对象"><a href="#创建-web3-对象" class="headerlink" title="创建 web3 对象"></a>创建 web3 对象</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">if (typeof web3 !== &apos;undefined&apos;) &#123;</div><div class="line">    App.web3Provider = web3.currentProvider;</div><div class="line">    web3 = new Web3(web3.currentProvider);</div><div class="line">&#125; else &#123;</div><div class="line">    App.web3Provider = new Web3(new Web3.providers.HttpProvider(&apos;http://localhost:7545&apos;));</div><div class="line">    web3 = new Web3(web3.web3Provider);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果已经存在就直接绑定，不存在的话就根据本地的内容来创建再绑定。</p>
<h3 id="读取合约"><a href="#读取合约" class="headerlink" title="读取合约"></a>读取合约</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$.getJSON(&apos;TeamMarket.json&apos;, function(data) &#123;</div><div class="line">    var TMArtifact = data;</div><div class="line">    App.contracts.TeamMarket = TruffleContract(TMArtifact);</div><div class="line"></div><div class="line">    App.contracts.TeamMarket.setProvider(App.web3Provider);</div><div class="line"></div><div class="line">    App.initCompetitions();</div><div class="line">    </div><div class="line">    return App.markJoined();</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>这里的 json 文件是编译所产生的，其中要注意 getJSON 中的 JSON 是大写的，不然就会出现傻逼的错误（说的就是我……）。</p>
<p>另外在 HTML 部分记得要引入 truffle 相应的 js 文件。</p>
<h3 id="和合约交互"><a href="#和合约交互" class="headerlink" title="和合约交互"></a>和合约交互</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">web3.eth.getAccounts(function(error, accounts) &#123;</div><div class="line">    if (error) &#123;</div><div class="line">        console.log(error);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    var account = accounts[0];</div><div class="line"></div><div class="line">    App.contracts.TeamMarket.deployed().then(function(instance) &#123;</div><div class="line">        TMInstance = instance;</div><div class="line"></div><div class="line">        return TMInstance.createUser(name, email, major);</div><div class="line">    &#125;).then(function () &#123;</div><div class="line">        alert(&quot;创建账号成功，等待写入区块链&quot;);</div><div class="line">    &#125;).catch(function(err) &#123;</div><div class="line">        alert(&quot;有错误发生，创建账号失败&quot;);</div><div class="line">        console.log(err.message);</div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>这里是通过 web3 接口来读取用户信息，返回的是一个 list，一般第一个就是当前用户</p>
<p>然后获取合约的实例<code>App.contracts.TeamMarket.deployed()</code>，这里是一个 Promise，在 then 里面就已经获取到了相应的实例，然后再通过这个实例来调用合约里面的方法就可以了。</p>
<p>不过在调用合约之后的 then 中不知道为什么有时候不会执行里面的语句……还得研究研究……</p>
<h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><h3 id="truffle-js"><a href="#truffle-js" class="headerlink" title="truffle.js"></a>truffle.js</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">module.exports = &#123;</div><div class="line">  networks: &#123;</div><div class="line">    development: &#123;</div><div class="line">      host: &quot;127.0.0.1&quot;,</div><div class="line">      port: 7545,</div><div class="line">      network_id: &quot;*&quot;,</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>这里是配置区块链网络</p>
<h3 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;name&quot;: &quot;teamseeker&quot;,</div><div class="line">  &quot;version&quot;: &quot;1.0.0&quot;,</div><div class="line">  &quot;description&quot;: &quot;&quot;,</div><div class="line">  &quot;main&quot;: &quot;truffle.js&quot;,</div><div class="line">  &quot;directories&quot;: &#123;</div><div class="line">    &quot;test&quot;: &quot;test&quot;</div><div class="line">  &#125;,</div><div class="line">  &quot;scripts&quot;: &#123;</div><div class="line">    &quot;dev&quot;: &quot;lite-server&quot;,</div><div class="line">    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</div><div class="line">  &#125;,</div><div class="line">  &quot;author&quot;: &quot;&quot;,</div><div class="line">  &quot;license&quot;: &quot;ISC&quot;,</div><div class="line">  &quot;devDependencies&quot;: &#123;</div><div class="line">    &quot;lite-server&quot;: &quot;^2.3.0&quot;</div><div class="line">  &#125;,</div><div class="line">  &quot;dependencies&quot;: &#123;</div><div class="line">    &quot;web3&quot;: &quot;^1.0.0-beta.34&quot;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里更多是运行的 js 的一系列配置了，比如在这里配置了成序运行所使用的服务器 </p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;Truffle 是开发 Ethereum 的一个框架。&lt;/p&gt;
&lt;h2 id=&quot;编写合约&quot;&gt;&lt;a href=&quot;#编写合约&quot; class=&quot;h
    
    </summary>
    
      <category term="BlockChain" scheme="https://blog.patrickcty.cc/categories/BlockChain/"/>
    
    
      <category term="Fronted" scheme="https://blog.patrickcty.cc/tags/Fronted/"/>
    
      <category term="Truffle" scheme="https://blog.patrickcty.cc/tags/Truffle/"/>
    
      <category term="Contract" scheme="https://blog.patrickcty.cc/tags/Contract/"/>
    
      <category term="BlockChain" scheme="https://blog.patrickcty.cc/tags/BlockChain/"/>
    
  </entry>
  
  <entry>
    <title>Python协程</title>
    <link href="https://blog.patrickcty.cc/2018/04/27/Python%E5%8D%8F%E7%A8%8B/"/>
    <id>https://blog.patrickcty.cc/2018/04/27/Python协程/</id>
    <published>2018-04-27T07:36:07.000Z</published>
    <updated>2018-04-27T07:37:02.416Z</updated>
    
    <content type="html"><![CDATA[<h2 id="generator"><a href="#generator" class="headerlink" title="generator"></a>generator</h2><p>如果把一个可迭代对象比作一辆装有电池的四驱车，那么四驱车的马达会在电池电量耗尽之时才会停止；但是 generator 则像是一个发条小车，它每次都只会在拧动发条之后才会前进相应的距离。这个发条就是“yield” 关键字。</p>
<h3 id="作为可迭代对象"><a href="#作为可迭代对象" class="headerlink" title="作为可迭代对象"></a>作为可迭代对象</h3><p>generator 也是一个可迭代对象，它可以通过类似于列表生成式的方式来定义：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">g = (x for x in range(10))</div></pre></td></tr></table></figure>
<p>需要注意的是这里的括号是小括号，如果是中括号的话生成的就是一个普通的列表了。</p>
<p>在这里获得 g 的所有结果有两种方法，一种是多次使用十次 next() 来依次生成每个值：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; next(g)</div><div class="line">0</div><div class="line">&gt;&gt;&gt; next(g)</div><div class="line">1</div><div class="line">&gt;&gt;&gt; next(g)</div><div class="line">2</div><div class="line">&gt;&gt;&gt; next(g)</div><div class="line">3</div><div class="line">&gt;&gt;&gt; next(g)</div><div class="line">4</div><div class="line">&gt;&gt;&gt; next(g)</div><div class="line">5</div><div class="line">&gt;&gt;&gt; next(g)</div><div class="line">6</div><div class="line">&gt;&gt;&gt; next(g)</div><div class="line">7</div><div class="line">&gt;&gt;&gt; next(g)</div><div class="line">8</div><div class="line">&gt;&gt;&gt; next(g)</div><div class="line">9</div><div class="line">&gt;&gt;&gt; next(g)</div><div class="line">Traceback (most recent call last):</div><div class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</div><div class="line">StopIteration</div></pre></td></tr></table></figure>
<p>如果调用的太多了就会产生错误。</p>
<p>第二种就是直接把 g 作为可迭代对象在 for in 中循环：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">for num in g:</div><div class="line">    print(num)</div></pre></td></tr></table></figure>
<h3 id="作为函数"><a href="#作为函数" class="headerlink" title="作为函数"></a>作为函数</h3><p>我们还可以把一个函数作为 generator 来使用，这里就需要使用我们的 yield 发条来进行改造了</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">def count(mmax):</div><div class="line">    for i in range(mmax):</div><div class="line">        yield i</div></pre></td></tr></table></figure>
<p>作为函数也同样有两种用法：使用 next 调用和直接放入 for in 循环中：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"># 方法一</div><div class="line">c = count(10)</div><div class="line">next(c)</div><div class="line">next(c)</div><div class="line">...</div><div class="line"></div><div class="line"># 方法二</div><div class="line">for num in count(10):</div><div class="line">    print(num)</div></pre></td></tr></table></figure>
<p>这里最令人费解的就是 yield 关键字了，在 generator 运行的过程中，当执行到 yield 的时候，程序就会暂停下来，返回 yield 后面对应的值。只有调用 next() 之后才会继续从刚才停下的地方开始执行直到遇到下一个 yield 又再次停止。</p>
<h2 id="Coroutine"><a href="#Coroutine" class="headerlink" title="Coroutine"></a>Coroutine</h2><p>Coroutine 叫做协程，又叫做微线程。协程的作用，是在执行函数A时，可以随时中断，去执行函数B，然后中断继续执行函数A（可以自由切换）。但这一过程并不是函数调用（没有调用语句），这一整个过程看似像多线程，然而协程只有一个线程执行<a href="https://thief.one/2017/02/20/Python%E5%8D%8F%E7%A8%8B/" target="_blank" rel="external">【1】</a>。</p>
<p>Coroutine 分为三个阶段：</p>
<ul>
<li>generator 变形 yield/send()</li>
<li>@asyncio.coroutine 以及 yield from</li>
<li>async/await</li>
</ul>
<h3 id="generator-变形-yield-send"><a href="#generator-变形-yield-send" class="headerlink" title="generator 变形 yield/send()"></a>generator 变形 yield/send()</h3><p>这一阶段和 generator 不同的是对 yield 的用法进行了扩展，除了 yield 除了可以返回数据之外还可以接收数据。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># getData 是接收到的数据，returnData 是发送出去的数据</div><div class="line">getData = yield returnData</div></pre></td></tr></table></figure>
<p>我们知道 generator 是通过 next() 或者直接迭代来得到下一个结果，而这里则是通过 coroutine.send() 来得到下一个结果，或者更准确的来说是让子程序继续往后执行，但要注意的是在初始化也就是第一次调用的时候要使用 coroutine.send(None)，这里其实是启动 generator。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">def funA():</div><div class="line">    while True:</div><div class="line">        r = yield &apos;fine, thank you！&apos;</div><div class="line">        print(r)</div><div class="line">        </div><div class="line">def funB(c):</div><div class="line">    # 启动 generator</div><div class="line">    c.send(None)</div><div class="line">    i = 0</div><div class="line">    while i &lt; 3:</div><div class="line">        r = c.send(&apos;how are you？&apos;)</div><div class="line">        print(r)</div><div class="line">        i += 1</div><div class="line">    # 关闭 funA</div><div class="line">    c.close()</div><div class="line">    </div><div class="line">c = funA()</div><div class="line">funB(c)</div></pre></td></tr></table></figure>
<blockquote>
<p>运行结果为：<br>how are you?<br>fine, thank you!<br>how are you?<br>fine, thank you!<br>how are you?<br>fine, thank you!</p>
</blockquote>
<p>在这里 funB 通过 send 给 funA 发送信息，之后 funB 通过 yield 回复信息给 funA，但这两者在发送的同时（其实是之后）也可以读取到相应的信息。</p>
<p>运行的流程是这样的：</p>
<ul>
<li>funB 启动了 generator</li>
<li>funA 运行到 yield 处向 funA 发送 ‘fine, thank you！’，然后切换到 funB</li>
<li>funB 运行到 send() 向 funA 发送了 ‘how are you？’，切换回 funA</li>
<li>funA 从 yield 接收到 funB 的消息，继续运行到 yield 处向 funA 发送 ‘fine, thank you！’，然后切换到 funB</li>
<li>funB 接收到 funA 的消息，继续运行到 send() 向 funA 发送了 ‘how are you？’，切换回 funA</li>
<li>重复以上过程直到 funB 使用 c.close() 关闭 funA，运行结束</li>
</ul>
<p>需要注意的是其实 send() 和 yield 的作用是非常类似的，只不过 send() 是主动方，yield 是被动方。</p>
<h3 id="asyncio-coroutine-以及-yield-from"><a href="#asyncio-coroutine-以及-yield-from" class="headerlink" title="@asyncio.coroutine 以及 yield from"></a>@asyncio.coroutine 以及 yield from</h3><p>在 send() 和 yield 部分是由明显的主动被动关系，但是在这里则更多的是一种并列关系，这里要处理的问题是在一方进行 io 操作时另一方能充分利用这段空闲的时间。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">import asyncio</div><div class="line"></div><div class="line">@asyncio.coroutine</div><div class="line">def funA():</div><div class="line">    print(&apos;hello, world!&apos;)</div><div class="line">    yield from asyncio.sleep(1)</div><div class="line">    print(&apos;hello, again!&apos;)</div><div class="line">    </div><div class="line">@asyncio.coroutine</div><div class="line">def funB():</div><div class="line">    print(&apos;are you ok?&apos;)</div><div class="line">    yield from asyncio.sleep(1)</div><div class="line">    print(&apos;hello, thank you! thank you very much!&apos;)</div><div class="line">    </div><div class="line">loop = asyncio.get_event_loop()</div><div class="line">tasks = [funA(), funB()]</div><div class="line">loop.run_until_complete(asyncio.wait(tasks))</div><div class="line">loop.close()</div></pre></td></tr></table></figure>
<blockquote>
<p>运行结果：<br>are you ok?<br>hello, world!<br>hello, thank you! thank you very much!<br>hello, again!</p>
</blockquote>
<p>这里 funA funB 是作为两个互相独立的 task 来运行的，yield 后面紧接着的是一个协程的函数过程，这就是说在这里 CPU 空闲出来了，于是切换给另一个 task 来执行。注意的是这里的 funA() funB() 其实都是 generator，因而并不会马上执行。</p>
<p>这里的运行过程是这样的：</p>
<ul>
<li>我们首先获得了当前的 event loop，然后将 funA funB 两个 task 放在其中，通过 asyncio.wait() 来执行</li>
<li>首先被调用的是 funB，它运行到 yield 处阻塞，此时切换到 funA 执行</li>
<li>同理，funA 也是运行到 yield 处阻塞，此时切换到 funB 执行</li>
<li>funB 继续执行直到完成释放资源，此时再次切换到 funA 执行直到结束</li>
<li>所有任务完成，run_until_complete() 返回，接下来可以关掉 event loop 了</li>
</ul>
<h3 id="async-await"><a href="#async-await" class="headerlink" title="async/await"></a>async/await</h3><p>而 async/await 与 generator 变形 yield/send() 的区别就没有之前两者区别那么大了，async/await 对之前的形式进行了优化，让 coroutine 的代码更简洁易读。</p>
<p>如果要使用 async/await 就只用：</p>
<ol>
<li>把 @asyncio.coroutine 替换为 async（在 def 前面）</li>
<li>把 yield from 替换为 await</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">import asyncio</div><div class="line"></div><div class="line">async def funA():</div><div class="line">    print(&apos;hello, world!&apos;)</div><div class="line">    await asyncio.sleep(1)</div><div class="line">    print(&apos;hello, again!&apos;)</div><div class="line">    </div><div class="line">async def funB():</div><div class="line">    print(&apos;are you ok?&apos;)</div><div class="line">    await asyncio.sleep(1)</div><div class="line">    print(&apos;hello, thank you! thank you very much!&apos;)</div><div class="line">    </div><div class="line">loop = asyncio.get_event_loop()</div><div class="line">tasks = [funA(), funB()]</div><div class="line">loop.run_until_complete(asyncio.wait(tasks))</div><div class="line">loop.close()</div></pre></td></tr></table></figure>
<p>这样一看确实简洁了不少，也不会和 generator 中的 yield 搞混淆了。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>使用这些高级方法，我们 Python 程序的效率可以进一步提高，特别是充分地利用了 io 的时间。</p>
<h2 id="更多示例代码"><a href="#更多示例代码" class="headerlink" title="更多示例代码"></a>更多示例代码</h2><h3 id="生成器生成杨辉三角"><a href="#生成器生成杨辉三角" class="headerlink" title="生成器生成杨辉三角"></a>生成器生成杨辉三角</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">def yanghuiTri(mmax):</div><div class="line">    tri = [[1], [1, 1]]</div><div class="line">    yield tri[0]</div><div class="line">    yield tri[1]</div><div class="line">    r = 2</div><div class="line">    while r &lt; mmax:</div><div class="line">        row = [1]</div><div class="line">        </div><div class="line">        for i in range(1, r):</div><div class="line">            row.append(tri[r - 1][i - 1] + tri[r - 1][i])</div><div class="line">        row.append(1)</div><div class="line">        tri.append(row)</div><div class="line">        yield tri[r]</div><div class="line">        r += 1</div><div class="line"></div><div class="line"></div><div class="line">for l in yanghuiTri(10):</div><div class="line">    print(l)</div></pre></td></tr></table></figure>
<h3 id="asyncio-coroutine-获取网页头部"><a href="#asyncio-coroutine-获取网页头部" class="headerlink" title="@asyncio.coroutine 获取网页头部"></a>@asyncio.coroutine 获取网页头部</h3><p><a href="https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001432090954004980bd351f2cd4cc18c9e6c06d855c498000" target="_blank" rel="external">来源</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">import asyncio</div><div class="line"></div><div class="line"># 如果要使用 async/await 就只用：</div><div class="line"># 1. 把 @asyncio.coroutine 替换为 async（在 def 前面）</div><div class="line"># 2. 把 yield from 替换为 await</div><div class="line"></div><div class="line"></div><div class="line">@asyncio.coroutine</div><div class="line">def wget(host):</div><div class="line">    print(&apos;wget %s...&apos; % host)</div><div class="line">    # asyncio.open_connection 返回一个 (reader, writer) 的二元组</div><div class="line">    # 来建立连接</div><div class="line">    connet = asyncio.open_connection(host, 80)</div><div class="line">    # yield from 一般是 io 请求，其实更准确的来说也是一个 coroutine，如果不是的话就会报错</div><div class="line">    # 此时程序直接进入另一个 task</div><div class="line">    # 等执行完返回值后再继续切换回来</div><div class="line">    reader, writer = yield from connet</div><div class="line">    header = &apos;GET / HTTP/1.0\r\nHost: %s\r\n\r\n&apos; %host</div><div class="line">    # 发送 HTTP 请求</div><div class="line">    # 因为传输的是字节，因而要 encode</div><div class="line">    writer.write(header.encode(&apos;utf-8&apos;))</div><div class="line">    # 这里也是 io 请求，清空缓冲区</div><div class="line">    yield from writer.drain()</div><div class="line">    while True:</div><div class="line">        line = yield from reader.readline()</div><div class="line">        # 回答报文头部和正文之间间隔了一个 \r\n（字节形式的）</div><div class="line">        if line == b&apos;\r\n&apos;:</div><div class="line">            return</div><div class="line">        # Python rstrip() 删除 string 字符串末尾的指定字符（默认为空格）</div><div class="line">        # decode 是因为数据是以字节流来传输的</div><div class="line">        print(&apos;%s header &gt; %s&apos; % (host, line.decode(&apos;utf-8&apos;.rstrip())))</div><div class="line">    # 断开 TCP</div><div class="line">    writer.close()</div><div class="line"></div><div class="line">loop = asyncio.get_event_loop()</div><div class="line">tasks = [wget(host) for host in [&apos;www.sina.com.cn&apos;, &apos;www.sohu.com&apos;, &apos;www.163.com&apos;]]</div><div class="line"># asynico.wait 来让任务阻塞时能唤醒另一个任务</div><div class="line">loop.run_until_complete(asyncio.wait(tasks))</div><div class="line">loop.close()</div></pre></td></tr></table></figure>
<h3 id="asyn-await-获取网页头部"><a href="#asyn-await-获取网页头部" class="headerlink" title="asyn/await 获取网页头部"></a>asyn/await 获取网页头部</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">import asyncio</div><div class="line"></div><div class="line">async def wget(host):</div><div class="line">    print(&apos;wget %s...&apos; % host)</div><div class="line">    # asyncio.open_connection 返回一个 (reader, writer) 的二元组</div><div class="line">    # 来建立连接</div><div class="line">    connet = asyncio.open_connection(host, 80)</div><div class="line">    # await 一般是 io 请求</div><div class="line">    # 此时程序直接进入另一个 task</div><div class="line">    # 等执行完返回值后再继续切换回来</div><div class="line">    reader, writer = await connet</div><div class="line">    header = &apos;GET / HTTP/1.0\r\nHost: %s\r\n\r\n&apos; %host</div><div class="line">    # 发送 HTTP 请求</div><div class="line">    # 因为传输的是字节，因而要 encode</div><div class="line">    writer.write(header.encode(&apos;utf-8&apos;))</div><div class="line">    # 这里也是 io 请求，清空缓冲区</div><div class="line">    await writer.drain()</div><div class="line">    while True:</div><div class="line">        line = await reader.readline()</div><div class="line">        # 回答报文头部和正文之间间隔了一个 \r\n（字节形式的）</div><div class="line">        if line == b&apos;\r\n&apos;:</div><div class="line">            return</div><div class="line">        # Python rstrip() 删除 string 字符串末尾的指定字符（默认为空格）</div><div class="line">        # decode 是因为数据是以字节流来传输的</div><div class="line">        print(&apos;%s header &gt; %s&apos; % (host, line.decode(&apos;utf-8&apos;.rstrip())))</div><div class="line">    # 断开 TCP</div><div class="line">    writer.close()</div><div class="line"></div><div class="line">loop = asyncio.get_event_loop()</div><div class="line">tasks = [wget(host) for host in [&apos;www.sina.com.cn&apos;, &apos;www.sohu.com&apos;, &apos;www.163.com&apos;]]</div><div class="line"># asynico.wait 来让任务阻塞时能唤醒另一个任务</div><div class="line">loop.run_until_complete(asyncio.wait(tasks))</div><div class="line">loop.close()</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;generator&quot;&gt;&lt;a href=&quot;#generator&quot; class=&quot;headerlink&quot; title=&quot;generator&quot;&gt;&lt;/a&gt;generator&lt;/h2&gt;&lt;p&gt;如果把一个可迭代对象比作一辆装有电池的四驱车，那么四驱车的马达会在电池电量耗尽之时才
    
    </summary>
    
      <category term="Python" scheme="https://blog.patrickcty.cc/categories/Python/"/>
    
    
      <category term="Python" scheme="https://blog.patrickcty.cc/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>《头号玩家》——我为什么觉得它那么精彩</title>
    <link href="https://blog.patrickcty.cc/2018/04/07/%E3%80%8A%E5%A4%B4%E5%8F%B7%E7%8E%A9%E5%AE%B6%E3%80%8B%E2%80%94%E2%80%94%E6%88%91%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A7%89%E5%BE%97%E5%AE%83%E9%82%A3%E4%B9%88%E7%B2%BE%E5%BD%A9/"/>
    <id>https://blog.patrickcty.cc/2018/04/07/《头号玩家》——我为什么觉得它那么精彩/</id>
    <published>2018-04-07T14:40:53.000Z</published>
    <updated>2018-12-26T03:30:11.130Z</updated>
    
    <content type="html"><![CDATA[<p>前几天我跟风去看了最近大热的电影《头号玩家》，整部电影的观感可以用一个词来形容：酣畅淋漓！那么究竟为什么我会觉得它那么精彩呢？</p>
<p>首先就像知乎里面的大家说的那样：认同感。从小到大，对于游戏，大多数人的印象都是精神鸦片以及类似的贬义词。但这整部电影是以游戏世界绿洲为背景的，这种设定是对游戏无声的肯定，也切切实实让我们也有了认同感，游戏在这里并不是鸦片，而是整个世界中不可或缺甚至是最重要的部分。</p>
<p>其次就是主角的身份了，主角是一个普通人，就和我们大家一样，这一点抹掉了通常的这种题材电影中主角和观众的距离。而主角的神勇同时也在表明着我们也能一样神勇，这种映射使得影片的代入感很强，观看时沉浸度也很高，更容易体会主角的感情以及电影的内容。</p>
<p>再者则是爱情与友情了，在游戏中也一样能收获到甜美的爱情以及坚定的友情。就像上一点所说，主角离我们很近，主角的爱情和友情一样会被映射到我们自己的身上。试问这样的爱情和友情谁不想拥有呢（特别对于单身狗）？在这里的爱情尤其的甜，特别是主角和女主在现实生活中见面的时候，对我来说这个场景甚至比许多爱情电影还要甜。为什么呢？因为虚拟场景中的恋爱是和现实中的恋爱有着巨大的鸿沟的，这种鸿沟的跨越，难道不令人激动么！更何况游戏中的妹子在现实中不仅是妹子而且还那么美丽而性感（醒醒，在网络中找不到的！）！</p>
<p>P.S. 真的太喜欢女主了！越看越顺眼！无论是游戏里还是游戏外！！！</p>
<p>除此之外，游戏中的各种彩蛋也是加分项，看到自己熟识的其他电影游戏中的角色与元素出现在现在大屏幕上，认同感再一次得到了加强，这就使得观影体验进一步的提高，观影的兴致也就更加高涨了~即使有不熟悉或者不认识相应的元素，但是帅不就够了么！比如看见高达出现在真人电影中真的太帅了！除了帅之外，同样的角色从动画到电影是一种全新的体验，是另一种诠释方式，这种令人耳目一新的感觉真的太棒了！</p>
<p>总之，无限加强的代入感和无限缩小的距离感使得电影仿佛多了一个维度，正是这多出的维度让电影变得更加精彩~至少对于我来说是这样的！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前几天我跟风去看了最近大热的电影《头号玩家》，整部电影的观感可以用一个词来形容：酣畅淋漓！那么究竟为什么我会觉得它那么精彩呢？&lt;/p&gt;
&lt;p&gt;首先就像知乎里面的大家说的那样：认同感。从小到大，对于游戏，大多数人的印象都是精神鸦片以及类似的贬义词。但这整部电影是以游戏世界绿洲
    
    </summary>
    
      <category term="电影" scheme="https://blog.patrickcty.cc/categories/%E7%94%B5%E5%BD%B1/"/>
    
    
      <category term="虚拟现实" scheme="https://blog.patrickcty.cc/tags/%E8%99%9A%E6%8B%9F%E7%8E%B0%E5%AE%9E/"/>
    
      <category term="游戏" scheme="https://blog.patrickcty.cc/tags/%E6%B8%B8%E6%88%8F/"/>
    
      <category term="幸福" scheme="https://blog.patrickcty.cc/tags/%E5%B9%B8%E7%A6%8F/"/>
    
  </entry>
  
  <entry>
    <title>《三体》——科技外壳下对人性的深刻剖析</title>
    <link href="https://blog.patrickcty.cc/2018/04/07/%E3%80%8A%E4%B8%89%E4%BD%93%E3%80%8B%E2%80%94%E2%80%94%E7%A7%91%E6%8A%80%E5%A4%96%E5%A3%B3%E4%B8%8B%E5%AF%B9%E4%BA%BA%E6%80%A7%E7%9A%84%E6%B7%B1%E5%88%BB%E5%89%96%E6%9E%90/"/>
    <id>https://blog.patrickcty.cc/2018/04/07/《三体》——科技外壳下对人性的深刻剖析/</id>
    <published>2018-04-07T12:45:07.000Z</published>
    <updated>2018-12-26T03:30:11.005Z</updated>
    
    <content type="html"><![CDATA[<p>初读《三体》，最吸引我的是其中的硬科幻，也就是它在科幻中融入的大量的科学知识，也因为如此小说新奇而同时贴合实际。</p>
<p>再读《三体》，书中深层的对人性的剖析则更加令我深思。特别是人性的反复无常在希望与绝望的交织中显露无疑。</p>
<p>如果要选出《三体》三部曲中的三个核心人物，那绝对是第一部的叶文洁，第二部黑暗森林的罗辑，第三部死神永生的程心。</p>
<p>三者都在不同程度上改变了人类文明的命运，前者是彻底打破了人类文明的安逸，将人类文明暴露在了狩猎者面前；中者则是彻底揭露了人类文明的幼稚，但同时又用自己强大的精神力震慑住了狩猎者，将人类文明稳定在了深渊边缘不至于堕入万劫不复的境地；后者则是人类文明中幼稚的代表体，也正是这份幼稚，让人类没能在黑暗森林中幸存下来。</p>
<p>罗辑这个人是三部曲中最重要的角色，也同时是最能反映人性的角色。他出生于黄金时代，在危机纪元被委以重任，成为担任拯救全人类任务的“面壁者”。而此时的他只是一个浑浑噩噩过日子的普通人，面对面壁者这种沉重而又孤独却同时权力巨大的身份时他选择了任何普通人都会去选择的逃避。</p>
<p>但他可是救世主啊，他可是担负着拯救全人类的愿景呀，于是那些要被他拯救的人类中断了他的幸福生活并将他逼上了绝境。但可笑的是，当他抛却一切得到解答，同时进入冬眠等待实验结果之时，等待他的却是被全人类当做笑话。</p>
<p>多亏了他玩世不恭的性格，他并没有因此而被巨大的反差带来的失落所击垮。事实上也正是因为他的性格，他才能挺过作为面壁者初期那巨大的压力，换做是另外一个普通人可能已经崩溃或者迷失自我了。除了罗辑自身的性格，大史的存在也为稳定罗辑的精神起了重要的作用，在性格上这两人比较类似，都是那种活在当下不为外界所影响的类型，而这种性格在任何情况下都能舒适地活下去。（多么希望我也是这样的性格啊。</p>
<p>然而命运似乎要给那些过河拆桥的人类一个教训，在末日之战中，人类重新回想起来了几个世纪以前初次面对三体人的恐怖。于是理所当然的，人类紧紧抓住那根救命稻草，因而那个“笑话”又重新成为了救世主。不过跌宕起伏的地位并非是一无是处，它使得罗辑的精神力更加强大，强大到足以突破三体世界的封锁和整个三体世界相抗衡。这是多么强大的一股精神力量啊，用一己之力，将最糟糕的局势反转，将人类的生活拉回正轨，为人类营造了七十年的和平时间。</p>
<p>从来没有一个人是生而为救世主的，也同样没有一个人是生而为毁灭者的。这其中一定起源于某种品质——在罗辑身上是坦然面对生活，在灭霸身上是对死亡的爱；然后再在磨砺中加以强化，直到最后铸成坚不可摧的信念，或者是恶意；前者使罗辑维持住了人类的命运，后者使灭霸毁灭了无数文明。但磨砺的过程一定是极其痛苦的，甚至是压倒性的绝望，这些我们都无法想象，因为面对容易得多的困难，我们尚被压得喘不过气来。</p>
<p>对于罗辑，我只有无上的敬佩可以向他表达。</p>
<p>而程心则是把最后一根稻草放到骆驼身上的那个人。尽管人类的毁灭和她有着直接的关系，但这是全体人类的责任，而不是她的全责。人类总喜欢把命运寄托在少数人的手上，前有罗辑，后有程心。但这样做的坏处就是把鸡蛋放在一个篮子里面——只要这个篮子出现了问题那就是灾难性的后果。</p>
<p>程心并不是一个十恶不赦的恶人，相反她是一个极度善良的人，只是她生在了错误的年代。面对前所未见的凶恶敌人，人类依旧选择了用善良来面对，结果就只能是灭亡，而这样的选择几乎是无法改变的，在人类中没有足够大的力量可以左右整个人类的选择，连罗辑也不可以，因为人类的善良是基于他们的自信，或者更准确的来说是来源于自己的无知与自大。而这自大则是因为人类进步得太快而忘乎所以。</p>
<p>或许如果让章北海作为人类世界的最高领袖人类的被毁灭的命运才会改变吧。</p>
<p>而对于现在，三体对我来说最大的启发就是：做一个罗辑和大史那样的人，不以物喜，不以己悲，创造属于自己生活；做一个程心那样的人，奉献自己，兼济天下。前者出世，后者入世；但有趣的是，在小说中，出世者拯救世界，入世者将世界带往毁灭，不过这也与我们现在的生活无关了。</p>
<p>回到人性，那些或令人肃然起敬，或令人哭笑不得，或令人心生鄙夷的结果都是人性的表达，而无分好坏。但事实上对于人性，我们可以加以约束，让自己不像狂风中的小草，随风摇曳，而像扎根于土地的大树，岿然不动。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;初读《三体》，最吸引我的是其中的硬科幻，也就是它在科幻中融入的大量的科学知识，也因为如此小说新奇而同时贴合实际。&lt;/p&gt;
&lt;p&gt;再读《三体》，书中深层的对人性的剖析则更加令我深思。特别是人性的反复无常在希望与绝望的交织中显露无疑。&lt;/p&gt;
&lt;p&gt;如果要选出《三体》三部曲中的
    
    </summary>
    
      <category term="书籍" scheme="https://blog.patrickcty.cc/categories/%E4%B9%A6%E7%B1%8D/"/>
    
    
      <category term="人性" scheme="https://blog.patrickcty.cc/tags/%E4%BA%BA%E6%80%A7/"/>
    
      <category term="三体" scheme="https://blog.patrickcty.cc/tags/%E4%B8%89%E4%BD%93/"/>
    
  </entry>
  
  <entry>
    <title>《声之形》——将也的自我救赎之路</title>
    <link href="https://blog.patrickcty.cc/2018/03/16/%E3%80%8A%E5%A3%B0%E4%B9%8B%E5%BD%A2%E3%80%8B%E2%80%94%E2%80%94%E5%B0%86%E4%B9%9F%E7%9A%84%E8%87%AA%E6%88%91%E6%95%91%E8%B5%8E%E4%B9%8B%E8%B7%AF/"/>
    <id>https://blog.patrickcty.cc/2018/03/16/《声之形》——将也的自我救赎之路/</id>
    <published>2018-03-16T08:29:02.000Z</published>
    <updated>2018-12-26T03:30:11.131Z</updated>
    
    <content type="html"><![CDATA[<p>做了那么过分事情的他，能被原谅么，这是将也一直以来的心结，也是在自我了结之前最想知道的问题。那最后他为什么没有自我了结呢？可能正是因为他知道了这个心结有解开的可能性。而在这之后，男主的自我救赎之路就开始了。</p>
<p>校园霸凌是一个世界性的问题，而男主的心结也是由此而生，因为做得太过分，他自己也变成了被霸凌的对象，甚至之后还因此封闭了自我。</p>
<p>而男主去解开心结的方法是去赎罪，尽管他不愿承认。幸好硝子天性善良选择接纳了他，并在他的努力下重新维系起了之前断掉的关系。但这些人中只有佐原依旧善待硝子，其他人对待硝子的态度并没有发生什么改变。</p>
<p>在看的时候，我以为电影是两条线进行：将也找回自我的线以及硝子改变对自我看法的线。但我为硝子感到可悲，她的那些朋友到最后也没有深入她的内心，也没有人告诉她她有那么一颗温柔而强大的内心，值得活在这个世界上，被这个世界善待。不是因为她而让这个世界变得黑暗，而是因为这个世界的恶意一直让她陷入黑暗。令人遗憾的是到最后男主也只是真心说出了抱歉而没有解开女主的心结。</p>
<p>虽然最后女主已经不再想着轻生，也好像变得开朗，但我为什么却还是为女主感觉那么悲伤呢。愿所有硝子都能被温柔以待。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;做了那么过分事情的他，能被原谅么，这是将也一直以来的心结，也是在自我了结之前最想知道的问题。那最后他为什么没有自我了结呢？可能正是因为他知道了这个心结有解开的可能性。而在这之后，男主的自我救赎之路就开始了。&lt;/p&gt;
&lt;p&gt;校园霸凌是一个世界性的问题，而男主的心结也是由此而生
    
    </summary>
    
      <category term="电影" scheme="https://blog.patrickcty.cc/categories/%E7%94%B5%E5%BD%B1/"/>
    
    
      <category term="日漫" scheme="https://blog.patrickcty.cc/tags/%E6%97%A5%E6%BC%AB/"/>
    
      <category term="校园霸凌" scheme="https://blog.patrickcty.cc/tags/%E6%A0%A1%E5%9B%AD%E9%9C%B8%E5%87%8C/"/>
    
      <category term="自我救赎" scheme="https://blog.patrickcty.cc/tags/%E8%87%AA%E6%88%91%E6%95%91%E8%B5%8E/"/>
    
  </entry>
  
  <entry>
    <title>春节档电影</title>
    <link href="https://blog.patrickcty.cc/2018/03/14/%E6%98%A5%E8%8A%82%E6%A1%A3%E7%94%B5%E5%BD%B1/"/>
    <id>https://blog.patrickcty.cc/2018/03/14/春节档电影/</id>
    <published>2018-03-14T01:21:02.000Z</published>
    <updated>2018-03-14T01:21:59.783Z</updated>
    
    <content type="html"><![CDATA[<p>春节档电影总是有限，这次一共有四部，其中西游记题材的真的是看烂了，于我而言完全没有观看的欲望。另外的三部中我看了两部，这两部都给了我相应的惊喜。</p>
<p>首先看的是《唐2》，整部电影的节奏把握得很好，观众看起来比较畅快，里面的喜剧元素也让人比较轻松，刘昊然推理时候的场景简直科技感炸裂，看得也非常过瘾。剧情方面在看的时候也没发现明显的槽点，不过事后看大家的评论才知道原来推理有这么多漏洞 233，不过作为一个非推理迷，剧情还是比较让人满意的。评分的话我个人觉得可以有 8/10。</p>
<p>接下来看的是《红海》，这一部是春节档中口碑最好的一部，看完之后觉得真的很良心，战斗场面逼真度极高且恢弘，人物表现丰满，就是整体一直维持在高强度的节奏看完之后个人感觉很累……还有给血腥场面的特写真的有点尺度太大了啊……整体评分的话 8.5/10，不适合带着孩子老人去看，一部不作的主旋律好片。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;春节档电影总是有限，这次一共有四部，其中西游记题材的真的是看烂了，于我而言完全没有观看的欲望。另外的三部中我看了两部，这两部都给了我相应的惊喜。&lt;/p&gt;
&lt;p&gt;首先看的是《唐2》，整部电影的节奏把握得很好，观众看起来比较畅快，里面的喜剧元素也让人比较轻松，刘昊然推理时候的场
    
    </summary>
    
      <category term="电影" scheme="https://blog.patrickcty.cc/categories/%E7%94%B5%E5%BD%B1/"/>
    
    
      <category term="喜剧" scheme="https://blog.patrickcty.cc/tags/%E5%96%9C%E5%89%A7/"/>
    
      <category term="战争片" scheme="https://blog.patrickcty.cc/tags/%E6%88%98%E4%BA%89%E7%89%87/"/>
    
  </entry>
  
  <entry>
    <title>《黑豹》</title>
    <link href="https://blog.patrickcty.cc/2018/03/14/%E3%80%8A%E9%BB%91%E8%B1%B9%E3%80%8B/"/>
    <id>https://blog.patrickcty.cc/2018/03/14/《黑豹》/</id>
    <published>2018-03-14T01:14:26.000Z</published>
    <updated>2018-12-26T03:30:11.197Z</updated>
    
    <content type="html"><![CDATA[<p>对我来说，看电影的话，要看就要看好电影，但这好电影的标准不知何时已经变成了让我觉得有意思的电影，而相对的，电影的逻辑严密性，主题反而没那么重要了。</p>
<p>而这部《黑豹》，对我来说则无疑是一部好电影。整部电影最精彩的部分就是瓦坎达的科技了，因为有了万能的振金，被外界视作贫困潦倒的第三世界国家实际上是一个科技高度发达的不为外界所知的文明国度。</p>
<p>不得不说振金的设定真的非常巧妙，影片中出现的能远程驾驶的控制器，能防止子弹和碰撞的汽车，自由伸缩的长矛，可以掀翻无敌汽车的手部“空气炮”，看似毛毯却可以当做盾牌的奇妙物件以及强度甚至比钢铁侠战甲还要高的黑豹战斗服（最重要的是不用躲在角落换衣服了 233），这些科技产物绝对是一场视觉盛宴，极具观赏性。</p>
<p>而剧情方面就没有科技来得那么精彩了，因为电影的核心所在应该是想要表达的主题：能力越大，责任越大，与其独善其身，更应兼济天下。而大反派就是因为前代想“独善其身”而造成的畸形产物，主角的任务就是弥补父亲以前的错误。也正是因为主题，影片中花大量的篇幅引导我们思考是应该独善其身还是应该站出来兼济天下，而大反派的戏份也因此比较有限，与主角的碰撞也比较草率地结束了，尽管反派塑造的很好很有魅力，但却有虎头蛇尾的嫌疑。</p>
<p>有一个问题是主角团这边形象没有其他的漫威电影来得高大，主角的魅力也没怎么凸显出来，至少远远没有《美国队长 1》那么好，不过后面的《复仇者联盟 3》黑豹还有不少戏份，希望到时候黑豹的形象能更加丰满高大。</p>
<p>评分 8/10，影片中的高科技元素是家分店，主题的表达也是可圈可点，但是因此而削弱了人物形象的塑造有点得不偿失。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对我来说，看电影的话，要看就要看好电影，但这好电影的标准不知何时已经变成了让我觉得有意思的电影，而相对的，电影的逻辑严密性，主题反而没那么重要了。&lt;/p&gt;
&lt;p&gt;而这部《黑豹》，对我来说则无疑是一部好电影。整部电影最精彩的部分就是瓦坎达的科技了，因为有了万能的振金，被外界视
    
    </summary>
    
      <category term="电影" scheme="https://blog.patrickcty.cc/categories/%E7%94%B5%E5%BD%B1/"/>
    
    
      <category term="漫威" scheme="https://blog.patrickcty.cc/tags/%E6%BC%AB%E5%A8%81/"/>
    
      <category term="超级英雄" scheme="https://blog.patrickcty.cc/tags/%E8%B6%85%E7%BA%A7%E8%8B%B1%E9%9B%84/"/>
    
  </entry>
  
  <entry>
    <title>《奇迹男孩》</title>
    <link href="https://blog.patrickcty.cc/2018/01/31/%E3%80%8A%E5%A5%87%E8%BF%B9%E7%94%B7%E5%AD%A9%E3%80%8B/"/>
    <id>https://blog.patrickcty.cc/2018/01/31/《奇迹男孩》/</id>
    <published>2018-01-31T15:56:44.000Z</published>
    <updated>2018-12-26T03:30:11.005Z</updated>
    
    <content type="html"><![CDATA[<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>当你因为先天缺陷而导致面容与常人不同时，你是选择封闭自己还是敞开怀抱？当你的孩子你因为先天缺陷而导致面容与常人不同时，你会怎样对待他？当你拥有一个因为先天缺陷而导致面容与常人不同的弟弟，而且这个弟弟从父母那里剥夺走了原本属于你的爱与关心，你会怎么做？如果你遇到了这样的同学，他因为先天缺陷而导致面容与常人不同，你会怎么对待他？</p>
<p>影片对这些问题进行了探讨，交出来的答卷确实也相当有水平。</p>
<p>首先我们从父母的角度来看。对于这样与众不同的孩子，他们并没有一到年龄就将他交给学校，我想他们也明白，童年产生的阴影可能会影响一辈子，因而他们选择在家里对孩子进行早教，同时在这个过程中也仍保留着对孩子性格的引导——让他知道他仍是一个正常孩子。这些举措确实有效，不仅给了他一个相对快乐的童年，还进行了充分的积累来让他能相对安稳地踏进真正的社会。</p>
<p>而这一天也终于到来，影片中说得很有道理的一点是：在某些方面，成年人社会比小孩社会要好过，因为小孩不懂得隐藏自己的情绪，而小孩子面对与自己不同的事物，通常采取的措施是排斥、孤立与嘲笑。因而校园霸凌与孤立成为了奥吉面临的最大的问题，而这些问题是普遍存在于所有的中小学学校中的。</p>
<p>我记得在小学的时候，我们班有一个吴同学，可能因为他是务工子弟的儿子，他身上的衣服和鞋子总是感觉破破烂烂的，并有些脏，也有一些同学说他“臭”，但这臭是否是真实存在的我其实也不清楚。就是因为他的这些不同之处，他受到了我们班的一些不良同学的排挤，就像是电影里的朱利安所做的类似的事情。我们都知道，为了合群或是出于其他的一些原因，学校中跟风的行为非常普遍，我也因此对吴同学采取疏远的态度，甚至有一次还将他推下了升旗台……但尽管如此，在之后我还去他家玩过，也曾有一段时间和他在一起玩，虽然关系并没有密切到和电影中杰克与奥吉的关系那样。因为不想成为被孤立的人，我也加入了孤立他的人群中，而我们班其他同学的想法似乎和我也相同，因此吴同学自始至终都受到了排挤与霸凌。</p>
<p>我们的奥吉在进学校之际就因为外貌而遭受了类似的对待，但和吴同学不同的是，在受到排挤之际，有同学不害怕也被孤立，站了出来和奥吉交朋友，也正是在这个过程中，奥吉自身的优点也为人所知，其他人也不再因为他的与众不同外貌而排斥他了。</p>
<p>首先站出来的是杰克威尔，但是他依然害怕被孤立，因而在他和朱利安他们一起的时候说出了迎合他们的话语，而正是这句话是深深刺痛了奥吉的内心；真正让奥吉敞开心扉的是莎莫，比起杰克是因为奥吉的帮助而开始与他相处，莎莫是在奥吉最为脆弱的时候出现在了奥吉的身边，并让奥吉知道了友谊的真正感觉，同时也将他从背叛的阴影之中解救出来。</p>
<p>如果当时我们班里面有人更勇敢一点，如果那个勇敢的人就是我，那么就可以让吴同学的小学生活更加好一点，只是合群的魔爪钳住了我们，将我们和吴同学放在了对立的位置……</p>
<p>接着我们来到姐姐的角度。一般在拥有多个孩子的家庭里面，最受宠的都是最小的那个。在本部影片中，更小的孩子还拥有先天缺陷而需要父母亲更多的关爱，因而姐姐得到的爱就更少了。尽管我是独生子女不存在这样的问题，但是如果让我面临这样的情况那我的内心一定相当郁闷甚至导致我不给弟弟好脸色看。然而影片中的姐姐隐藏了自己的情绪，一方面不给爸爸妈妈添麻烦，另一方面又尽自己所能来照顾与众不同的弟弟。</p>
<p>姐姐这部分最让我印象深刻的是在万圣节的这天，本来是她和妈妈的独处被弟弟所破坏，尽管姐姐很生气，但是面对更加伤心的弟弟，她压下了自己的情绪，而去想方设法安慰弟弟，让他走出家门，走出了郁闷。由此看来弟弟的健康成长中姐姐也是功不可没的呢。</p>
<p>虽然姐姐足够好，但是这部分父母亲还是有点失职，即使有个特殊的孩子要照顾，但也不能忽视了那个乖巧懂事的另一个孩子的存在，尽管那个孩子看起来足够坚强，似乎并不需要心疼。姐姐的那场演出让父母知道了他们一直忽视的姐姐的优秀，也让他们察觉到了他们所存在的对姐姐的关心太少的问题。</p>
<p>接下来则是米兰达的角度。米兰达突然的冷漠态度原来是为了圆上自己身世的幌子，而正是这个身世，让米兰达在夏令营中成为最受欢迎的人。这无疑也是群体中经常出现的另一个问题，每个人都想受到其他人的关注，而这份关注需要相应的基础来支撑，如果没有相应的基础则需要一定的代价来进行交换，米兰达交换的筹码则是自己最真挚的友谊。但在经历了那么多之后，米兰达终于明白了，最珍贵的应该是友谊，而不是那泡沫般的受欢迎，也正是米兰达的醒悟，让姐姐得以在家人面前展示自己从而让父母认识到了自己一直以来对姐姐的忽视。</p>
<p>影片是从多个人物的角度来讲述故事，不过主要的故事都围绕在奥吉的身上。这样的讲述手法给故事设置了很多矛盾冲突，又在之后一一进行解决，让故事充满波折又引人思考，除此之外，影片对我一开始提的问题的思考也非常深刻，是一部非常用心的影片。</p>
<p>插点题外话，这部电影是我和我表弟一起看的，看的时候电影院中基本上都是家长带着孩子看。一开始我还以为这会是一部非常扯的亲子向电影，但最终看下来我实在是收获良多。</p>
<h2 id="评分"><a href="#评分" class="headerlink" title="评分"></a>评分</h2><p>9/10.</p>
<p>内容有趣而令人感动，主题也比较深刻，感情也非常充沛，非常值得一看！</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;正文&quot;&gt;&lt;a href=&quot;#正文&quot; class=&quot;headerlink&quot; title=&quot;正文&quot;&gt;&lt;/a&gt;正文&lt;/h2&gt;&lt;p&gt;当你因为先天缺陷而导致面容与常人不同时，你是选择封闭自己还是敞开怀抱？当你的孩子你因为先天缺陷而导致面容与常人不同时，你会怎样对待他？当你拥
    
    </summary>
    
      <category term="电影" scheme="https://blog.patrickcty.cc/categories/%E7%94%B5%E5%BD%B1/"/>
    
    
      <category term="爱" scheme="https://blog.patrickcty.cc/tags/%E7%88%B1/"/>
    
      <category term="友情" scheme="https://blog.patrickcty.cc/tags/%E5%8F%8B%E6%83%85/"/>
    
      <category term="励志" scheme="https://blog.patrickcty.cc/tags/%E5%8A%B1%E5%BF%97/"/>
    
  </entry>
  
  <entry>
    <title>《神秘巨星》</title>
    <link href="https://blog.patrickcty.cc/2018/01/31/%E3%80%8A%E7%A5%9E%E7%A7%98%E5%B7%A8%E6%98%9F%E3%80%8B/"/>
    <id>https://blog.patrickcty.cc/2018/01/31/《神秘巨星》/</id>
    <published>2018-01-31T02:38:44.000Z</published>
    <updated>2018-12-26T03:30:11.132Z</updated>
    
    <content type="html"><![CDATA[<h2 id="开始之前"><a href="#开始之前" class="headerlink" title="开始之前"></a>开始之前</h2><p>这是阿米尔汗的另一部新作，也正是冲着阿米尔汗这个名字，我果断地贡献了一份电影票。而看完这部电影之后我感觉它确实没有让我失望。</p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>阿米尔汗的每部电影都反映着一个或多个印度中存在的不好的社会现象，而这次他对准的是印度的重女轻男的思想以及婚姻不平等，而这样的主题是通过小女孩对梦想的追求来表现的。</p>
<p>影片中最大的冲突就是小女孩对梦的追求与父亲不允许的冲突，影片中的父亲是一个大男子主义严重到不允许其他女人有违逆他的想法，如果有就施以暴力。而最可怕的是，这个父亲还是家庭里面的经济支柱，而毫无经济实力的母子只能逆来顺受。</p>
<p>影片中对家庭暴力的刻画还是非常到位的，甚至都让我感觉不寒而栗。也正是在家庭暴力与对梦想的阻挠两方面的共同作用下，促使了小女孩的觉醒，而另一个关键则是母亲的觉醒，但母亲则需要考虑更多实际的问题，因而对小女孩提出的离婚的要求她并没有一开始就答应，而是在将要离开印度之时才做出选择。</p>
<p>影片中最剧烈的两个冲突也即为母子觉醒的导火线，第一个是在父亲发现母亲项链消失的真相之后砸掉电脑以及最后在机场想要丢掉吉他，其中后者也是全剧中的最高潮，母亲也终于甩掉来了一直以来的懦弱以及物质的包袱而去拥抱一个未知但是有着无穷潜力的未来。</p>
<p>片中让我比较印象深刻的另一个角色就是钦腾了，这个小男孩实力告诉了我们撩妹的精髓所在，即使被嫌弃他也不放弃而是依然如故，最终他们终于修成正果（虽然我觉得有些勉强）。无论如何钦腾的性格真的是非常适合追妹子，比我好多了 233，要是我有他的一半那我一定能追到妹子 233。</p>
<p>影片中刻画得最好的是母亲这一形象，她全心全意地爱着自己的两个孩子，对女儿的爱表现得尤为明显。她非常爱女儿，对女儿的要求是有求必应，但这些仍被限制在了父亲允许的前提下，而也正是在这样的条件下，面对女儿让她离婚的请求，她才不去答应，因为这样的未来是没有物质的保障的，这样可能使女儿过得更差，因而她宁可忍受家暴也要让女儿有一个有保障的生活，因而当女儿的吉他弦被剪断她也忍了，因而当女儿的电脑被砸她也没有选择离婚。而当将离开印度之时，当她从电视和路人口中真正感受到女儿的音乐天赋时，这时候当父亲要扔掉那个被称作是“垃圾”的吉他，要彻底断绝女儿的音乐梦想，母亲终于抛弃了之前的想法与顾虑，在大众的“保护”下勇敢站了出来，选择了离开，她完成了觉醒，也选择了一条可能会艰难但是却有可能无比辉煌的道路。</p>
<p>而我们的阿米尔汗在这部电影中只是一个配角，影片中对他的描写是先抑后扬，就是这样的一个刻薄、自大、花心、惹人讨厌的人，却帮助小女孩一步一步完成了救赎，也找到了自己的初心。这个角色整体刻画得还不错，只是有些地方让人感觉用力过猛。</p>
<p>整部电影的硬伤还是不少的，但这位并不妨碍它想要表达的追求梦想、鼓励家庭暴力的受害者拿起法律的武器来反抗、追求男女平等的思想。</p>
<h2 id="评分"><a href="#评分" class="headerlink" title="评分"></a>评分</h2><p>8/10.</p>
<p>整体观影体验还不错，就是一些硬伤使得这部电影的剧本方面还有进步的空间。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;开始之前&quot;&gt;&lt;a href=&quot;#开始之前&quot; class=&quot;headerlink&quot; title=&quot;开始之前&quot;&gt;&lt;/a&gt;开始之前&lt;/h2&gt;&lt;p&gt;这是阿米尔汗的另一部新作，也正是冲着阿米尔汗这个名字，我果断地贡献了一份电影票。而看完这部电影之后我感觉它确实没有让我失望。
    
    </summary>
    
      <category term="电影" scheme="https://blog.patrickcty.cc/categories/%E7%94%B5%E5%BD%B1/"/>
    
    
      <category term="梦想" scheme="https://blog.patrickcty.cc/tags/%E6%A2%A6%E6%83%B3/"/>
    
      <category term="反对家庭暴力" scheme="https://blog.patrickcty.cc/tags/%E5%8F%8D%E5%AF%B9%E5%AE%B6%E5%BA%AD%E6%9A%B4%E5%8A%9B/"/>
    
      <category term="男女平等" scheme="https://blog.patrickcty.cc/tags/%E7%94%B7%E5%A5%B3%E5%B9%B3%E7%AD%89/"/>
    
  </entry>
  
  <entry>
    <title>《寻梦环游记》</title>
    <link href="https://blog.patrickcty.cc/2018/01/18/%E3%80%8A%E5%AF%BB%E6%A2%A6%E7%8E%AF%E6%B8%B8%E8%AE%B0%E3%80%8B/"/>
    <id>https://blog.patrickcty.cc/2018/01/18/《寻梦环游记》/</id>
    <published>2018-01-18T11:32:51.000Z</published>
    <updated>2018-12-26T03:30:11.132Z</updated>
    
    <content type="html"><![CDATA[<h2 id="开始之前"><a href="#开始之前" class="headerlink" title="开始之前"></a>开始之前</h2><p>这部电影上映的时候还是在 2017.11.24，那时候因为种种原因我想看但是一直没有去看。现在我终于考完了，于是赶紧趁还没下线去电影院观看了~</p>
<p>看这部电影的时候中途放映机还坏了一会 233，不过即使没有画面，听着英文还是听得懂的 233。</p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>为什么想看这部电影呢？很大程度上在于我之前看的影评，那么这部电影究竟有没有影评中所说的那么好呢？下面会给出答案。</p>
<p>迪士尼和皮克斯的动画电影从来没有让人失望过，这次也是一样，无论是从主题上，画面上还是剧情上都依旧让人赞叹不已。</p>
<p>剧情中最大的冲突在于我们的主人公米格的音乐梦。米格的曾曾祖父因为去搞音乐了而离家而去再也没有回来，而这个家被曾曾祖母依靠做鞋子而一手支撑起来了，但同时曾曾祖母也认为音乐是一个诅咒，不允许家族中再出现音乐相关的内容。正因为此，家族的约束和小男孩的音乐梦发生了激烈的冲突。</p>
<p>让人眼前一亮的是，上面的这些剧情介绍是用一种特别的方式表达出来的——剪纸风格，这样的风格完美地符合了亡灵节的主题，同时又不落俗套。</p>
<p>故事的第一阶段是少年的觉醒阶段，从完全被家里人所控制无从实现自己的音乐，到萌生反抗的想法再到受到鼓舞决定不顾家人的反对勇敢去实现梦想。也正是因为有了这样的转变，少年才能无意中接触到亡灵世界。</p>
<p>而亡灵世界无疑是“炫技”的极限了，恢弘的亡灵国度通过高超的动画技术被表现得淋漓尽致。</p>
<p>第二个阶段则是米格寻找歌神。米格之所以进入亡灵世界是因为受到了诅咒，必须要得到亲人的祝福才能回到原本世界，而亲人们却同样反对他的音乐梦想，因而米格要想坚持音乐梦想则需要得到歌神，也就是他认为的曾曾祖父的帮助。</p>
<p>在剧情方面，电影故意让观众以为歌神才是米格真正的曾曾祖父，但之后却来了个大反转——原来米格真正的曾祖父并不是歌神，而是那个过不了关无法看望亲人的埃克托，歌神也没有他向外界表现得那么美好，他的成功原来建立在谋杀并且占有埃克托的成果的基础上。</p>
<p>在寻找歌神的这个过程中，米格终于展现出了自己的音乐才华，也完成了蜕变——变得自信而坚定，也从埃克托那里找到了亲情的真谛。其实关于歌神真正的面目影片中已经有铺垫：歌神的演唱会他自己却不去参加排练，而是交给其他的人员来进行，而一个稍微敬业一点的明星都不会做出这么不负责的举动。</p>
<p>第三个阶段则是回到家人的身边。埃克托的真实身份米格已经了解，但是他却一直没有被她老婆所原谅，而在这个阶段中那股仇恨终于被爱所消解，歌神的真实面目也展现在了大众面前，但这时埃克托却因为快被遗忘而即将消失，米格也在日出之前勉强回到了原本世界。</p>
<p>这部分的“战斗”部分让人印象深刻，影片充分利用了骨头的特点，将手臂拆下来当做双节棍等来使用这些非常“骨头”的场景真的非常符合世界的设定，也让人会心一笑。</p>
<p>最后一个阶段是音乐唤醒亲情。在埃克托即将被遗忘之际，米格使用埃克托的吉他，用那首写给 Coco 的《Remember Me》，成功将 Coco 的记忆唤醒，同时也消解了家庭中对音乐的误解。</p>
<p>最后的结局还是非常圆满的，歌神的真实身份，埃克托的故事也为大家所知晓，米格的音乐梦想也得以继续，Coco 也终于和埃克托团聚。</p>
<p>何为亲情？亲情应该是相互扶持的同时又相互谅解，尊重梦想，尊重家庭成员的感受这才是真正的亲情所拥有的样子。尽管伊梅尔达一开始对埃克托非常恨，恨他理开这个家不再回来，但是尽管如此，深埋着的爱并没有随之消散，而是等待着爆发的那一刻，影片想表达的亲情从这里也表现得淋漓尽致。</p>
<p>现在回到开始的那个问题：这部电影究竟有没有影评中所说的那么好呢？其实比起来还差了一点点，因为亲情这个主题实在是有些老套，但是它仍然是一部质量极佳的作品，绝对值回票价。</p>
<h2 id="评分"><a href="#评分" class="headerlink" title="评分"></a>评分</h2><p>9/10.</p>
<p>影片整体质量很高，不过比起之前的《头脑总动员》的精妙的设定还稍微差了一点，但无论如何仍然是一部无可挑剔的高质量影片。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;开始之前&quot;&gt;&lt;a href=&quot;#开始之前&quot; class=&quot;headerlink&quot; title=&quot;开始之前&quot;&gt;&lt;/a&gt;开始之前&lt;/h2&gt;&lt;p&gt;这部电影上映的时候还是在 2017.11.24，那时候因为种种原因我想看但是一直没有去看。现在我终于考完了，于是赶紧趁还没下
    
    </summary>
    
      <category term="电影" scheme="https://blog.patrickcty.cc/categories/%E7%94%B5%E5%BD%B1/"/>
    
    
      <category term="亲情" scheme="https://blog.patrickcty.cc/tags/%E4%BA%B2%E6%83%85/"/>
    
      <category term="梦想" scheme="https://blog.patrickcty.cc/tags/%E6%A2%A6%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>《敦刻尔克》</title>
    <link href="https://blog.patrickcty.cc/2018/01/13/%E3%80%8A%E6%95%A6%E5%88%BB%E5%B0%94%E5%85%8B%E3%80%8B/"/>
    <id>https://blog.patrickcty.cc/2018/01/13/《敦刻尔克》/</id>
    <published>2018-01-13T02:41:36.000Z</published>
    <updated>2018-12-26T03:30:11.131Z</updated>
    
    <content type="html"><![CDATA[<h2 id="开始之前"><a href="#开始之前" class="headerlink" title="开始之前"></a>开始之前</h2><p>上次看完电影写感受还是 8.26 的《十万个冷笑话 2》了。不知不觉中，坚持了那么久的习惯就突然被终止了，就像我在另外方面的坚持，也是戛然而止。</p>
<p>现在又是考试周期间，但是如今我却不向大一的时候那么从容，曾经的“大靠大玩，小考小玩”对现在的我已然成为了过去完成时，以前的“考试电影周”亦是不复存在。</p>
<p>这学期的我的心态经历了过山车，从充满动力及幸福，到煎熬，到后来的一直的隐性自暴自弃，消极，以及现在都持续影响着我的浮躁……</p>
<p>无论如何，电影感想又开始了，闲话少叙，进入正题。</p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>这是诺兰继《星际穿越》之后的又一部执导作品。诺兰可以说是我最喜欢的导演了，他的作品独特的风格使得每篇作品都有一种和普通影片截然不同的观影感受，这也是我最欣赏的地方。</p>
<p>而这部《敦刻尔克》，描写的是战争，虽然不能发挥出之前的悬疑感，但是诺兰的风格还是让这部影片独具特色。</p>
<p>影片拥有三条主线，分别为空海陆，对应的是一小时，一天，十天。比较遗憾的是在看电影的地方我并没有注意到这个时间的关系，因而诺兰精密的安排我没有完全把握住。不过最后三条主线交汇到一条还是让我把握到了命运的气息。</p>
<p>我觉得这部电影想描述的最重要的不是战争，而是人。从电影刚开始的时候主角的丢枪逃跑，到之后为了生存的各种努力，都让我们感受到了战争的残酷，生存的艰难，以及战场上人的实际身理与心理状况。</p>
<p>而海上这条线则表示得更加淋漓尽致：为了向证明自己价值的乔治，因为炮弹而极度害怕的士兵，因为乔治受伤而从愤怒到最后转为体谅的彼得，从始至终都沉稳的道森先生。尽管失去了乔治，但他们所在的这艘小船将许许多多的被困在敦刻尔克的士兵带回了家，也让他们不再重蹈道森先生儿子的覆辙了。</p>
<p>而空中的这条线却更加含蓄，片尾法里亚选择不去跳伞而被俘虏这个表现得最为淋漓尽致。在击落这么多架敌机之后，法里亚面对油已经耗尽的飞机，没有选择跳伞而是随着飞机一起滑翔直到降落，是为了不让这架英国最新研制的喷火战机被德国人所得到而研究，也是为了给正在撤退的士兵带来希望，将他们从压抑中给解救出来。</p>
<p>除开人物之外，本片的配乐也是一大亮点，我是在寝室用头戴耳机来听的，配合着电影压抑的氛围，配乐更进一步渲染了这种气氛，因此整部影片看完我整个人是极度疲惫的，这种疲惫是精神上的，也间接让我感受了历史上真是存在的压抑的微小的一部分。</p>
<h2 id="评分"><a href="#评分" class="headerlink" title="评分"></a>评分</h2><p>8/10。</p>
<p>这依然是一部典型的诺兰式电影，虽然情节不及之前来得酣畅淋漓，但是看完之后还是让人感触良多，依然保持了一贯的高质量。</p>
<p>电影中生存是一件如此困难的事情，而我们呢，或许真的是只有当将要失去的时候才能感受到宝贵的地方吧。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;开始之前&quot;&gt;&lt;a href=&quot;#开始之前&quot; class=&quot;headerlink&quot; title=&quot;开始之前&quot;&gt;&lt;/a&gt;开始之前&lt;/h2&gt;&lt;p&gt;上次看完电影写感受还是 8.26 的《十万个冷笑话 2》了。不知不觉中，坚持了那么久的习惯就突然被终止了，就像我在另外方面的
    
    </summary>
    
      <category term="电影" scheme="https://blog.patrickcty.cc/categories/%E7%94%B5%E5%BD%B1/"/>
    
    
      <category term="战争" scheme="https://blog.patrickcty.cc/tags/%E6%88%98%E4%BA%89/"/>
    
      <category term="历史" scheme="https://blog.patrickcty.cc/tags/%E5%8E%86%E5%8F%B2/"/>
    
  </entry>
  
</feed>
