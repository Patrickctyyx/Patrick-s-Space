<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Patrick&#39;s Space</title>
  <subtitle>Stay hungry, stay foolish!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.patrickcty.cc/"/>
  <updated>2017-03-18T10:35:59.336Z</updated>
  <id>https://blog.patrickcty.cc/</id>
  
  <author>
    <name>Patrick</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>《月光男孩》</title>
    <link href="https://blog.patrickcty.cc/2017/03/18/%E3%80%8A%E6%9C%88%E5%85%89%E7%94%B7%E5%AD%A9%E3%80%8B/"/>
    <id>https://blog.patrickcty.cc/2017/03/18/《月光男孩》/</id>
    <published>2017-03-18T10:29:58.000Z</published>
    <updated>2017-03-18T10:35:59.336Z</updated>
    
    <content type="html"><![CDATA[<h1 id="《月光男孩》"><a href="#《月光男孩》" class="headerlink" title="《月光男孩》"></a>《月光男孩》</h1><h2 id="开始之前"><a href="#开始之前" class="headerlink" title="开始之前"></a>开始之前</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;知道这部电影还是在它获得奥斯卡奖之前，当时先是被海报吸引了，无论是颜色的搭配，还是三个不同时期人物的处理并拼接到一起，都让人感觉印象深刻，然后看了几篇文章对电影的高度评价，于是决定要找个机会看一看。直到前一段时间看到它力压《爱乐之城》，获得了奥斯卡奖，我才又决定抽个时间出来看看这部电影究竟是怎样的情况，是不是真正那么好，还是只是“政治正确”下的又一个结果，毕竟黑人，LGBT 在美国文化中都是敏感的内容。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在这个没课的堕落的周三下午，我终于接着之前看了一点开头的场景之后继续观看～</p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这部电影的拍摄技巧还是很棒的，整部电影分为三个部分，对应着主角的三个阶段：童年，这时候 Shiron 还在读小学；少年，这时候 Shiron 已经是一个高高瘦瘦的高中生了；成年，这时候 Shiron 已经成为一个壮硕的毒贩了。其中三个部分并不是完全连续的，中间有的时间直接被跳过了，但这样既保留了核心部分又不会显得内容太拖沓。另外中间的过渡还是很明显的，给我一种《黑镜》的感觉，不会有角色没转换过来的情况。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;少年 Shiron 就因为是 gay 而被大家所不待见以及欺负，有一次 Shiron 在被追打的时候躲进了毒贩 Juna 的小屋，而 Juna 和其他电影中的毒贩不同，他“带走”了 Shiron 并且带他吃饭，带他回家，试图打开他的心扉，然而可能是因为 Shiron 内心收到的伤害太多，他始终不愿意开口，最后在 Teresa 的温柔下，他终于稍微放下了一些警戒，说出了他的情况。从此时起，Shiron 与 Juna 和 Teresa 结下了缘分。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;而在学校里，Shiron 只有唯一一个朋友 Kevin，在其他同学都疏远，瞧不起他的时候，只有 Kevin 和他一起玩，并且告诉他只有自己表现得足够强硬才不会被别人认为软弱。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在第一个阶段 Shiron 经常去他们家，而 Juna 也把他当自己的孩子来看待，包括教他游泳，在月光下和他讲故事…但是 Shiron 有一个有毒瘾的母亲，在她的毒瘾没有发作的时候，她是爱 Shiron 的，但是当她毒瘾发作，就像变了一个人，甚至直接用狠话把他赶出了家。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;第一部分令我印象最深刻的片段是，当 Jnua 和 Shiron 的母亲在街上发生冲突之后，Shiron 回到家之后被毒瘾上来的母亲所叱骂，而当他来到 Juna 家的时候，他似乎已经知道了是 Juna，或者是 Juna 卖出去的毒品，让他母亲变成了这样，他离去，留下 Juna 无言而悔恨地颤抖。最后 Juna 颤抖的时候让人触动，这是深深的爱才会有的。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最爱他的妈妈在毒瘾发作的时候最恨他，而对他最好的 Juna 却是造成他母亲癫狂的罪魁祸首，Juna的内心收到了怎样的伤害我们无从知晓…接着就影片进入了青年时期。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;而青年时期他仍旧是被欺负的那个，在学校被同学欺负，在家母亲的癫狂也让他十分难受，而对他好的 Juna 也已经去世，唯一的港湾就只有慈母般的 Teresa，但是由于 Juna 已经去世，再去 Teresa 家里过夜被人说闲话，于是这最后的港湾也难以停靠。还好他还有唯一的朋友 Kevin，在那个无助的晚上，他去了 Kevin 所在的地方，在月夜下，他们的感情萌发。这是本片中唯一的“激情基情”的地方，但是表现得仍旧很克制。和其他人的评论一样，我也觉得这一段发展得有些太快了。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;但就在那的第二天，Kevin 就在被逼迫下，不得不背叛了 Shiron。遭受着 Kevin 的拳头，Shiron 不仅身体疼痛，他的心也在滴血，也正是因为 Kevin 参与了，Shiron 没有选择起诉他们。但是绝望造就力量，他的软弱似乎在一瞬间消失了，第二天他大步流星地走进了学校，抄起板凳就砸在了一直欺负他的人的身上。因为这个他被警察所带走，警车上的他和门口的 Kevin 四目对视，两个人的心情都很复杂…就这样，青年时期结束。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;而到了成年时期，Shiron 已经是一个精悍的毒贩，他头上戴着类似 Juna 的帽子，嘴上戴着金牙，脖子上挂着金项链，往日的懦弱一扫而光。在别人面前，他威风凛凛。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;即使是这么多年之后，他还是十分讨厌他的母亲，尽管他的母亲现在也已经没有毒瘾发作时那种暴躁的模样，但是他显然已经成熟，即使不愿意听母亲的话，他仍旧保持着耐心。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;之后他见到了多年未见的 Kevin，那个最后伤害了他的人，但同时也是他最爱的那个人。此时的 Kevin 也已经从良，成为了一名厨师，有了自己的孩子。而相反那个往日懦弱的 Shiron 却变成了强悍的毒贩。但他们的感情，在 Shiron 的感情爆发下，在两人长久凝视之下，再度复苏…</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;说实话，我不是很懂这部影片，一些情节比如童年时代 Shiron 回去洗澡的那一段我都不是很懂，不过整体的意境还是很不错的，虽然涉及到 LGBT 人群，黑人，毒品，但是整部影片却是十分克制，而且音乐也为整部影片增添了不少色彩。</p>
<h2 id="评分"><a href="#评分" class="headerlink" title="评分"></a>评分</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;7/10。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;虽然是奥斯卡影片，但这种不是我的菜…相比之下还是觉得《断背山》给我的感触更深，不过也许是因为我是中国人所以不是很了解他们的感受吧。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;整篇文章我又感觉各种不连贯，逻辑不通…因为实在没什么很深的感触…</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;《月光男孩》&quot;&gt;&lt;a href=&quot;#《月光男孩》&quot; class=&quot;headerlink&quot; title=&quot;《月光男孩》&quot;&gt;&lt;/a&gt;《月光男孩》&lt;/h1&gt;&lt;h2 id=&quot;开始之前&quot;&gt;&lt;a href=&quot;#开始之前&quot; class=&quot;headerlink&quot; title=&quot;开
    
    </summary>
    
      <category term="电影" scheme="https://blog.patrickcty.cc/categories/%E7%94%B5%E5%BD%B1/"/>
    
    
      <category term="LGBT" scheme="https://blog.patrickcty.cc/tags/LGBT/"/>
    
      <category term="克制的同性爱情" scheme="https://blog.patrickcty.cc/tags/%E5%85%8B%E5%88%B6%E7%9A%84%E5%90%8C%E6%80%A7%E7%88%B1%E6%83%85/"/>
    
  </entry>
  
  <entry>
    <title>重装系统之后必备的软件等</title>
    <link href="https://blog.patrickcty.cc/2017/03/06/%E9%87%8D%E8%A3%85%E7%B3%BB%E7%BB%9F%E4%B9%8B%E5%90%8E%E5%BF%85%E5%A4%87%E7%9A%84%E8%BD%AF%E4%BB%B6%E7%AD%89/"/>
    <id>https://blog.patrickcty.cc/2017/03/06/重装系统之后必备的软件等/</id>
    <published>2017-03-06T11:23:02.000Z</published>
    <updated>2017-03-06T11:29:15.375Z</updated>
    
    <content type="html"><![CDATA[<h1 id="重装系统之后必备的软件等"><a href="#重装系统之后必备的软件等" class="headerlink" title="重装系统之后必备的软件等"></a>重装系统之后必备的软件等</h1><ol>
<li><p>Chrome</p>
<p> 一开始必须是Chrome，如果能登陆上Google账号，那就更是爽歪歪，直接把所有内容同步过来了！不过如何一开始就翻墙还是个玄学的问题，这次就是莫名其妙就能登进去了，然后进度一下拉快了超多啊！</p>
</li>
<li><p>Shadowsocks-qt5</p>
<p> 这个大家都懂的，<a href="https://github.com/shadowsocks/shadowsocks-qt5/wiki/%E5%AE%89%E8%A3%85%E6%8C%87%E5%8D%97" target="_blank" rel="external">安装方法</a>，如果是第一次配置，那么看<a href="https://aitanlu.com/ubuntu-shadowsocks-ke-hu-duan-pei-zhi.html" target="_blank" rel="external">这个</a>教程。</p>
</li>
</ol>
<p>最重要的两个软件已经搞定了，接下来就是基本的软件了。</p>
<ul>
<li><p>Git类</p>
<p>  人在江湖飘，哪能不用Git。</p>
<ul>
<li><p>安装git</p>
<blockquote>
<p>sudo apt-get install git</p>
</blockquote>
</li>
<li><p>安装SmartGit，在Linux下还是算是比较好用的git GUI，主要是提交的时候很方便</p>
</li>
<li>配置好GitHub的ssh，教程在<a href="http://blog.csdn.net/hustpzb/article/details/8230454/" target="_blank" rel="external">这里</a><blockquote>
<p>先生成密钥：ssh-keygen -t rsa -C “yourmail@mail.com”<br>再把~/.ssh/id_rsa.pub里面的内容复制到gitHub里面</p>
</blockquote>
</li>
</ul>
</li>
<li><p>IDE编辑器类</p>
<ul>
<li>Vim，用Linux能不用Vim？</li>
<li>VSCode，处理一些小文档就用这个了</li>
<li>PyCharm，一定是最好用的Python IDE</li>
<li>Clion，写ACM方便到哭，除了建立项目的时候</li>
<li>IntellJ，似乎是公认的最好的Java IDE，不过我很少写Java<br>  在这里顺便把JDK也安装了，因为很多软件的安装需要jdk的环境<blockquote>
<p>sudo apt-get install openjdk-8-jdk<br>  然后再.bashrc里面把JAVA_HOME设置了：export JAVA_HOME=”/usr/lib/jvm/java-8-openjdk-amd64/jre/bin”</p>
</blockquote>
</li>
</ul>
</li>
<li><p>写作类</p>
<ul>
<li>CmdMarkDown，写md真的好用，谁用谁知道</li>
<li>有道云笔记网页版，这个东西，同步以前的还是很好的，就是网页版总是喜欢跳到最开始，于是就不用它来写md了</li>
<li>hexo，<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="external">官方教程</a><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// 安装 Node.js</div><div class="line">curl https://raw.github.com/creationix/nvm/master/install.sh | sh</div><div class="line">nvm install stable</div><div class="line">// 安装 Hexo</div><div class="line">npm install -g hexo-cli</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<ul>
<li><p>系统工具类</p>
<ul>
<li>安装状态栏监视器，<a href="http://blog.chinaunix.net/uid-20564848-id-3415723.html" target="_blank" rel="external">教程</a>，逼格高，还可以看看系统占用等</li>
<li><p>安装zsh，<a href="http://macshuo.com/?p=676" target="_blank" rel="external">教程</a>，最好用的shell似乎没有什么争议</p>
<ul>
<li><p>安装zsh</p>
<blockquote>
<p>sudo apt-get install zsh<br>chsh -s /bin/zsh  // 切换默认shell’</p>
</blockquote>
</li>
<li><p>安装oh my zsh</p>
<blockquote>
<p>wget <a href="https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh" target="_blank" rel="external">https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh</a> -O - | sh</p>
</blockquote>
</li>
<li><p>安装字体补丁，下载<a href="https://github.com/powerline/fonts" target="_blank" rel="external">这个</a>之后解压./install.sh就可以了</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>其他必备软件</p>
<ul>
<li>微信，这个<a href="https://github.com/geeeeeeeeek/electronic-wechat/blob/master/README_zh.md" target="_blank" rel="external">链接</a>，不得不用啊，传文件还是需要</li>
<li>qq，暂时<a href="http://www.longene.org/forum/viewtopic.php?f=6&amp;t=30516" target="_blank" rel="external">这个</a>吧，虽然有时我会装不上</li>
<li>WPS，感觉比自带的libre要好用多了，至少排版还比较正常</li>
<li>网易云音乐，无需多说</li>
<li>搜狗输入法，这个有时候装上去会加载不出来，注销再登录应该就可以了</li>
<li>FileZilla，可能是最好用的FTP客户端</li>
</ul>
</li>
<li><p>主题美化类</p>
<p>  Ubuntu自带的主题太丑了…必须美化一下才能看…</p>
<ul>
<li><p>Unity-tweak-tool，定制系统不可或缺</p>
<blockquote>
<p>sudo apt-get install unity-tweak-tool</p>
</blockquote>
</li>
<li><p>然后下载一些好看的主题，比如</p>
<ul>
<li><a href="http://www.jcodecraeer.com/a/chengxusheji/chengxuyuan/2015/0923/3502.html" target="_blank" rel="external">Flatabulous</a></li>
<li><a href="https://linux.cn/article-3120-1.html" target="_blank" rel="external">Numix</a></li>
<li><a href="http://blog.topspeedsnail.com/archives/4663" target="_blank" rel="external">MacBuntu</a></li>
</ul>
</li>
<li>还可以修改系统左上角的字，教程在<a href="http://www.ubuntukylin.com/ukylin/forum.php?mod=viewthread&amp;tid=19161" target="_blank" rel="external">这里</a>，注意即使显示的是[Ubuntu 桌面]，在.po文件中还是要用英文</li>
</ul>
</li>
</ul>
<p>到这里，Ubuntu就又好用又好看了～写给我自己，希望在下次我不得不装系统的时候我已经知道怎么能快速的迁移环境…</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;重装系统之后必备的软件等&quot;&gt;&lt;a href=&quot;#重装系统之后必备的软件等&quot; class=&quot;headerlink&quot; title=&quot;重装系统之后必备的软件等&quot;&gt;&lt;/a&gt;重装系统之后必备的软件等&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Chrome&lt;/p&gt;
&lt;p&gt; 一开始必须是
    
    </summary>
    
      <category term="其他" scheme="https://blog.patrickcty.cc/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="实用工具" scheme="https://blog.patrickcty.cc/tags/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7/"/>
    
      <category term="重装系统" scheme="https://blog.patrickcty.cc/tags/%E9%87%8D%E8%A3%85%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>那些严重拖慢做题进度的题以及遇到的坑5</title>
    <link href="https://blog.patrickcty.cc/2017/03/06/%E9%82%A3%E4%BA%9B%E4%B8%A5%E9%87%8D%E6%8B%96%E6%85%A2%E5%81%9A%E9%A2%98%E8%BF%9B%E5%BA%A6%E7%9A%84%E9%A2%98%E4%BB%A5%E5%8F%8A%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%915/"/>
    <id>https://blog.patrickcty.cc/2017/03/06/那些严重拖慢做题进度的题以及遇到的坑5/</id>
    <published>2017-03-06T11:21:58.000Z</published>
    <updated>2017-03-06T11:22:45.091Z</updated>
    
    <content type="html"><![CDATA[<h1 id="那些严重拖慢做题进度的题以及遇到的坑5"><a href="#那些严重拖慢做题进度的题以及遇到的坑5" class="headerlink" title="那些严重拖慢做题进度的题以及遇到的坑5"></a>那些严重拖慢做题进度的题以及遇到的坑5</h1><h2 id="1297-Children’s-Queue"><a href="#1297-Children’s-Queue" class="headerlink" title="1297 Children’s Queue"></a>1297 Children’s Queue</h2><blockquote>
<p>There are many students in PHT School. One day, the headmaster whose name is PigHeader wanted all students stand in a line. He prescribed that girl can not be in single. In other words, either no girl in the queue or more than one girl stands side by side. The case n=4 (n is the number of children) is like<br>FFFF, FFFM, MFFF, FFMM, MFFM, MMFF, MMMM<br>Here F stands for a girl and M stands for a boy. The total number of queue satisfied the headmaster’s needs is 7. Can you make a program to find the total number of queue with n children?</p>
</blockquote>
<p>分析：</p>
<p>这一题有两个坑，第一个是递推表达式特别难想，第二个就是结果特别大，就算用unsigned long long也是完全不行的…必须要自己构造大数模板…</p>
<p>题目的大意是女生不能落单，也就是说不能出现一个女生旁边都是男生。这是一个递推题于是就按照递推的思路来做：</p>
<ul>
<li>如果新加入一个男生，那没什么问题，a[n - 1]</li>
<li>如果新加入的是女生，那就麻烦了，必须前面最后是女生<ul>
<li>如果前面n-2合法，那么直接加入两个女生，当然是成立的，也就是a[n - 2]</li>
<li>如果前面n-2不合法，要加入两个女生才合法，那么结尾必定是MF，于是最后为MFFF，前面是什么都可以，就是a[n - 4]</li>
<li>至于为什么没出现a[n - 3]，那是因为当最后是FF的时候，如果合法的话倒数第二位是什么就无所谓了，但是如果不合法就要通过新加入的变得合法了</li>
</ul>
</li>
</ul>
<p>下面一个坑就是大数了，思想就是用多个数拼起来来代替一个数，就是用一个二维数组，第一维表示是第几个数，第二维中的每一个数据都代表数的一部分，不妨假设最大为9999，那么这个数就是由多个9999拼成的，再怎么大也不会再越界了。</p>
<p>先来一个非常完整的大数模板，实现了加减乘除输出等等，链接在<a href="http://blog.csdn.net/hackbuteer1/article/details/6595881" target="_blank" rel="external">这里</a></p>
<p>然后再看一下一个比较基础的具体的实现吧<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">int a[1005][105];</div><div class="line"></div><div class="line">void add(int n)</div><div class="line">&#123;</div><div class="line">    // k相当于进位数，同时在传递值的时候也暂时接受了加出来的数</div><div class="line">    int k = 0;</div><div class="line">    int i;</div><div class="line">    for (i = 1; i &lt;= 100; ++i)</div><div class="line">    &#123;</div><div class="line">        k += a[n - 1][i] + a[n - 2][i] + a[n - 4][i];</div><div class="line">        // 尾数留给a[n][j]</div><div class="line">        a[n][j] = k / 10000;</div><div class="line">        // 进位数传递下去</div><div class="line">        k /= 10000;</div><div class="line">    &#125;</div><div class="line">    // 如果数组的第二位足够大，那么到这里应该就不会有问题了</div><div class="line">&#125;</div><div class="line"></div><div class="line">void print(int n)</div><div class="line">&#123;</div><div class="line">    int i;</div><div class="line">    for (i = 100; i &gt;= 1; --i)</div><div class="line">    &#123;</div><div class="line">        if (a[n][i] != 0)</div><div class="line">            break;</div><div class="line">    &#125;</div><div class="line">    printf(&quot;%d&quot;, a[n][i]);  // 最开始的不用补0</div><div class="line">    for (i = i - 1; i &gt;= 1; --i)</div><div class="line">        printf(&quot;%04d&quot;, a[n][i]);  // 四位，不够的用0来补充</div><div class="line">    printf(&quot;\n&quot;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这种直接用一个变量来表示进位以及加起来结果的方法还是很巧妙的…当时我就感觉思路很乱于是就直接找模板了…</p>
<h2 id="1438-钥匙计数之一"><a href="#1438-钥匙计数之一" class="headerlink" title="1438 钥匙计数之一"></a>1438 钥匙计数之一</h2><blockquote>
<p>一把锁匙有N个槽，槽深为1，2，3，4。每锁匙至少有3个不同的深度且至少有1对相连的槽其深度之差为3。求这样的锁匙的总数。</p>
</blockquote>
<p>分析：</p>
<p>这是一道很让人蛋疼的题…因为情况太多太难想了…</p>
<p>先贴出来<a href="http://blog.csdn.net/travelalong/article/details/22321681" target="_blank" rel="external">参考出处</a></p>
<p>设one[i]为第一个槽为1总共有i个槽的情况，类似有two[i], three[i]…易得lock[i] = one[i] + … + four[i]</p>
<p>因为对称的原因，实际上one[i]和four[i]是相同的，同理two[i]和three[i]也是相同的。</p>
<p>先对one[i]进行讨论：</p>
<ul>
<li>如果第一个数对后面没有影响，那么就直接是lock[i - 1]</li>
<li>如果有影响<ul>
<li>那么第二个一定是4，这样才能让去掉第一个后就不合法，这时候一共有4^(i-2)种情况</li>
<li>但是又因为要合法，所以后面n-2不能全都是1，4，所以要减掉2^(i-2)</li>
<li>又因为去掉后不合法，所以要减去以4开头合法的情况，也就是four[i - 1]</li>
</ul>
</li>
</ul>
<p>总共为:</p>
<blockquote>
<p>one[i] = one[i-1] + two[i-1] + three[i-1] + four[i-1] + 4 ^ (i-2)  - one[i-1] -2^(i-2)</p>
</blockquote>
<p>再对two[i]讨论</p>
<ul>
<li>第一个数对后面没影响的话就和前面相同</li>
<li>有影响的话<ul>
<li>要想后面不合法那就只能是不满三个数了，而且因为加上去后合法，于是后面就全是1和4了，情况有2^(i-1)，但是不能全为1或4，于是要减去2</li>
</ul>
</li>
</ul>
<p>有：</p>
<blockquote>
<p>two[i] = 2 ^ (i - 1) - 2</p>
</blockquote>
<p>于是lock[i]有：</p>
<blockquote>
<p>lock[i] = 6 <em> one[i-1] + 8 </em> two[i-1] + 2 <em> 4^(i-2) + 2 </em> 2^(i-2) -4</p>
</blockquote>
<p>换成C语言就是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// 注意pow的类型要进行转换，不然可能因为精度报错</div><div class="line">one[i] = one[i - 1] + 2 * two[i - 1] + (long long)pow((double)4, i - 2) - (long long)pow((double)2, i - 2);</div><div class="line">        two[i] = 2 * one[i - 1] + 2 * two[i - 1] + (long long)pow((double)2, i - 1) - 2;</div><div class="line">        lock[i] = 2 * one[i] + 2 * two[i];</div></pre></td></tr></table></figure></p>
<h2 id="1480-钥匙计数之二"><a href="#1480-钥匙计数之二" class="headerlink" title="1480 钥匙计数之二"></a>1480 钥匙计数之二</h2><blockquote>
<p>一把钥匙有N个槽，2&lt;N&lt;26槽深为1，2，3，4,5,6。每钥匙至少有3个不同的深度且相连的槽其深度之差不得为5。求这样的钥匙的总数。 </p>
</blockquote>
<p>分析：</p>
<p>这个和前面那个只是改了一下，相当于逆向思维，所以加一点就可以了，然而还是有一点坑的。</p>
<p>还是和上面一样从one[i]到six[i]，因为是不得为5，正好和只要一个为5互补，所以只要按照前一题的做法再减一下就可以了。</p>
<p>one[i]和six[i]是对称的，其他的所有是对称的，lock[i]还是所有的和。</p>
<p>而我们要求的基数就是至少有三个不同深度的情况，一开始我是这样写的</p>
<blockquote>
<p>b[n] = 6 ^ n - 15 * 2 ^ n</p>
</blockquote>
<p>然而这里我把从头到尾都是一个数的情况多减了好多次，所以应该一个个的减掉</p>
<blockquote>
<p>b[n] = 6 ^ n - 15 * (2 ^ n - 2) - 6</p>
</blockquote>
<p>然后在和之前的结果一减就可以了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">// 因为最后的数很大，不得不祭出大杀器unsigned long long</div><div class="line">one[i] = one[i - 1] + 4 * two[i - 1] + (unsigned long long)pow((double)6, i - 2) - (unsigned long long)pow((double)2, i - 2);</div><div class="line">two[i] = 2 * one[i - 1] + 4 * two[i - 1] + (unsigned long long)pow((double)2, i - 1) - 2;</div><div class="line">lock[i] = 2 * one[i] + 4 * two[i];</div><div class="line">alllock[i] = (unsigned long long)pow((double)6, i) - 15 * (unsigned long long)pow((double)2, i) + 24;</div><div class="line">unsigned long long temp = alllock[i] - lock[i];</div></pre></td></tr></table></figure></p>
<p>然而即使使用了大杀器，最后一个还是越界了，但是既然他已经把最后的结果给你了，干脆直接输出（滑稽</p>
<h2 id="1466-计算直线的交点数"><a href="#1466-计算直线的交点数" class="headerlink" title="1466 计算直线的交点数"></a>1466 计算直线的交点数</h2><blockquote>
<p>平面上有n条直线，且无三线共点，问这些直线能有多少种不同交点数。<br>比如,如果n=2,则可能的交点数量为0(平行)或者1(不平行)。</p>
</blockquote>
<p>分析</p>
<p>一道dp题，然而要想出状态真的好难…我一开始完全无从下手…</p>
<p>设dp[i][j]为有i个锁孔的时候，j个交点数可不可能存在，为0的时候不可能，为1的时候可能</p>
<p>当d[m][n]为1的时候，如果有r条平行线，那么相对于d[m][n]有d[i][(i - r) <em> r + j]也为1，也就是多出了r条平行线就多出(i - r) </em> r个交点，每个平行线都与其他所有相交</p>
<p>我一开始是考虑有多组平行线，然而这样就要开N维数组，这种方法的话还是很巧妙的，忽视了平行线的组数，每次哦度是相对前一组再多加一组，可能和之前的一样，也可能不一样。</p>
<p>综上，一共有三层循环：</p>
<ul>
<li>i从0～n得到每个直线数对应的最终情况</li>
<li>r从0到i循环表示平行边的个数</li>
<li>k从0到可能最大的数，也就是n为20的时候n * (n - 1) / 2的值进行循环来得到所有交点数</li>
</ul>
<p>而输出的时候就之用循环到n * (n - 1) / 2，不用到20对应的最大值。.</p>
<p>贴一份代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">#include &lt;iostream&gt;</div><div class="line">#include &lt;cstdlib&gt;</div><div class="line">#include &lt;cstdio&gt;</div><div class="line">#include &lt;cmath&gt;</div><div class="line">#include &lt;cstring&gt;</div><div class="line">#include &lt;algorithm&gt;</div><div class="line">#include &lt;string&gt;</div><div class="line">#include &lt;sstream&gt;</div><div class="line">#include &lt;map&gt;</div><div class="line">#include &lt;vector&gt; </div><div class="line">#include &lt;set&gt;</div><div class="line">#include &lt;stack&gt;</div><div class="line">#include &lt;queue&gt;</div><div class="line"></div><div class="line">using namespace std;</div><div class="line">#define INF 0x3fffffff</div><div class="line">const int maxn = 10005;</div><div class="line"></div><div class="line">int main()</div><div class="line">&#123;</div><div class="line">	int dp[25][195];</div><div class="line">    memset(dp, 0, sizeof(dp));</div><div class="line">    for (int i = 0; i &lt;= 20; ++i)</div><div class="line">    &#123;</div><div class="line">        dp[i][0] = 1;</div><div class="line">        for (int j = 0; j &lt;= i; ++j)</div><div class="line">        &#123;</div><div class="line">            for (int k = 0; k &lt;= 190; ++k)</div><div class="line">                if (dp[j][k] == 1)</div><div class="line">                    dp[i][(i - j) * j + k] = 1;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    int n;</div><div class="line">    while (~scanf(&quot;%d&quot;, &amp;n))</div><div class="line">	&#123;</div><div class="line">		for (int i = 0; i &lt;= n * (n - 1) / 2; ++i)</div><div class="line">        &#123;</div><div class="line">            if (dp[n][i] == 1)</div><div class="line">            &#123;</div><div class="line">                if (i != 0)</div><div class="line">                    printf(&quot; &quot;);</div><div class="line">                printf(&quot;%d&quot;, i);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        printf(&quot;\n&quot;);</div><div class="line">	&#125;</div><div class="line">	return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>递推难起来真的是叫妈都没用了…动态规划则是一直都感觉不太通…好久没做手生了…</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;那些严重拖慢做题进度的题以及遇到的坑5&quot;&gt;&lt;a href=&quot;#那些严重拖慢做题进度的题以及遇到的坑5&quot; class=&quot;headerlink&quot; title=&quot;那些严重拖慢做题进度的题以及遇到的坑5&quot;&gt;&lt;/a&gt;那些严重拖慢做题进度的题以及遇到的坑5&lt;/h1&gt;&lt;h2 i
    
    </summary>
    
      <category term="ACM" scheme="https://blog.patrickcty.cc/categories/ACM/"/>
    
    
      <category term="坑爹" scheme="https://blog.patrickcty.cc/tags/%E5%9D%91%E7%88%B9/"/>
    
      <category term="我好菜呀" scheme="https://blog.patrickcty.cc/tags/%E6%88%91%E5%A5%BD%E8%8F%9C%E5%91%80/"/>
    
  </entry>
  
  <entry>
    <title>《Logan》</title>
    <link href="https://blog.patrickcty.cc/2017/03/06/%E3%80%8ALogan%E3%80%8B/"/>
    <id>https://blog.patrickcty.cc/2017/03/06/《Logan》/</id>
    <published>2017-03-06T11:08:02.000Z</published>
    <updated>2017-03-06T11:14:09.112Z</updated>
    
    <content type="html"><![CDATA[<h1 id="《Logan》"><a href="#《Logan》" class="headerlink" title="《Logan》"></a>《Logan》</h1><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这部电影，充斥着悲伤。和平常令人激动人心的超级英雄电影不一样，这部电影，充满着无力以及英雄老矣的悲壮。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2029年，变种人已经像小儿麻痹症一样，被从出生的时候开始就遏止了，而存活下来的变种人，也都是垂垂老矣，其中就只剩下金刚狼，X教授，追踪者卡利班。而这时候地金刚狼的恢复能力已经很弱了，身体也远远不如当日了，甚至走路都是一瘸一拐，靠着为别人开车而谋生，甚至连和几个偷车贼动手都很费力。而X教授也不好，他患上了老年痴呆症，时不时会发病，靠着吃药来遏制病情，被“关在”废弃的水库里，靠着罗根赚的钱活着。而《天启》中邪恶一方的卡利班，在这里也不再为金钱卖命了，但是他患上了白化病，照顾着X教授过着暗无天日的生活。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;而一个墨西哥女人和一个小女孩的出现，打破了了罗根“平静”的生活，原来小女孩是被改造出来的变种人，有着金刚狼的基因，是“女金刚狼”，当罗根知道并好不容易接受这些后，他决定保护她，送她去“伊甸园”。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;面对着追杀，罗根他们只能一路逃跑，而罗根和X教授也不是以前那么战无不胜了，面对追杀，他们不能把敌人打得落花流水而扬长而去了，连伊甸园也只是漫画书上的虚构的地点，除了绝望，还是绝望。在路途中，X教授在睡醒的时候被金刚狼的复制人X-24杀死，而这个晚上，是X教授长时间以来睡得最好的晚上，X教授离世。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;而卡利班在一开始就被抓到，被迫为敌人导路，但是他总是有意晚一步来保护金刚狼他们，最后在敌人疏忽的时候引爆了手榴弹，卡利班战死。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;而罗根则一直顽强地活了下来，和劳拉一起，到了”伊甸园“——集合地。最后在发现劳拉他们被围剿的时候注射了药水，用尽最后的力气，救下了他们，其中值得注意的是他最后是用枪杀死了博士和另一个人，这时候他已经不能像以前那样轻松地杀死敌人了…最后在与X-24的战斗中伤势过重而死去了，金刚狼，战死。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;随着金刚狼的死去，老一辈的变种人已经悉数死去，变种人的时代也正式落下帷幕，真的让人唏嘘不已，曾近变种人是那么的辉煌，他们一个个是那么的勇敢善战，看过前几部再看这一部，真的是浓浓的悲伤，既然最后还是得去世，那么战死这个结局也不算太差吧。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一个谜团就是为什么变种人会落到现在这个地步，电影中说的是X教授在6年前的维斯切斯特（也就是X教授的学校所在地）酿造事故，造成600人伤亡，变种人可能也是在这个时候遭受重创直到灭亡吧。在看电影的时候我一直想罗根插入这一段的回忆，可惜只是微微的带过…希望另外出一部电影或者其他的形式来进行说明吧…不然真的感觉很不好啊…</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;金刚狼的绝望，甚至让他有些自暴自弃了，寻求死亡，酗酒…而X教授则被困在破旧的水库里，过着艰难的生活…英雄不老，只是凋零！至少在生命的最后，他们重新感受到了生命的意义，这样或许也不算太糟糕吧。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这部电影真的是情怀满满，而且剧情也不耐，特别是对于X战警真爱粉…</p>
<h2 id="评分"><a href="#评分" class="headerlink" title="评分"></a>评分</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;9/10。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;悲壮…</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;《Logan》&quot;&gt;&lt;a href=&quot;#《Logan》&quot; class=&quot;headerlink&quot; title=&quot;《Logan》&quot;&gt;&lt;/a&gt;《Logan》&lt;/h1&gt;&lt;h2 id=&quot;正文&quot;&gt;&lt;a href=&quot;#正文&quot; class=&quot;headerlink&quot; title=&quot;正
    
    </summary>
    
      <category term="电影" scheme="https://blog.patrickcty.cc/categories/%E7%94%B5%E5%BD%B1/"/>
    
    
      <category term="虐心" scheme="https://blog.patrickcty.cc/tags/%E8%99%90%E5%BF%83/"/>
    
      <category term="英雄老矣" scheme="https://blog.patrickcty.cc/tags/%E8%8B%B1%E9%9B%84%E8%80%81%E7%9F%A3/"/>
    
      <category term="一个时代" scheme="https://blog.patrickcty.cc/tags/%E4%B8%80%E4%B8%AA%E6%97%B6%E4%BB%A3/"/>
    
  </entry>
  
  <entry>
    <title>《海洋奇缘》</title>
    <link href="https://blog.patrickcty.cc/2017/03/06/%E3%80%8A%E6%B5%B7%E6%B4%8B%E5%A5%87%E7%BC%98%E3%80%8B/"/>
    <id>https://blog.patrickcty.cc/2017/03/06/《海洋奇缘》/</id>
    <published>2017-03-06T11:02:49.000Z</published>
    <updated>2017-03-06T11:17:32.342Z</updated>
    
    <content type="html"><![CDATA[<h2 id="开始之前"><a href="#开始之前" class="headerlink" title="开始之前"></a>开始之前</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;知道这部电影还是因为在知乎日报上看到了对这篇电影的一些技术分析。这部电影大量的场景都是在海上，要想拍出海，很简单，要想在动画电影中表现海，似乎也没那么难，但是在3D动画中要想接近真实的表现海，那难度就不是一般的大了。之前也看到过志华撸出来的波纹，知道了他的那个波纹的难度，而对于有一个小时左右在海上的电影，这难度就可想而知了。而且影片中难度大的还不只是海，还有毛伊身上的纹身，鸟身上的羽毛，这些都不是简单就能搞定的。知道了这部电影的技术含量之后，我就下定决心要找个机会去看看～</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在一个星期快结束的时候，我终于决定把这部电影拿出来了～</p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;不得不说这部电影真的很好看～一开始在岛上对主角的描写就把我吸引住了，特别是一开始女主小时候在捡贝壳的时候海自动退让了——一个有灵魂的海！这个设定真的让我眼前一亮。然而这之后主角被爸爸抱走，经历的那一切就像梦一般留在了主角的记忆里，但是出海的念头却从未消散。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;之后主角慢慢长大，对海也有很深的执念，但是在父亲一次次的阻拦下，以及酋长女儿这个身份的约束下，她一直没能成功出海。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;但是收到很久之前毛伊偷特菲堤之心地影响，黑暗之力渗透到了主角的岛上，岸边很难捉到鱼了。这时候出海的念头又出现了，但仅仅只是出海捕鱼，然而在出海的途中，遇到了巨浪，不仅船翻了，主角和小猪还险些丧命，主角也因此放弃了出海的念头，想要去安心地当个酋长。但是这一切都被奶奶看见了，奶奶不仅带她见识了他们的祖先的出海所用的船只，还把多年以前的特菲堤之心交给了主角，主角也终于坚定了自我，然而就在这之后不久，奶奶就去世了，主角在奶奶的鼓励下终于出海去寻找毛伊归还特菲堤之心…这个剧情不仅熟悉，最后这部分还很扯…不过这些倒不影响观看…</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;后面就是在路途中找到毛伊，然后两个人相互影响，主角给毛伊带来希望与信心，毛伊让女主变得勇敢并且航海技术也提高。虽然中途也有过矛盾有过迷茫不过最后他们还是战胜了螃蟹怪，到达了特菲堤。没错这部分剧情也很熟悉…</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在与恶卡对战地时候，他们占了下风，并且毛伊的鱼钩接近损坏，由此毛伊丧失信心离开，女主一个人凭着智慧绕过了恶卡，然而当恶卡袭击女主地千钧一发之际，毛伊回了…没错这部分剧情也很熟悉…然后毛伊又是与恶卡一通大战。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;但是当主角到达特菲堤时，发现它消失了，原来恶卡就是特菲堤变化而成，这里倒是挺出人意料，然后女主感动了恶卡，并成功归还了特菲堤之心，于是毛伊和女主过上了幸福的生活。停停停，于是恶卡变回了女神特菲堤，岛上又重新恢复了生机，而毛伊也得到了女神给的鱼钩——他之前的那个在与恶卡地对战中损坏了，女主又带领族人开启了大航海时代（似乎没什么不对。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;影片的剧情真的十分老套…不过看起来倒没有太多不好的感觉，但是那些场景做得真的让人没话说。主角的形象也刻画得十分到位，总体还是很让人过瘾的。</p>
<h2 id="评分"><a href="#评分" class="headerlink" title="评分"></a>评分</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;8/10。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;剧情老套，特效好评。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;开始之前&quot;&gt;&lt;a href=&quot;#开始之前&quot; class=&quot;headerlink&quot; title=&quot;开始之前&quot;&gt;&lt;/a&gt;开始之前&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;知道这部电影还是因为在知乎日
    
    </summary>
    
      <category term="电影" scheme="https://blog.patrickcty.cc/categories/%E7%94%B5%E5%BD%B1/"/>
    
    
      <category term="动画" scheme="https://blog.patrickcty.cc/tags/%E5%8A%A8%E7%94%BB/"/>
    
      <category term="治愈" scheme="https://blog.patrickcty.cc/tags/%E6%B2%BB%E6%84%88/"/>
    
  </entry>
  
  <entry>
    <title>再次部署Flask app</title>
    <link href="https://blog.patrickcty.cc/2017/03/02/%E5%86%8D%E6%AC%A1%E9%83%A8%E7%BD%B2Flask-app/"/>
    <id>https://blog.patrickcty.cc/2017/03/02/再次部署Flask-app/</id>
    <published>2017-03-01T17:05:10.000Z</published>
    <updated>2017-03-06T11:31:19.586Z</updated>
    
    <content type="html"><![CDATA[<h1 id="再次部署Flask-app"><a href="#再次部署Flask-app" class="headerlink" title="再次部署Flask app"></a>再次部署Flask app</h1><p>之前成功用Nginx+uWSGI部署了Flask app，但是之后想升级内容然而uWSGI出现奇怪的错误一直没办法解决。拖了好久之后还是决定再次重装系统重头搞一遍，顺便再加深一下相关的知识。</p>
<h2 id="配置MySQL"><a href="#配置MySQL" class="headerlink" title="配置MySQL"></a>配置MySQL</h2><p>MySQL在安装后一般是没有密码的，我用的这台主机已经装好了MySQL，但是密码是一个随机生成的，所以也需要再次配置。</p>
<p><a href="https://segmentfault.com/a/1190000002498643" target="_blank" rel="external">参考文章</a></p>
<p>默认的账户在<code>/etc/mysql/debian.cnf</code>中，登录就用里面的账号和密码来登录。因为里面账号和密码都是明文的，所以要用root来查看。</p>
<p>接下来就是修改root的密码了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">use mysql;</div><div class="line">set password for &apos;root&apos;@&apos;localhost&apos; = password(&apos;yourpasswprd&apos;);</div></pre></td></tr></table></figure></p>
<p>搞定之后就创建相应的数据库<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">create database jnugeek default character set utf8;</div></pre></td></tr></table></figure></p>
<p>后面的半句是为了避免中文乱码</p>
<p>顺便再把MySQL的Python驱动装了吧，当初这里也是一个大坑<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install libmysqlclient-dev</div><div class="line">sudo pip3 install mysqlclient</div></pre></td></tr></table></figure></p>
<p>OK，这样数据库的内容就搞定了。然后大型的项目的话MySQL还是比较靠谱的选择，SQLite的话可能有点问题，于是就选择MySQL了。</p>
<h2 id="把代码上传到服务器上"><a href="#把代码上传到服务器上" class="headerlink" title="把代码上传到服务器上"></a>把代码上传到服务器上</h2><p>还是用git比较方便。</p>
<p>有的服务器没装git，那就先装一个git<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install git</div></pre></td></tr></table></figure></p>
<p>然后用git clone把代码拷贝到本地，注意服务器端没有公钥私钥，所以拷贝的时候用https，直接输入账号和密码。</p>
<h2 id="配置好代码运行的环境"><a href="#配置好代码运行的环境" class="headerlink" title="配置好代码运行的环境"></a>配置好代码运行的环境</h2><h2 id="virtualenv"><a href="#virtualenv" class="headerlink" title="virtualenv"></a>virtualenv</h2><p>Python的虚拟环境，可以隔离开各个项目，使得同一台服务器同时运行多个版本的Python应用成为可能<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install python3-pip</div><div class="line">sudo pip3 install virtualenv</div></pre></td></tr></table></figure></p>
<p>安装好了之后初始化，进入虚拟环境<br>在项目根目录中运行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">virtualenv jnugeek</div><div class="line">source jnugeek/bin/activate</div></pre></td></tr></table></figure></p>
<p>这样就建立并进入了一个叫jnugeek的虚拟环境</p>
<p>需要注意的就是如果激活了虚拟环境，那么下载模块的时候就不需要root权限了</p>
<h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install -r requirements.txt</div></pre></td></tr></table></figure>
<p>项目中一般都有requirements.txt这个用来标志所需模块的文件，当然在本地创建这个文件也是很方便的事<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip freeze &gt; requirements.txt</div></pre></td></tr></table></figure></p>
<h3 id="初始化应用"><a href="#初始化应用" class="headerlink" title="初始化应用"></a>初始化应用</h3><p>先把那几个环境变量设置了<br>在～/.bashrc中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">export MAIL_ACCOUNT = youraccount</div><div class="line">...</div></pre></td></tr></table></figure></p>
<p>然后再把数据库的表建了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">./entry.py db init</div><div class="line">./entry.py db migrate</div><div class="line">./entry.py db upgrade  // 不要忘...不然就连表都没建立...</div></pre></td></tr></table></figure></p>
<p>到这里没有什么问题的话就可以跑起来了，当然虽然flask自带有web服务器，但是Flask毕竟是一个Web框架，自带的服务器只是为了方便调试，放在生产环境的话就要用更高效的选择了。而用C写的uWSGI无疑是一个很好的选择。</p>
<h2 id="uWSGI配置"><a href="#uWSGI配置" class="headerlink" title="uWSGI配置"></a>uWSGI配置</h2><p>WSGI的话我还不是很理解，不过这里的uWSGI是一个高性能http服务器，用来和Python程序交换。</p>
<p>安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install uwsgi</div></pre></td></tr></table></figure></p>
<p>配置<br>在项目根目录创建config.ini的uWSGI的配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">[uwsgi]</div><div class="line">master = true</div><div class="line">home = venv</div><div class="line">wsgi-file = entry.py</div><div class="line">callable = app  </div><div class="line">socket = :5000</div><div class="line">processes = 4</div><div class="line">threads = 2</div><div class="line">buffer-size = 32768</div></pre></td></tr></table></figure></p>
<p>其中callable就是Flask的实例,wsgi-file就是启动的脚本文件</p>
<p>配置好了之后使用<code>uwsgi config.ini</code>来运行</p>
<p>下面是一个成功的例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">*** Starting uWSGI 2.0.13.1 (64bit) on [Sun Oct  2 15:44:11 2016] ***</div><div class="line">compiled with version: 4.8.4 on 01 October 2016 16:15:02</div><div class="line">os: Linux-4.4.0-38-generic #57~14.04.1-Ubuntu SMP Tue Sep 6 17:20:43 UTC 2016</div><div class="line">nodename: ubuntu-512mb-sgp1-01</div><div class="line">machine: x86_64</div><div class="line">clock source: unix</div><div class="line">detected number of CPU cores: 1</div><div class="line">current working directory: /home/david/myapp</div><div class="line">detected binary path: /home/david/myappenv/bin/uwsgi</div><div class="line">!!! no internal routing support, rebuild with pcre support !!!</div><div class="line">*** WARNING: you are running uWSGI without its master process manager ***</div><div class="line">your processes number limit is 1824</div><div class="line">your memory page size is 4096 bytes</div><div class="line">detected max file descriptor number: 1024</div><div class="line">lock engine: pthread robust mutexes</div><div class="line">thunder lock: disabled (you can enable it with --thunder-lock)</div><div class="line">uwsgi socket 0 bound to TCP address 128.199.97.37:8080 fd 3</div><div class="line">Python version: 2.7.6 (default, Jun 22 2015, 18:01:27)  [GCC 4.8.2]</div><div class="line">*** Python threads support is disabled. You can enable it with --enable-threads ***</div><div class="line">Python main interpreter initialized at 0x16e99b0</div><div class="line">your server socket listen backlog is limited to 100 connections</div><div class="line">your mercy for graceful operations on workers is 60 seconds</div><div class="line">mapped 72760 bytes (71 KB) for 1 cores</div><div class="line">*** Operational MODE: single process ***</div><div class="line">WSGI app 0 (mountpoint=&apos;&apos;) ready in 0 seconds on interpreter 0x16e99b0 pid: 11596 (default app)</div><div class="line">*** uWSGI is running in multiple interpreter mode ***</div><div class="line">spawned uWSGI worker 1 (and the only) (pid: 11596, cores: 1)</div></pre></td></tr></table></figure>
<p>如果没有报错的话就是可以的，但是会有一些比较坑爹的错误</p>
<blockquote>
<p>!!! no internal routing support, rebuild with pcre support !!!</p>
</blockquote>
<p>这个是因为pcre没弄好，一般去掉缓存重装就可以了，-I的作用是重装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install uwsgi -I --no-cache-dir</div></pre></td></tr></table></figure></p>
<blockquote>
<p>callable not found</p>
</blockquote>
<p>这个可能是因为没有导入callable</p>
<p>但是！！！只配置好了uWSGI是不行的，uWSGI只负责后端，还需要一个前端的http服务器，详情看<a href="https://my.oschina.net/u/877567/blog/201577" target="_blank" rel="external">这里</a></p>
<p>摘录一段</p>
<blockquote>
<p>uwsgi 实际上也是一个 http 服务器，只不过它只面向 python 网络应用程序。虽然 uwsgi 也是 http 服务器，但是却不能直接使用它部署 python web 应用程序，否则会出错。</p>
<p>在本文中，uwsgi 所扮演的的角色是后端 http 服务器，nginx 扮演的角色是前端 http 服务器，hello.py 是客户端应用程序。 用户从网页浏览器中发出请求，nginx 服务器收到请求后，会通过它的 uwsgi 模块将用户的请求转发给 uwsgi 服务器，uwsgi 服务器处理完毕后将结果返回给 nginx，浏览器将最终的结果展现给用户。</p>
</blockquote>
<p>uWSGI好是好，但是要是它万一断了，或者出问题了怎么办？要是有这样的一个程序可以自动监控运行uWSGI那岂不是美滋滋，而supervisor就是这样的程序。</p>
<h2 id="supervisor配置"><a href="#supervisor配置" class="headerlink" title="supervisor配置"></a>supervisor配置</h2><p>安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install supervisor</div></pre></td></tr></table></figure></p>
<p>在/etc/supervisor/conf.d/下建立一个配置文件sp.conf<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">[program:jnugeek] </div><div class="line"># 启动命令入口 </div><div class="line">command=/home/ubuntu/JNUGeek/jnugeek/bin/uwsgi /home/ubuntu/JNUGeek/config.ini            </div><div class="line"># 命令程序所在目录 </div><div class="line">directory=/ubuntu/JNUGeek</div><div class="line"># 运行命令的用户名 </div><div class="line">user=ubuntu</div><div class="line">autostart=true</div><div class="line">autorestart=true</div><div class="line"># 日志地址 这个还是很有用的，可以查看出现的错误</div><div class="line">stdout_logfile=/home/ubuntu/JNUGeek/logs/uwsgi_supervisor.log</div></pre></td></tr></table></figure></p>
<p>启动/重启/查看状态命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo service supervisor start/restart/stats</div></pre></td></tr></table></figure></p>
<p>接下来就是Nginx了</p>
<h2 id="Nginx配置"><a href="#Nginx配置" class="headerlink" title="Nginx配置"></a>Nginx配置</h2><p>这部分配置坑也比较多，待会一一道来。</p>
<p>安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install nginx</div></pre></td></tr></table></figure></p>
<p>直接修改配置文件<code>/etc/nginx/sites-available/default</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">server &#123; </div><div class="line">  listen 80; </div><div class="line">  listen [::]:80 ipv6only=on default_server;</div><div class="line">  server_name X.X.X.X; # 公网地址 </div><div class="line">  rewrite ^(.*)$  https://$host$1 permanent;  # 把http请求强制转换到https</div><div class="line">&#125;</div><div class="line"></div><div class="line"># 配置https</div><div class="line">server &#123;</div><div class="line">    # ssl参数</div><div class="line">    listen              443;</div><div class="line">    server_name         example.com;</div><div class="line">    ssl on;</div><div class="line">    # 证书文件，这个和下面的私钥要自己下载放在服务器里面</div><div class="line">    ssl_certificate     example.com.crt;</div><div class="line">    # 私钥文件</div><div class="line">    ssl_certificate_key example.com.key;</div><div class="line">    ssl_protocols       TLSv1 TLSv1.1 TLSv1.2;</div><div class="line">    ssl_ciphers         HIGH:!aNULL:!MD5;</div><div class="line">    # 项目相关的内容</div><div class="line">    location / &#123; </div><div class="line">    include uwsgi_params;</div><div class="line">    uwsgi_pass 127.0.0.1:5000; # 指向uwsgi 所应用的内部地址,所有请求将转发给uwsgi 处理 </div><div class="line">    uwsgi_param UWSGI_PYHOME /home/ubuntu/JNUGeek/jnugeek; # 指向虚拟环境目录 </div><div class="line">    uwsgi_param UWSGI_CHDIR /home/ubuntu/JNUGeek; # 指向网站根目录 </div><div class="line">    uwsgi_param UWSGI_SCRIPT entry:app; # 指定启动程序</div><div class="line">    uwsgi_read_timeout 100; </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上面的需要注意的是，http请求默认是到80端口的，然而既然已经有了https当然首选https，rewrite就是把http的请求导向了https。Nginx配置https<a href="https://aotu.io/notes/2016/08/16/nginx-https/" target="_blank" rel="external">参考文章</a>，注意对于不同的端口，是可以写到一起的，也可以不写到一起，当然我这里是因为要把http重定向到https，如果写在一起就没办法实现了，贸然加入rewrite只会导致无限重定向（说起来都是眼泪）。强制转换的<a href="http://blog.csdn.net/wzy_1988/article/details/8549290" target="_blank" rel="external">参考文章</a></p>
<p>必须要有的参数就是：</p>
<ul>
<li>listen 监听的端口</li>
<li>server_name 主机名，域名</li>
</ul>
<p>可选的参数有：<br>location 里面包含了项目的信息，这里是直接把uWSGI给包含进去了，让前后端的服务器进行了无缝对接。</p>
<p>最后，server可以有多个，也可以相互独立，必须要有某些参数，不然监听什么呢。</p>
<p>写完了当然要测试一下是不是正确的了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo nginx -t</div></pre></td></tr></table></figure></p>
<p>在哪里查看错误日志呢？</p>
<blockquote>
<p>/var/log/nginx/error.log</p>
</blockquote>
<p>其中这几天遇到了</p>
<blockquote>
<p>2015/12/29 12:33:37 [emerg] 24489#0: bind() to 0.0.0.0:80 failed (98: Address already in use)<br>2015/12/29 12:33:37 [emerg] 24489#0: still could not bind()</p>
</blockquote>
<p>这里有一个坑就是nginx先监听了ipv4的80端口之后又监听了ipv6的80端口，于是就重复占用了。更加坑人的是你去看了端口占用它又把80端口释放了。来源在<a href="http://blog.csdn.net/yusiguyuan/article/details/20565337" target="_blank" rel="external">这里</a></p>
<p>解决方法就是<br>修改<code>listen [::]:80 default_server;</code>为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">listen [::]:80 ipv6only=on default_server;</div></pre></td></tr></table></figure></p>
<p>然而这样我的Nginx还是fail，结果重启主机解决问题…</p>
<p>上面的都搞定了之后就可以愉快的启动服务来查看自己的app了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo service supervisor start</div><div class="line">sudo service nginx restart</div></pre></td></tr></table></figure></p>
<p><a href="http://www.jianshu.com/p/84978157c785" target="_blank" rel="external">参考文章</a></p>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>到此，部署成功，https也搞定了，然而不知道为什么CSS貌似没加载出来…没想到最后败在了CSS上…卒。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;再次部署Flask-app&quot;&gt;&lt;a href=&quot;#再次部署Flask-app&quot; class=&quot;headerlink&quot; title=&quot;再次部署Flask app&quot;&gt;&lt;/a&gt;再次部署Flask app&lt;/h1&gt;&lt;p&gt;之前成功用Nginx+uWSGI部署了Flask a
    
    </summary>
    
      <category term="Python" scheme="https://blog.patrickcty.cc/categories/Python/"/>
    
      <category term="JNUGeek" scheme="https://blog.patrickcty.cc/categories/Python/JNUGeek/"/>
    
    
      <category term="坑爹" scheme="https://blog.patrickcty.cc/tags/%E5%9D%91%E7%88%B9/"/>
    
      <category term="Flask" scheme="https://blog.patrickcty.cc/tags/Flask/"/>
    
      <category term="部署" scheme="https://blog.patrickcty.cc/tags/%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title>《比利林恩的中场战事》</title>
    <link href="https://blog.patrickcty.cc/2017/02/26/%E3%80%8A%E6%AF%94%E5%88%A9%E6%9E%97%E6%81%A9%E7%9A%84%E4%B8%AD%E5%9C%BA%E6%88%98%E4%BA%8B%E3%80%8B/"/>
    <id>https://blog.patrickcty.cc/2017/02/26/《比利林恩的中场战事》/</id>
    <published>2017-02-26T02:50:11.000Z</published>
    <updated>2017-03-06T00:27:23.064Z</updated>
    
    <content type="html"><![CDATA[<h1 id="《比利林恩的中场战事》"><a href="#《比利林恩的中场战事》" class="headerlink" title="《比利林恩的中场战事》"></a>《比利林恩的中场战事》</h1><h2 id="开始之前"><a href="#开始之前" class="headerlink" title="开始之前"></a>开始之前</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一个慵懒的早晨和电影更搭哦～</p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;知道这部电影是因为它采用了电影界最“激进”科技，史无前例的120FPS，带来的观影体验是革命性的，据说会不自觉的把自己代入故事之中，但是全世界也只有五家影院能做到这个效果，很遗憾没有机会看到，不过现在终于有机会观看这部电影，不知道抛开了技术本身实际的体验是怎么样的？这是我开始之前的疑问。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;影片的主角当然是比利林恩，他为了报复抛弃姐姐的人而去破坏他的车，然后靠入伍来作为行为的惩罚。但是刚开始他并不被队友看好，因为在一起撞车事故被惩罚时他说出了他入伍的理由，于是赢得了队友，特别是“蘑菇”的信任。但是之后的一次战役中，蘑菇独自突进被敌人伤害到并抓住，他为了去救他而挺身而出，这个镜头被摄像头捕捉到了，并传回了国内让人们知道了战争的真实性并且让他和B班成为了英雄。但是在和敌人肉搏的时候，蘑菇没挺过来去世了。之后他们回到了国内…</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;回来的这段日子B班被当成了玩具到处走秀，而比利也在战争的“中场休息”中遇到了新的“战事”。他陷入了姐姐的劝他回家以及回战场之间的迷茫，但是随着中场表演的进行，他在烟火，灯光的光怪陆离中回想起战场的情景，找回了自我。最后在“蘑菇”面前，他坚定了自己的决心。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这部电影有比较讽刺的意味，讽刺了那些没有经历过战争却又自以为是的群众，讽刺了那些想要赚钱又冠冕堂皇的商人，讽刺了军人的浮躁(不确定？)。但是我总感觉他们的功劳被放大，他们的形象被神化。好在的是他和班长最后没有被浮华诱惑，他们又回到了战场。可能是因为我之前看了《血战钢锯岭》，这两部战争的惨烈程度完全不是一个级别的…</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;情节感觉没多少好说的，但是整个看下来，却有很充实的感觉，因为主角的感情表现得很充沛，如果看完全版的相必更震撼，叙事手法也很棒，在中场表演中穿插着回忆，还是很值得一看的～</p>
<h2 id="评分"><a href="#评分" class="headerlink" title="评分"></a>评分</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;8/10。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;勇敢的创新很值得鼓励，内容也挺棒的～很期待李安的下一部电影！</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;《比利林恩的中场战事》&quot;&gt;&lt;a href=&quot;#《比利林恩的中场战事》&quot; class=&quot;headerlink&quot; title=&quot;《比利林恩的中场战事》&quot;&gt;&lt;/a&gt;《比利林恩的中场战事》&lt;/h1&gt;&lt;h2 id=&quot;开始之前&quot;&gt;&lt;a href=&quot;#开始之前&quot; class=&quot;
    
    </summary>
    
      <category term="电影" scheme="https://blog.patrickcty.cc/categories/%E7%94%B5%E5%BD%B1/"/>
    
    
      <category term="战争" scheme="https://blog.patrickcty.cc/tags/%E6%88%98%E4%BA%89/"/>
    
      <category term="情感" scheme="https://blog.patrickcty.cc/tags/%E6%83%85%E6%84%9F/"/>
    
  </entry>
  
  <entry>
    <title>C++实用函数</title>
    <link href="https://blog.patrickcty.cc/2017/02/23/C-%E5%AE%9E%E7%94%A8%E5%87%BD%E6%95%B0/"/>
    <id>https://blog.patrickcty.cc/2017/02/23/C-实用函数/</id>
    <published>2017-02-23T08:52:15.000Z</published>
    <updated>2017-03-06T00:27:23.064Z</updated>
    
    <content type="html"><![CDATA[<h2 id="sort"><a href="#sort" class="headerlink" title="sort()"></a>sort()</h2><ul>
<li>来自algorithm</li>
<li>包含三个参数<br>1.数组名（开始的指针）<br>2.数组名+元素个数（结束的指针）<br>3.判断排序规则的函数（布尔，默认为从小到大排序）</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">bool cmp(int a, int b)</div><div class="line">&#123;</div><div class="line">    return a &gt; b;  // 变为从大到小 </div><div class="line">&#125;</div><div class="line"></div><div class="line">//example</div><div class="line">int a[100];</div><div class="line">for (int i = 0; i &lt; 100; ++i)</div><div class="line">    a[i] = i;</div><div class="line">sort(a, a + 100, cmp);  // cmp可省略，省略就为从小到大排序</div></pre></td></tr></table></figure>
<h2 id="qsort"><a href="#qsort" class="headerlink" title="qsort()"></a>qsort()</h2><ul>
<li>来自cstdlib</li>
<li>包含四个参数<br>1.数组名（开始的指针）<br>2.数组名+元素个数（结束的指针）<br>3.元素占用的空间（便于设置辅助空间）<br>4.判断排序规则的函数（布尔，默认为从小到大排序）</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">bool cmp(int a, int b)</div><div class="line">&#123;</div><div class="line">    return a &gt; b;  // 变为从大到小 </div><div class="line">&#125;</div><div class="line"></div><div class="line">//example</div><div class="line">int a[100];</div><div class="line">for (int i = 0; i &lt; 100; ++i)</div><div class="line">    a[i] = i;</div><div class="line">sort(a, a + 100, sizeof(int), cmp);  // cmp可省略，省略就为从小到大排序</div></pre></td></tr></table></figure>
<h2 id="sprintf"><a href="#sprintf" class="headerlink" title="sprintf"></a>sprintf</h2><ul>
<li>来自cstdio</li>
<li>作用是把格式化数据读入字符串</li>
<li>参数有三个</li>
</ul>
<ol>
<li>字符数组名</li>
<li>读入格式化数据的种类</li>
<li>读入的数据</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">char str[50];</div><div class="line">int a = 1000;</div><div class="line">sprintf(str, &quot;%d&quot;, a);</div></pre></td></tr></table></figure>
<p>这个可以方便的把整数转化为字符串</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;sort&quot;&gt;&lt;a href=&quot;#sort&quot; class=&quot;headerlink&quot; title=&quot;sort()&quot;&gt;&lt;/a&gt;sort()&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;来自algorithm&lt;/li&gt;
&lt;li&gt;包含三个参数&lt;br&gt;1.数组名（开始的指针）&lt;br&gt;2.数组名
    
    </summary>
    
      <category term="ACM" scheme="https://blog.patrickcty.cc/categories/ACM/"/>
    
    
      <category term="C++" scheme="https://blog.patrickcty.cc/tags/C/"/>
    
      <category term="效率" scheme="https://blog.patrickcty.cc/tags/%E6%95%88%E7%8E%87/"/>
    
  </entry>
  
  <entry>
    <title>那些严重拖慢做题进度的题以及遇到的坑4</title>
    <link href="https://blog.patrickcty.cc/2017/02/23/%E9%82%A3%E4%BA%9B%E4%B8%A5%E9%87%8D%E6%8B%96%E6%85%A2%E5%81%9A%E9%A2%98%E8%BF%9B%E5%BA%A6%E7%9A%84%E9%A2%98%E4%BB%A5%E5%8F%8A%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%914/"/>
    <id>https://blog.patrickcty.cc/2017/02/23/那些严重拖慢做题进度的题以及遇到的坑4/</id>
    <published>2017-02-23T08:50:17.000Z</published>
    <updated>2017-03-06T00:27:23.064Z</updated>
    
    <content type="html"><![CDATA[<h1 id="那些严重拖慢做题进度的题以及遇到的坑4"><a href="#那些严重拖慢做题进度的题以及遇到的坑4" class="headerlink" title="那些严重拖慢做题进度的题以及遇到的坑4"></a>那些严重拖慢做题进度的题以及遇到的坑4</h1><p>杭电207X &amp;&amp; 208X</p>
<h2 id="A1"><a href="#A1" class="headerlink" title="A1 = ?"></a>A1 = ?</h2><blockquote>
<p>有如下方程：Ai = (Ai-1 + Ai+1)/2 - Ci (i = 1, 2, 3, …. n).<br>若给出A0, An+1, 和 C1, C2, …..Cn.<br>请编程计算A1 = ?</p>
</blockquote>
<p>分析：</p>
<p>这是一个数学问题，然而这个递推却很坑爹，Ai与Ai-1和Ai-2都有关，然而初始条件却要你求A1，看了解答之后才知道怎么做…自己高中数学功力还是一般般啊…</p>
<p>以下来源于网上</p>
<blockquote>
<p>因为：Ai=(Ai-1+Ai+1)/2 - Ci,<br>      A1=(A0  +A2  )/2 - C1;<br>      A2=(A1  +  A3)/2 - C2 , …<br>=&gt;    A1+A2 = (A0+A2+A1+A3)/2 - (C1+C2)<br>=&gt;    A1+A2 =  A0+A3 - 2(C1+C2)<br>同理可得：<br>      A1+A1 =  A0+A2 - 2(C1)<br>      A1+A2 =  A0+A3 - 2(C1+C2)<br>      A1+A3 =  A0+A4 - 2(C1+C2+C3)<br>      A1+A4 =  A0+A5 - 2(C1+C2+C3+C4)<br>      …<br>      A1+An = A0+An+1 - 2(C1+C2+…+Cn)<br>—————————————————– 左右求和<br>     (n+1)A1+(A2+A3+…+An) = nA0 +(A2+A3+…+An) + An+1 - 2(nC1+(n-1)C2+…+2Cn-1+Cn) </p>
<p>=&gt;   (n+1)A1 = nA0 + An+1 - 2(nC1+(n-1)C2+…+2Cn-1+Cn) </p>
<p>=&gt;   A1 = [nA0 + An+1 - 2(nC1+(n-1)C2+…+2Cn-1+Cn)]/(n+1) </p>
</blockquote>
<p>这个解法的巧妙之处就在于多项相加的时候，两边都有A2～An，而多出来的A1和An+1正好是要求的和知道的，于是就可以直接写出答案。然而要发现规律不难但是要想到把它们加起来就有点难了…</p>
<h2 id="选课时间"><a href="#选课时间" class="headerlink" title="选课时间"></a>选课时间</h2><blockquote>
<p>又到了选课的时间了，xhd看着选课表发呆，为了想让下一学期好过点，他想知道学n个学分共有多少组合。你来帮帮他吧。（xhd认为一样学分的课没区别）</p>
</blockquote>
<p>分析：</p>
<p>这一题一看就觉得应该是一个动态规划，但是不是求最优，而是求数量最多，于是就有些懵逼了。</p>
<p>先上代码吧<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">for (int i = 0; i &lt; k; ++i)</div><div class="line">        &#123;</div><div class="line">            // 每次输入新课的时候循环</div><div class="line">            int a, b;</div><div class="line">            scanf(&quot;%d %d&quot;, &amp;a, &amp;b);</div><div class="line"></div><div class="line">            // 对于每门课，都有相当于一个背包</div><div class="line">            for (int m = n; m &gt;= 1; --m)</div><div class="line">            &#123;</div><div class="line">                for (int l = 1; l &lt;= b; ++l)</div><div class="line">                &#123;</div><div class="line">                    // 不同的是只要新装进去就加上种类</div><div class="line">                    // 好难想到</div><div class="line">                    // 这个种类真的不好想</div><div class="line">                    if (m - l * a &gt;= 0)</div><div class="line">                        d[m] += d[m - l * a];</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div></pre></td></tr></table></figure></p>
<p>分析：</p>
<p>因为正好是输入的每门课，所以就直接跟着课来循环，就不用等输入完之后再进入循环。<br>对于每门课，可以看作是一个背包，背包容量为n也就是总学分数。这时候就还是要从容量为n到1进行一个循环，里面的循环就是对课程的数量，到这里还是和0-1背包是一样的，下面就是重点了</p>
<blockquote>
<p>如果还能装得下，那么就在之前的基础上加上了加进去的数量对应的种类，也就是说如果学分为m，则d[m]是基于d[m-1]到d[0]所有的情况。<br>这是这个的一个难点，也是和平常的动态规划不一样的地方。</p>
</blockquote>
<h2 id="找单词"><a href="#找单词" class="headerlink" title="找单词"></a>找单词</h2><blockquote>
<p>假设有x1个字母A， x2个字母B,….. x26个字母Z，同时假设字母A的价值为1，字母B的价值为2,….. 字母Z的价值为26。那么，对于给定的字母，可以找到多少价值&lt;=50的单词呢？单词的价值就是组成一个单词的所有字母的价值之和，比如，单词ACM的价值是1+3+14=18，单词HDU的价值是8+4+21=33。(组成的单词与排列顺序无关，比如ACM与CMA认为是同一个单词）。</p>
</blockquote>
<p>分析：</p>
<p>这是一道和上面几乎一样的踢，但是由于一些坑爹的原因，运行结果一直都是错的…</p>
<p>还是先上代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line">#include&lt;iostream&gt;</div><div class="line">#include&lt;cstdlib&gt;</div><div class="line">#include&lt;cstdio&gt;</div><div class="line">#include&lt;cmath&gt;</div><div class="line">#include&lt;cstring&gt;</div><div class="line">#include &lt;algorithm&gt;</div><div class="line">#include &lt;map&gt;</div><div class="line"></div><div class="line">using namespace std;</div><div class="line"></div><div class="line">const int maxn = 30;</div><div class="line">int a[maxn];  // 每个字母出现的次数</div><div class="line">int d[55];  // 最大种类</div><div class="line"></div><div class="line">int main()</div><div class="line">&#123;</div><div class="line">	int n;</div><div class="line">	scanf(&quot;%d&quot;, &amp;n);</div><div class="line">	while(n--)</div><div class="line">	&#123;</div><div class="line">        int cnt = 0;</div><div class="line"></div><div class="line">        memset(d, 0, sizeof(d));</div><div class="line">        d[0] = 1;</div><div class="line">        for (int i = 1; i &lt;= 26; ++i)</div><div class="line">        &#123;</div><div class="line">            scanf(&quot;%d&quot;, &amp;a[i]);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        // 还是对于每个字母来循环</div><div class="line">        for (int i = 1; i &lt;= 26; ++i)</div><div class="line">        &#123;</div><div class="line">            if (a[i] == 0)</div><div class="line">                continue;</div><div class="line">            // 这里是对于剩下的分数</div><div class="line">            // 里面就几乎和上面一题完全一样了</div><div class="line">            for (int j = 50; j &gt;= i; --j)</div><div class="line">            &#123;</div><div class="line">                for (int k = 1; k &lt;= a[i]; ++k)</div><div class="line">                &#123;</div><div class="line">                    if (j - i * k &gt;= 0)</div><div class="line">                        d[j] += d[j - i * k];</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        // 这个地方坑的我好惨...明明是50位的数组...我已开始只加了26位...</div><div class="line">        for (int i = 1; i &lt;= 50; ++i)</div><div class="line">        &#123;</div><div class="line">            cnt += d[i];</div><div class="line">        &#125;</div><div class="line">        printf(&quot;%d\n&quot;, cnt);</div><div class="line">	&#125;</div><div class="line">	return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>和上面一题不同的是这一题在1~50这个范围内都可以，所以最后只用把结果加起来就可以了，比较坑爹的是，我一直以为d只有26位…所以结果一直秘制的小…</p>
<h2 id="汉诺塔IV"><a href="#汉诺塔IV" class="headerlink" title="汉诺塔IV"></a>汉诺塔IV</h2><blockquote>
<p>还记得汉诺塔III吗？他的规则是这样的：不允许直接从最左(右)边移到最右(左)边(每次移动一定是移到中间杆或从中间移出)，也不允许大盘放到小盘的上面。xhd在想如果我们允许最大的盘子放到最上面会怎么样呢？（只允许最大的放在最上面）当然最后需要的结果是盘子从小到大排在最右边。</p>
</blockquote>
<p>分析：</p>
<p>这个是在前一个汉诺塔的基础上来的，分三步走：</p>
<ol>
<li>把n-1个移到中间去</li>
<li>把第n个移到中间再移到右边去</li>
<li>把n-1个移到右边去</li>
</ol>
<p>最坑的是有一些隐藏的结论一直没发现：</p>
<ol>
<li>把n个移到最右边相当于先移到中间，再移到右边，因为事实上每个块都是移到中间才能移到最右边的</li>
<li>把n个移到中间和把n个从中间移到旁边是一样的，对于单个的，都是一步到位</li>
<li>把n个移到右边相当于2*把n个移到中间，由1,2可以知道</li>
</ol>
<p>所以者具体的结果其实就是汉诺塔3的a[n - 1] + 2</p>
<p>没发现规律的我被坑的好惨…</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;那些严重拖慢做题进度的题以及遇到的坑4&quot;&gt;&lt;a href=&quot;#那些严重拖慢做题进度的题以及遇到的坑4&quot; class=&quot;headerlink&quot; title=&quot;那些严重拖慢做题进度的题以及遇到的坑4&quot;&gt;&lt;/a&gt;那些严重拖慢做题进度的题以及遇到的坑4&lt;/h1&gt;&lt;p&gt;杭电
    
    </summary>
    
      <category term="ACM" scheme="https://blog.patrickcty.cc/categories/ACM/"/>
    
    
      <category term="坑爹" scheme="https://blog.patrickcty.cc/tags/%E5%9D%91%E7%88%B9/"/>
    
      <category term="为什么我这么菜呀" scheme="https://blog.patrickcty.cc/tags/%E4%B8%BA%E4%BB%80%E4%B9%88%E6%88%91%E8%BF%99%E4%B9%88%E8%8F%9C%E5%91%80/"/>
    
  </entry>
  
  <entry>
    <title>C++好用的模块</title>
    <link href="https://blog.patrickcty.cc/2017/02/23/C-%E5%A5%BD%E7%94%A8%E7%9A%84%E6%A8%A1%E5%9D%97/"/>
    <id>https://blog.patrickcty.cc/2017/02/23/C-好用的模块/</id>
    <published>2017-02-22T17:16:56.000Z</published>
    <updated>2017-03-06T00:27:23.064Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C-好用的模块"><a href="#C-好用的模块" class="headerlink" title="C++好用的模块"></a>C++好用的模块</h1><h2 id="一览"><a href="#一览" class="headerlink" title="一览"></a>一览</h2><p>整体模板：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">#include &lt;iostream&gt;</div><div class="line">#include &lt;cstdlib&gt;</div><div class="line">#include &lt;cstdio&gt;</div><div class="line">#include &lt;cmath&gt;</div><div class="line">#include &lt;cstring&gt;</div><div class="line">#include &lt;algorithm&gt;</div><div class="line">#include &lt;string&gt;</div><div class="line">#include &lt;sstream&gt;</div><div class="line">#include &lt;map&gt;</div><div class="line">#include &lt;vector&gt; </div><div class="line">#include &lt;set&gt;</div><div class="line"></div><div class="line">using namespace std;</div><div class="line"></div><div class="line">const int maxn = 10005;</div><div class="line"></div><div class="line">int main()</div><div class="line">&#123;</div><div class="line">	int n;</div><div class="line">	scanf(&quot;%d&quot;, &amp;n);</div><div class="line">	while(n--)</div><div class="line">    //while (~scanf(&quot;%d&quot;, &amp;n) &amp;&amp; n)</div><div class="line">    //while (~scanf(&quot;%d&quot;, &amp;n))</div><div class="line">	&#123;</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">	return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>头文件解析：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">// C语言的基本头文件</div><div class="line">#include &lt;cstdlib&gt;</div><div class="line">#include &lt;cstdio&gt;  // 输入输出</div><div class="line">#include &lt;cmath&gt;  // 数学</div><div class="line">#include &lt;cstring&gt;  // 字符</div><div class="line">// C++算法</div><div class="line">// 常用的有sort(a, a + n, cmp)</div><div class="line">#include &lt;algorithm&gt;</div><div class="line">// 映射</div><div class="line">// 类似于Python中的dict</div><div class="line">// 声明：</div><div class="line">// map&lt;string, int&gt; a;  string到int的映射</div><div class="line">// 方法：</div><div class="line">// 直接赋值a[b] = 1</div><div class="line">// 迭代的时候对于指针maap，maap-&gt;first就是key，maap-&gt;second就是value</div><div class="line">#include &lt;map&gt;</div><div class="line">// 不定长数组</div><div class="line">// 声明：</div><div class="line">// vector&lt;int&gt; a; 一维不定长数组</div><div class="line">// vector&lt;int&gt; a[maxn]; 二维不定长数组， 第一维大小固定</div><div class="line">// 方法：</div><div class="line">// a.size()读取大小</div><div class="line">// a.resize()改变大小</div><div class="line">// a.push_back()向尾部添加元素</div><div class="line">// a.pop_back()删除最后一个元素</div><div class="line">#include &lt;vector&gt;</div><div class="line">// 集合，里面不包含重复的元素</div><div class="line">// 声明set&lt;int&gt; a;</div><div class="line">// 方法：</div><div class="line">// a.insert() 加入集合</div><div class="line">// a.size() 集合大小</div><div class="line">// a.begin() 集合开始指针</div><div class="line">#include &lt;set&gt;</div><div class="line">// C++的强大的字符类</div><div class="line">// 读入一行</div><div class="line">// string a;</div><div class="line">// getline(cin, a)</div><div class="line">// 直接流式读写</div><div class="line">// cin &gt;&gt; s;</div><div class="line">#include &lt;string&gt;</div><div class="line">// 把字符串变成流来让string读入</div><div class="line">// string line;</div><div class="line">// getline(cin, line);</div><div class="line">// stringstream ss(a);</div><div class="line">// ss &gt;&gt; a;  直接把ss的内容也就是line读入到a中了</div><div class="line">#include &lt;sstream&gt;</div><div class="line">// C++的输入输出流，cin和cout就在这里面</div><div class="line">#include &lt;iostream&gt;</div></pre></td></tr></table></figure></p>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>帮助最大的应该是string类了，对于字符串的处理方便多了，直接就过了一个直接看很麻烦的题，不过可能会超时。</p>
<p>相关方法：</p>
<ul>
<li>substr(开始的位置， 子串的长度) 返回值也是一个string类的字符串</li>
<li>length()字符串长度</li>
</ul>
<p>另外的就是set类了，对于统计字符串的种类方便多了，对，字符串！数字还好说。</p>
<p>流式操作也很方便</p>
<ul>
<li><blockquote>
<blockquote>
<p>表示流入，例如cin&gt;&gt;a;输入流的数据流入a</p>
</blockquote>
</blockquote>
</li>
<li>&lt;&lt;表示流出，总之两个都表示流的方向，例如cout&lt;&lt;a;a的数据流到输出流</li>
<li>还有stringstream可以把string变成流，对于那种一行有很多数据用空格隔开的简直不能更好用，但是时间也是一个问题</li>
</ul>
<h2 id="两个实例"><a href="#两个实例" class="headerlink" title="两个实例"></a>两个实例</h2><h3 id="剪花布条"><a href="#剪花布条" class="headerlink" title="剪花布条"></a>剪花布条</h3><blockquote>
<p>一块花布条，里面有些图案，另有一块直接可用的小饰条，里面也有一些图案。对于给定的花布条和小饰条，计算一下能从花布条中尽可能剪出几块小饰条来呢？</p>
</blockquote>
<p>分析：</p>
<p>用string类来构造字符串，然后调用string的find方法来寻找子字符串，一直这样做下去就可以了。注意的是，为了方便匹配完后把匹配出来的结果包括子串一起删除会更加方便。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">string a, b;</div><div class="line">if (a.find(b) != -1)</div><div class="line">&#123;</div><div class="line">    cnt++;</div><div class="line">    a = a.substr(n + b.length(), a.length() - b.length() - n + 1);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="单词数"><a href="#单词数" class="headerlink" title="单词数"></a>单词数</h3><blockquote>
<p>lily的好朋友xiaoou333最近很空，他想了一件没有什么意义的事情，就是统计一篇文章里不同单词的总数。下面你的任务是帮助xiaoou333解决这个问题。</p>
</blockquote>
<p>分析：</p>
<p>这里就是上面说的，不用集合会很麻烦</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">set&lt;string&gt; dict;</div><div class="line"></div><div class="line">stringstream ss(s);</div><div class="line">while(ss &gt;&gt; buf)</div><div class="line">    dict.insert(buf);</div><div class="line">    </div><div class="line">printf(&quot;%d\n&quot;, dict.size());</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;C-好用的模块&quot;&gt;&lt;a href=&quot;#C-好用的模块&quot; class=&quot;headerlink&quot; title=&quot;C++好用的模块&quot;&gt;&lt;/a&gt;C++好用的模块&lt;/h1&gt;&lt;h2 id=&quot;一览&quot;&gt;&lt;a href=&quot;#一览&quot; class=&quot;headerlink&quot; title=
    
    </summary>
    
      <category term="ACM" scheme="https://blog.patrickcty.cc/categories/ACM/"/>
    
    
      <category term="C++" scheme="https://blog.patrickcty.cc/tags/C/"/>
    
      <category term="效率" scheme="https://blog.patrickcty.cc/tags/%E6%95%88%E7%8E%87/"/>
    
  </entry>
  
  <entry>
    <title>动态规划初步</title>
    <link href="https://blog.patrickcty.cc/2017/02/21/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%88%9D%E6%AD%A5/"/>
    <id>https://blog.patrickcty.cc/2017/02/21/动态规划初步/</id>
    <published>2017-02-21T06:18:09.000Z</published>
    <updated>2017-03-06T00:27:23.064Z</updated>
    
    <content type="html"><![CDATA[<h1 id="动态规划初步"><a href="#动态规划初步" class="headerlink" title="动态规划初步"></a>动态规划初步</h1><h2 id="开始之前"><a href="#开始之前" class="headerlink" title="开始之前"></a>开始之前</h2><p>首先我们考虑一下以下的问题：</p>
<ul>
<li>什么是动态规划，动态规划与递推有什么关系</li>
<li>动态规划的关键点是什么</li>
<li>动态规划怎么保证每处的值都是最优</li>
<li>动态规划有哪几种解题模板</li>
<li>动态规划有哪些应用</li>
</ul>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>带着这些问题，就要更深的了解动态规划了。</p>
<p>首先回到第一个问题：</p>
<h3 id="什么是动态规划，动态规划与递推有什么关系"><a href="#什么是动态规划，动态规划与递推有什么关系" class="headerlink" title="什么是动态规划，动态规划与递推有什么关系"></a>什么是动态规划，动态规划与递推有什么关系</h3><p>我个人的理解是通过寻求问题的子问题来递推解决问题的一种方法。</p>
<p>而递推是动态规划中要用到的一部分，而且并不只是简单的递推，而是要根据情况进行判断选出最优的结果进行递推，例如：</p>
<blockquote>
<p>d(i, j) = max(d(i + 1, j), d(i + 1, j + 1)) + a(i, j)</p>
</blockquote>
<p>而递推则往往是简单的相邻几项的关系，例如：</p>
<blockquote>
<p>d(i) = 3d(i - 1) + 2</p>
</blockquote>
<p>既然递推不是动态规划的关键，那动态规划的关键点是什么呢？</p>
<p>这样就来到了第二个问题：</p>
<h3 id="动态规划的关键点是什么"><a href="#动态规划的关键点是什么" class="headerlink" title="动态规划的关键点是什么"></a>动态规划的关键点是什么</h3><h4 id="状态"><a href="#状态" class="headerlink" title="状态"></a>状态</h4><ul>
<li>简单来说就是整个过程中的某个点，以及一些属性</li>
</ul>
<h4 id="指标函数-amp-决策-amp-状态转移方程"><a href="#指标函数-amp-决策-amp-状态转移方程" class="headerlink" title="指标函数&amp;决策&amp;状态转移方程"></a>指标函数&amp;决策&amp;状态转移方程</h4><ul>
<li>指标函数是一个最优的函数，它的一个特定的值往往就是问题的解答，例如</li>
</ul>
<blockquote>
<p>上面的d(i, j)是从(i, j)出发的最大值，那么一个特定的值(1, 1)就是从这个点到最底层的最大的路径长度</p>
</blockquote>
<p>而<strong>指标函数的选取</strong>是动态规划的一个关键，选一个好的指标函数能大大的让问题简化</p>
<p>另外对于同一个状态的选取，指标函数通常有两种互相对称的写法，比如和上面的对称的是：到(i, j)的最大值</p>
<ul>
<li><p>决策是状态转移的方向，通常两个这个状态到下一个状态总是有多种方向可以选择，而我们要选择的总是最佳决策</p>
</li>
<li><p>状态转移方程则是用指标函数来表示不同状态的转移过程，选出最优决策，表示状态间的数学关系</p>
</li>
</ul>
<p>虽然动态规划是一层层推下来的，那如果到了后面的情况发现前面某一步的另一种决策有更优的结果是怎么处理的呢？怎么保证最后的结果总是最优？</p>
<h3 id="动态规划怎么保证每处的值都是最优"><a href="#动态规划怎么保证每处的值都是最优" class="headerlink" title="动态规划怎么保证每处的值都是最优"></a>动态规划怎么保证每处的值都是最优</h3><p>这是由一个叫“最优子结构”的部分保证的，看维基百科上我们可以知道：</p>
<blockquote>
<p>动态规划只能应用于有最优子结构的问题。最优子结构的意思是局部最优解能决定全局最优解（对有些问题这个要求并不能完全满足，故有时需要引入一定的近似）。简单地说，问题能够分解成子问题来解决。</p>
</blockquote>
<p>也就是说因为每一步都是由一个特定的值和最优值组成的，每一步最优值则保证了下一步甚至到结果都是最优值。</p>
<p>当然如果状态和指标函数选取的不好，那么可能就陷入一个“不能保证最优子结构”的情况了，比如杭电上的龟兔赛跑问题，如果选取(i, j)作为状态，i为当前充电站的编号，j为当前还可以跑的里程。因为下一步的里程还是和这一步相关，所以保证了前面的最优并不能保证接下来的都是最优的，这部分就要思考清楚了(这也是最难的部分)。</p>
<h3 id="动态规划有哪几种解题模板"><a href="#动态规划有哪几种解题模板" class="headerlink" title="动态规划有哪几种解题模板"></a>动态规划有哪几种解题模板</h3><p>下面以数字三角形为例</p>
<ul>
<li>递推法<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">int i, j;</div><div class="line">// 总是要把最开始的状态先初始化，这里是最下面一层的状态</div><div class="line">for (int i = 1; i &lt;= n; ++i) d[n][i] = a[n][j];</div><div class="line">// 由于这个图形是二元的，于是有二重循环</div><div class="line">for (int i = n - 1; i &gt;= 1; --i)</div><div class="line">    for (int j = 1; j &lt;= i; ++j)</div><div class="line">        d[i][j] = a[i][j] + max(d[i + 1][j], d[i + 1][j + 1]);</div></pre></td></tr></table></figure>
</li>
</ul>
<p>经过循环进行递推，最后的结果储存在数组d中</p>
<ul>
<li>记忆化搜索</li>
</ul>
<p>在递归的基础上对已经访问的数据进行标记，避免了重叠子问题的多次求解</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">// 初始化，方便之后的判断</div><div class="line">memset(d, -1, sizeof(d));</div><div class="line">int solve(int i, int j)</div><div class="line">&#123;</div><div class="line">    if (d[i][j] &gt;= 0) return d[i][j];</div><div class="line">    // 返回的时候顺便进行了“记忆”</div><div class="line">    return d[i][j] = a[i][j] + (i == n? 0: max(solve(i + 1,j), solve(i + 1, j + 1);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>基本的思想主要就是两种，而解题的关键则是确定状态以及指标函数了</p>
<h3 id="动态规划有哪些应用"><a href="#动态规划有哪些应用" class="headerlink" title="动态规划有哪些应用"></a>动态规划有哪些应用</h3><p>下面就分析一下讲过和做过的题目：</p>
<h4 id="数字三角形"><a href="#数字三角形" class="headerlink" title="数字三角形"></a>数字三角形</h4><ul>
<li>状态：(i, j)，位置</li>
<li>指标函数d(i, j)，从(i, j)出发的最大长度</li>
<li>决策：向下走的方向</li>
<li>状态转移方程<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">d[i][j] = a[i][j] + max(d[i + 1][j], d[i + 1][j + 1]);</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="嵌套矩形（有向无环图不固定起点终点的最大路径）"><a href="#嵌套矩形（有向无环图不固定起点终点的最大路径）" class="headerlink" title="嵌套矩形（有向无环图不固定起点终点的最大路径）"></a>嵌套矩形（有向无环图不固定起点终点的最大路径）</h4><ul>
<li>状态：i，结点</li>
<li>指标函数d(i)，从i出发的最大长度</li>
<li>决策：到下一个结点选择的边</li>
<li>状态转移方程<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">d[i] = max&#123;d[j]&#125;;  // j为和i相邻的结点</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="硬币问题（有向无环图固定起点终点的最大-小路径）"><a href="#硬币问题（有向无环图固定起点终点的最大-小路径）" class="headerlink" title="硬币问题（有向无环图固定起点终点的最大/小路径）"></a>硬币问题（有向无环图固定起点终点的最大/小路径）</h4><ul>
<li>状态：i，结点</li>
<li>指标函数d(i)，从i出发的最大/小长度</li>
<li>决策：到下一个结点选择的硬币的种类（硬币面值要比剩下的钱要小）</li>
<li>状态转移方程<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">d[i] = max(d[i], d[i - v[t]] + 1);  // t是要从大到小（最小数量）进行循环</div><div class="line">// 因此要求出所有的长度也必然要对i进行循环，也就是两层循环</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="多段图最短路径（多段决策）"><a href="#多段图最短路径（多段决策）" class="headerlink" title="多段图最短路径（多段决策）"></a>多段图最短路径（多段决策）</h4><ul>
<li>状态：(i, j)，行，列</li>
<li>指标函数d(i, j)，从(i, j)出发到最后一列的最大长度</li>
<li><strong>阶段</strong>：列</li>
<li>决策：到下一列走的方向</li>
<li>状态转移方程<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">d[i][j] = max(d[i + n][j + 1] + a[i][j]);  // n是三种决策的一个表示，通过循环来判断</div><div class="line">// 如果要按照字典序输出，则最好按照行数的大小进行排序</div></pre></td></tr></table></figure>
</li>
</ul>
<p>注意：<br>这个模型到完成的时候的步数已经确定了，所以可以根据每一步来当做阶段，阶段可以作为状态的一部分来简化模型</p>
<h4 id="0-1背包（多段决策）"><a href="#0-1背包（多段决策）" class="headerlink" title="0-1背包（多段决策）"></a>0-1背包（多段决策）</h4><ul>
<li>状态：(i, j)，当前层，背包剩余容量</li>
<li>指标函数d(i, j)，从(i, j)出发到最后一列的最大长度</li>
<li><strong>阶段</strong>：物品，因为每个物品都只有一个，也是“过了就没有了”，于是也可以用阶段表示</li>
<li>决策：是否把物品放入背包</li>
<li>状态转移方程<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// 这里j保证了不会有一开始选很大后面没位置选的情况，因为j会从0到最大容量进行循环</div><div class="line">// 前面的情况如果不是最优就会被排除</div><div class="line">// 也是对i对j两层循环</div><div class="line">d[i][j] = max(d[i + 1][j], d[i + 1][j - V[i]]);</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="龟兔赛跑"><a href="#龟兔赛跑" class="headerlink" title="龟兔赛跑"></a>龟兔赛跑</h4><ul>
<li>状态：i，充电站</li>
<li>指标函数d(i, j)，从i到j的过程中充一次电并且时间最短，T(i)到达i最小时间</li>
<li>决策：是否充电</li>
<li>状态转移方程<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 也是对i对j两层循环</div><div class="line">d[i] = min(T(i) + d(i, j), T(j));</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="最长上升子序列-LIS"><a href="#最长上升子序列-LIS" class="headerlink" title="最长上升子序列(LIS)"></a>最长上升子序列(LIS)</h4><ul>
<li>状态：i，序列长</li>
<li>指标函数d(i)，长度为i序列的最长长度</li>
<li>决策：新增加的数是否比原来最大的大</li>
<li>状态转移方程<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 也是对i对j两层循环</div><div class="line">d[i] = max(0, d(j) | j &lt; i, A[j] &lt; A[i]);</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="最长公共子序列-LCS"><a href="#最长公共子序列-LCS" class="headerlink" title="最长公共子序列(LCS)"></a>最长公共子序列(LCS)</h4><ul>
<li>状态：(i, j)，A，B序列长</li>
<li>指标函数d(i, j)，公共子序列最大长度</li>
<li>决策：两个序列是否正好是最后一位相同</li>
<li>状态转移方程<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">// i从0～m循环，j从0～n循环</div><div class="line">A[i] == B[j]</div><div class="line">d(i, j) = d(i - 1, j - 1) + 1;</div><div class="line"></div><div class="line">else</div><div class="line">d(i, j) = max(d(i - 1, j), d(i, j - 1));</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>动态转移方程的循环往往不止一层，这个地方一定要想清楚。</p>
<p>看了这么多，还是不会做题怎么办？</p>
<p>我也在苦恼这事呢（哭。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;动态规划初步&quot;&gt;&lt;a href=&quot;#动态规划初步&quot; class=&quot;headerlink&quot; title=&quot;动态规划初步&quot;&gt;&lt;/a&gt;动态规划初步&lt;/h1&gt;&lt;h2 id=&quot;开始之前&quot;&gt;&lt;a href=&quot;#开始之前&quot; class=&quot;headerlink&quot; title=&quot;开
    
    </summary>
    
      <category term="ACM" scheme="https://blog.patrickcty.cc/categories/ACM/"/>
    
    
      <category term="ACM" scheme="https://blog.patrickcty.cc/tags/ACM/"/>
    
      <category term="算法" scheme="https://blog.patrickcty.cc/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="难" scheme="https://blog.patrickcty.cc/tags/%E9%9A%BE/"/>
    
      <category term="动态规划" scheme="https://blog.patrickcty.cc/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>那些严重拖慢做题进度的题以及遇到的坑3</title>
    <link href="https://blog.patrickcty.cc/2017/02/20/%E9%82%A3%E4%BA%9B%E4%B8%A5%E9%87%8D%E6%8B%96%E6%85%A2%E5%81%9A%E9%A2%98%E8%BF%9B%E5%BA%A6%E7%9A%84%E9%A2%98%E4%BB%A5%E5%8F%8A%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%913/"/>
    <id>https://blog.patrickcty.cc/2017/02/20/那些严重拖慢做题进度的题以及遇到的坑3/</id>
    <published>2017-02-20T08:04:15.000Z</published>
    <updated>2017-03-06T00:27:23.064Z</updated>
    
    <content type="html"><![CDATA[<h1 id="那些严重拖慢做题进度的题以及遇到的坑3"><a href="#那些严重拖慢做题进度的题以及遇到的坑3" class="headerlink" title="那些严重拖慢做题进度的题以及遇到的坑3"></a>那些严重拖慢做题进度的题以及遇到的坑3</h1><p>依旧来自杭电</p>
<h2 id="1045-Fire-Net"><a href="#1045-Fire-Net" class="headerlink" title="1045 Fire Net"></a>1045 Fire Net</h2><blockquote>
<p>Suppose that we have a square city with straight streets. A map of a city is a square board with n rows and n columns, each representing a street or a piece of wall. </p>
<p>A blockhouse is a small castle that has four openings through which to shoot. The four openings are facing North, East, South, and West, respectively. There will be one machine gun shooting through each opening. </p>
<p>Here we assume that a bullet is so powerful that it can run across any distance and destroy a blockhouse on its way. On the other hand, a wall is so strongly built that can stop the bullets. </p>
<p>The goal is to place as many blockhouses in a city as possible so that no two can destroy each other. A configuration of blockhouses is legal provided that no two blockhouses are on the same horizontal row or vertical column in a map unless there is at least one wall separating them. In this problem we will consider small square cities (at most 4x4) that contain walls through which bullets cannot run through. </p>
<p>The following image shows five pictures of the same board. The first picture is the empty board, the second and third pictures show legal configurations, and the fourth and fifth pictures show illegal configurations. For this board, the maximum number of blockhouses in a legal configuration is 5; the second picture shows one way to do it, but there are several other ways. </p>
<p>Your task is to write a program that, given a description of a map, calculates the maximum number of blockhouses that can be placed in the city in a legal configuration. </p>
</blockquote>
<p>分析：</p>
<p>这是一道深度搜索的题，数据这么小是因为循环的次数太多了，也就是时间复杂度太大了</p>
<p>对于放置碉堡的顺序也有讲究，所以不能简单的从第一个开始扫一遍，而是要从每个点出发进行深度搜索，取最大的值才是最终的结果</p>
<p>深度搜索的好处是每次搜索的时候，前一次的状态都可以保留，并且最终状态回退也没那么麻烦</p>
<p>下面是代码：<br>参考了<a href="http://blog.csdn.net/u014235934/article/details/50879794" target="_blank" rel="external">这个链接</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div></pre></td><td class="code"><pre><div class="line">#include&lt;iostream&gt;</div><div class="line">#include&lt;cstdlib&gt;</div><div class="line">#include&lt;cstdio&gt;</div><div class="line">#include&lt;cmath&gt;</div><div class="line">#include&lt;cstring&gt;</div><div class="line">#include &lt;algorithm&gt;</div><div class="line"></div><div class="line">using namespace std;</div><div class="line"></div><div class="line">const int maxn = 10005;</div><div class="line"></div><div class="line">char a[5][5];</div><div class="line">// visit数组，表示每一格的状态，0为空位置，1为碉堡，2为墙</div><div class="line">// 实际上用a数组也可以，不过这里用的是整型数组</div><div class="line">int visit[5][5];</div><div class="line">// 设置为全局变量，便于函数中直接调用</div><div class="line">int mmax, cnt;</div><div class="line">int n;</div><div class="line"></div><div class="line">// 判断从(i, j)出发向上下左右是否会遇到碉堡</div><div class="line">// 也就是是否能在该店放置碉堡</div><div class="line">bool ffind(int i, int j)</div><div class="line">&#123;</div><div class="line">    for (int k = j; k &lt;= n; ++k)</div><div class="line">    &#123;</div><div class="line">        if (visit[i][k] == 2)</div><div class="line">            break;</div><div class="line">        if (visit[i][k] == 1)</div><div class="line">            return false;</div><div class="line">    &#125;</div><div class="line">    for (int k = j; k &gt; 0; --k)</div><div class="line">    &#123;</div><div class="line">        // 是visit而不是a</div><div class="line">        // 所以两个都用的坏处就是容易搞混</div><div class="line">        if (visit[i][k] == 2)</div><div class="line">            break;</div><div class="line">        if (visit[i][k] == 1)</div><div class="line">            return false;</div><div class="line">    &#125;</div><div class="line">    for (int k = i; k &lt;= n; ++k)</div><div class="line">    &#123;</div><div class="line">        if (visit[k][j] == 2)</div><div class="line">            break;</div><div class="line">        if (visit[k][j] == 1)</div><div class="line">            return false;</div><div class="line">    &#125;</div><div class="line">    for (int k = i; k &gt; 0; --k)</div><div class="line">    &#123;</div><div class="line">        // 横纵坐标不要搞错</div><div class="line">        if (visit[k][j] == 2)</div><div class="line">            break;</div><div class="line">        if (visit[k][j] == 1)</div><div class="line">            return false;</div><div class="line">    &#125;</div><div class="line">    return true;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">// 深度搜索</div><div class="line">void dfs()</div><div class="line">&#123;</div><div class="line">    // 每次都保存最大的状态</div><div class="line">    if (cnt &gt; mmax)</div><div class="line">        mmax = cnt;</div><div class="line">    for (int i = 1; i &lt;= n; ++i)</div><div class="line">    &#123;</div><div class="line">        for (int j = 1; j &lt;= n; ++j)</div><div class="line">        &#123;</div><div class="line">            // 没有放置碉堡并且可以放置碉堡</div><div class="line">            if (!visit[i][j] &amp;&amp; ffind(i, j))</div><div class="line">            &#123;</div><div class="line">                visit[i][j] = 1;</div><div class="line">                cnt++;</div><div class="line">                dfs();</div><div class="line">                // 整个搜索完了之后就状态回退</div><div class="line">                // 便于下一个点出发进行深度搜索</div><div class="line">                visit[i][j] = 0;</div><div class="line">                cnt--;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">int main()</div><div class="line">&#123;</div><div class="line"></div><div class="line">    while (scanf(&quot;%d&quot;, &amp;n) &amp;&amp; n != 0)</div><div class="line">    &#123;</div><div class="line">        for (int i = 1; i &lt;= n; ++i)</div><div class="line">        &#123;</div><div class="line">            getchar();</div><div class="line">            for (int j = 1; j &lt;= n; ++j)</div><div class="line">            &#123;</div><div class="line">                scanf(&quot;%c&quot;, &amp;a[i][j]);</div><div class="line">                if (a[i][j] == &apos;X&apos;)</div><div class="line">                    visit[i][j] = 2;</div><div class="line">                else</div><div class="line">                    visit[i][j] = 0;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        cnt = mmax = 0;</div><div class="line">        dfs();</div><div class="line">        printf(&quot;%d\n&quot;, mmax);</div><div class="line">    &#125;</div><div class="line">    return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;那些严重拖慢做题进度的题以及遇到的坑3&quot;&gt;&lt;a href=&quot;#那些严重拖慢做题进度的题以及遇到的坑3&quot; class=&quot;headerlink&quot; title=&quot;那些严重拖慢做题进度的题以及遇到的坑3&quot;&gt;&lt;/a&gt;那些严重拖慢做题进度的题以及遇到的坑3&lt;/h1&gt;&lt;p&gt;依旧
    
    </summary>
    
      <category term="ACM" scheme="https://blog.patrickcty.cc/categories/ACM/"/>
    
    
      <category term="坑爹" scheme="https://blog.patrickcty.cc/tags/%E5%9D%91%E7%88%B9/"/>
    
      <category term="为什么我这么菜呀" scheme="https://blog.patrickcty.cc/tags/%E4%B8%BA%E4%BB%80%E4%B9%88%E6%88%91%E8%BF%99%E4%B9%88%E8%8F%9C%E5%91%80/"/>
    
  </entry>
  
  <entry>
    <title>那些严重拖慢做题进度的题以及遇到的坑2</title>
    <link href="https://blog.patrickcty.cc/2017/02/19/%E9%82%A3%E4%BA%9B%E4%B8%A5%E9%87%8D%E6%8B%96%E6%85%A2%E5%81%9A%E9%A2%98%E8%BF%9B%E5%BA%A6%E7%9A%84%E9%A2%98%E4%BB%A5%E5%8F%8A%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%912/"/>
    <id>https://blog.patrickcty.cc/2017/02/19/那些严重拖慢做题进度的题以及遇到的坑2/</id>
    <published>2017-02-19T12:36:05.000Z</published>
    <updated>2017-03-06T00:27:23.064Z</updated>
    
    <content type="html"><![CDATA[<h1 id="那些严重拖慢做题进度的题以及遇到的坑2"><a href="#那些严重拖慢做题进度的题以及遇到的坑2" class="headerlink" title="那些严重拖慢做题进度的题以及遇到的坑2"></a>那些严重拖慢做题进度的题以及遇到的坑2</h1><p>杭电205X &amp;&amp; 206X</p>
<h2 id="A-B"><a href="#A-B" class="headerlink" title="A == B ?"></a>A == B ?</h2><blockquote>
<p>Give you two numbers A and B, if A is equal to B, you should print “YES”, or print “NO”.</p>
</blockquote>
<p>这一题是最坑的，AC率只有15.9%，主要原因就是题目条件说得太简略了，后面也有一些题是这样的，有一些时要注意的。</p>
<p>这里A和B并不是简单的数，可能是很长的数，长到没有变量类型可以表示，也可以是000000000000000000.00000000001这种形式很坑的数，所以并不是那么简单</p>
<p>不过Java里面有相应的模块，于是就很容易过了，而用C++就很难搞了</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.Scanner;</div><div class="line"><span class="keyword">import</span> java.math.BigDecimal;  <span class="comment">// 大的十进制数</span></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</div><div class="line">        Scanner in = <span class="keyword">new</span> Scanner(System.in);</div><div class="line">        <span class="keyword">while</span> (in.hasNext()) &#123;</div><div class="line">            BigDecimal A = in.nextBigDecimal;</div><div class="line">            BigDecimal B = in.nextBigDecimal;</div><div class="line">            <span class="keyword">if</span> (A.compareTo(B) == <span class="number">0</span>) &#123;</div><div class="line">                System.out.println(<span class="string">"YES"</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> &#123;</div><div class="line">                System.out.println(<span class="string">"NO"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>总结一下，这种涉及到位数很多的数用Java可以比较方便的解决。（得知道有相应的模块233）</p>
<h2 id="Rectangles"><a href="#Rectangles" class="headerlink" title="Rectangles"></a>Rectangles</h2><blockquote>
<p>Given two rectangles and the coordinates of two points on the diagonals of each rectangle,you have to calculate the area of the intersected part of two rectangles. its sides are parallel to OX and OY </p>
</blockquote>
<p>分析：</p>
<p>这一题知道算法就很简单，如果没想清楚就很坑了…比如说我…</p>
<p>方法一：</p>
<ul>
<li>重叠部分长度等于两者长度相加减去最大最小坐标之差，对于x，是下面这种，y也类似<blockquote>
<p>rela_x = fabs(x1 - x2) + fabs(x3 - x4) - (x[3] + x[0])  // x[3], x[0]是最大和最小的坐标</p>
</blockquote>
</li>
</ul>
<p>如果这个值小于零，说明不相交，大于零就是相应的长度</p>
<p>于是当相交的时候，面积就是rela_x * rela_y</p>
<p>方法二：</p>
<ul>
<li>重叠部分的长度总是四个坐标中中间两个的差值，于是面积有<blockquote>
<p>(x[2] - x[1]) * (y[3] - y[1])</p>
</blockquote>
</li>
</ul>
<p>关键就是要相处算法，死讨论情况是很难做出来的…</p>
<h2 id="A-B-Again"><a href="#A-B-Again" class="headerlink" title="A + B Again"></a>A + B Again</h2><blockquote>
<p>There must be many A + B problems in our HDOJ , now a new one is coming.<br>Give you two hexadecimal integers , your task is to calculate the sum of them,and print it in hexadecimal too.<br>Easy ? AC it !</p>
</blockquote>
<p>分析：</p>
<p>说白了就是十六进制的输入和输出，我不知道有相应的内容，于是手动转换…果不其然WA…</p>
<p>直接上代码吧…</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">#include&lt;stdio.h&gt;</div><div class="line">int main()</div><div class="line">&#123;</div><div class="line">    // 15位16进制相当于60位二进制，所以要开大一点</div><div class="line">    long long a, b;</div><div class="line">    // x占位符表示16进制</div><div class="line">    while(scanf(&quot;%llx %llx&quot;, &amp;a, &amp;b) != EOF)</div><div class="line">    &#123;</div><div class="line">        // 不能输出负的十六进制，所以这里要处理一下</div><div class="line">        if (a + b &lt; 0)</div><div class="line">            printf(&quot;-%llx\n&quot;, -(a + b));</div><div class="line">        else</div><div class="line">            printf(&quot;%llx\n&quot;, (a + b));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>你看吧，基础不牢，地动山摇…</p>
<h2 id="The-sum-problem"><a href="#The-sum-problem" class="headerlink" title="The sum problem"></a>The sum problem</h2><blockquote>
<p>Given a sequence 1,2,3,……N, your job is to calculate all the possible sub-sequences that the sum of the sub-sequence is M.</p>
</blockquote>
<p>分析：</p>
<p>题目本身是很简单的，是连续的数列，都不涉及到动态规划<br>但是隐藏了一个坑，那就是输入的数字范围很大，因此如果不控制复杂度就机器容易超时</p>
<p>在这里用解方程的思想来做：</p>
<ul>
<li>首项为f，末项为e，项数为n<blockquote>
<p>m = (f + e) * n / 2;<br>e - f + 1 = n;</p>
</blockquote>
</li>
</ul>
<p>因此可以用项数和m来表示f解出f，当f为1的时候，n可能取到的值最大，约为sqrt(2m)，也就是说子序列的长度不可能超多这个值，因此循环从1到sqrt(2m)就可以了，当解出来的f是正整数而且不超过范围说明就是所求</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">int len = floor(sqrt(2 * m));</div><div class="line">        double x = 0;</div><div class="line">        for (int i = len; i &gt;= 1; --i)</div><div class="line">        &#123;</div><div class="line">            x = (2.0 * m / i + 1 - i) * 0.5;</div><div class="line">            int a = floor(x);</div><div class="line">            x -= a;</div><div class="line">            if (x == 0 &amp;&amp; (a + i - 1) &lt;= n)</div><div class="line">                printf(&quot;[%d,%d]\n&quot;, a, a + i - 1);</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<p>补充：</p>
<p>floor()是数学函数，是求一个浮点数的不大于它的最大整数，返回值也是一个double型的浮点数<br>类似的还有:<br>ceil()：求一个浮点数的不小于它的最小整数,返回值也是一个double型的浮点数<br>round():求一个浮点数的四舍五入值，返回也是一个整数，也就是说看小数点第二位四舍五入</p>
<blockquote>
<p>例如：round(1.499999) is 1.000000</p>
</blockquote>
<p>感觉自己是一个木头脑袋…</p>
<h2 id="龟兔赛跑"><a href="#龟兔赛跑" class="headerlink" title="龟兔赛跑"></a>龟兔赛跑</h2><blockquote>
<p>据说在很久很久以前，可怜的兔子经历了人生中最大的打击——赛跑输给乌龟后，心中郁闷，发誓要报仇雪恨，于是躲进了杭州下沙某农业园卧薪尝胆潜心修炼，终于练成了绝技，能够毫不休息得以恒定的速度(VR m/s)一直跑。兔子一直想找机会好好得教训一下乌龟，以雪前耻。<br>最近正值HDU举办50周年校庆，社会各大名流齐聚下沙，兔子也趁此机会向乌龟发起挑战。虽然乌龟深知获胜希望不大，不过迫于舆论压力，只能接受挑战。<br>比赛是设在一条笔直的道路上，长度为L米，规则很简单，谁先到达终点谁就算获胜。<br>无奈乌龟自从上次获胜以后，成了名龟，被一些八卦杂志称为“动物界的刘翔”，广告不断，手头也有了不少积蓄。为了能够再赢兔子，乌龟不惜花下血本买了最先进的武器——“”小飞鸽”牌电动车。这辆车在有电的情况下能够以VT1 m/s的速度“飞驰”，可惜电池容量有限，每次充满电最多只能行驶C米的距离，以后就只能用脚来蹬了，乌龟用脚蹬时的速度为VT2 m/s。更过分的是，乌龟竟然在跑道上修建了很多很多（N个)的供电站，供自己给电动车充电。其中，每次充电需要花费T秒钟的时间。当然，乌龟经过一个充电站的时候可以选择去或不去充电。<br>比赛马上开始了，兔子和带着充满电的电动车的乌龟并列站在起跑线上。你的任务就是写个程序，判断乌龟用最佳的方案进军时，能不能赢了一直以恒定速度奔跑的兔子。</p>
</blockquote>
<p>分析：</p>
<p>这个题目条件十分逗逼，也是一个涉及到动态规划的，在这里先留个坑等看了动态规划的相关内容再回来补充</p>
<h2 id="Treasure-the-new-start-freshmen"><a href="#Treasure-the-new-start-freshmen" class="headerlink" title="Treasure the new start, freshmen!"></a>Treasure the new start, freshmen!</h2><blockquote>
<p>background:<br>A new semester comes , and the HDU also meets its 50th birthday. No matter what’s your major, the only thing I want to tell you is:”Treasure the college life and seize the time.” Most people thought that the college life should be colorful, less presure.But in actual, the college life is also busy and rough. If you want to master the knowledge learned from the book, a great deal of leisure time should be spend on individual study and practise, especially on the latter one. I think the every one of you should take the learning attitude just as you have in senior school.<br>“No pain, No Gain”, HDU also has scholarship, who can win it? That’s mainly rely on the GPA(grade-point average) of the student had got. Now, I gonna tell you the rule, and your task is to program to caculate the GPA.<br>If there are K(K &gt; 0) courses, the i-th course has the credit Ci, your score Si, then the result GPA is<br>GPA = (C1 <em> S1 + C2 </em> S2 +……+Ci * Si……) / (C1 + C2 + ……+ Ci……) (1 &lt;= i &lt;= K, Ci != 0)<br>If there is a 0 &lt;= Si &lt; 60, The GPA is always not existed.</p>
</blockquote>
<p>这题其实是水题，但是一直WA</p>
<p>有几个坑：</p>
<ul>
<li>学分和成绩都可以是小数，所以要用double类型的，这里题目中没有说出来，以后要长一点心！</li>
<li>break使用的时候要慎重！特别是在输入数据的时候，提前break了后面输入的数据就都是错的！</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;那些严重拖慢做题进度的题以及遇到的坑2&quot;&gt;&lt;a href=&quot;#那些严重拖慢做题进度的题以及遇到的坑2&quot; class=&quot;headerlink&quot; title=&quot;那些严重拖慢做题进度的题以及遇到的坑2&quot;&gt;&lt;/a&gt;那些严重拖慢做题进度的题以及遇到的坑2&lt;/h1&gt;&lt;p&gt;杭电
    
    </summary>
    
      <category term="ACM" scheme="https://blog.patrickcty.cc/categories/ACM/"/>
    
    
      <category term="坑爹" scheme="https://blog.patrickcty.cc/tags/%E5%9D%91%E7%88%B9/"/>
    
      <category term="为什么我这么菜呀" scheme="https://blog.patrickcty.cc/tags/%E4%B8%BA%E4%BB%80%E4%B9%88%E6%88%91%E8%BF%99%E4%B9%88%E8%8F%9C%E5%91%80/"/>
    
  </entry>
  
  <entry>
    <title>《爆裂鼓手》</title>
    <link href="https://blog.patrickcty.cc/2017/02/19/%E3%80%8A%E7%88%86%E8%A3%82%E9%BC%93%E6%89%8B%E3%80%8B/"/>
    <id>https://blog.patrickcty.cc/2017/02/19/《爆裂鼓手》/</id>
    <published>2017-02-19T10:12:58.000Z</published>
    <updated>2017-03-06T00:27:23.064Z</updated>
    
    <content type="html"><![CDATA[<h1 id="《爆裂鼓手》"><a href="#《爆裂鼓手》" class="headerlink" title="《爆裂鼓手》"></a>《爆裂鼓手》</h1><h2 id="开始之前"><a href="#开始之前" class="headerlink" title="开始之前"></a>开始之前</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ACM集训了这么多天，当我知道明天可以休息一天的时候，内心十分激动，于是在这个不用赶着A题的晚上，看了这部电影。</p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;说实话一下子真的难以下笔，于是我再次重新过了一次剧情这才对整个脉络有了进一步的了解。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;故事的主要人物是Andrew与Fletcher，核心冲突也是在他们两人之间展开的。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Fletcher是一个怪人，但是他是一个很厉害的指挥家。他会做出一些怪异的举动，比如进入课堂然后让其中的一些学生演奏相应的片段来挑人到Studio Bank中去而上课的老师却不敢说什么，他会故意逼走一个没走音的学生，他会凭借自己的喜好随意辱骂吼学生，也因此让Sean选择自杀…</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;但是根据他自己的话他是想激发学生的潜力，而那些承受不了的，那个被逼走的都是因为他们“不够优秀”。虽然他的教学方式以及思想行为都十分偏激，但不可否认的是他的初衷是比较好的，同时也确实有一定的成绩。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;令我比较在意的是，在他讲述肖恩·凯西的死的时候，他哭了出来，但是从后面我们可以知道他是死于抑郁症，Fletcher的哭究竟是因为真的为他感到惋惜还是因为自责呢？由于他是一个很怪的人，所以这个还真的不好判断。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;另一边，Andrew也是一个奇怪的人，他十分热爱打鼓，并有才华，但是他没有朋友，家人也对他不怎么重视，他对待感情的态度也很奇怪。在与Nicole见面的四次中，有三次他是很低落的，另外在成为core的时候他似乎忽视了Nicole的短信？我能明显感觉到Nicole并不是他真正所爱，感觉有一种自我的因素掺杂在感情里面——因为加入Studio Bank而表白，因为失去core的地位而分手，因为再次上台演出而又想和Nicole和好。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;音乐才是他真正喜爱的内容，为了音乐，或者是为了乐队中的地位，他拼命练习，连练到流血，出车祸都要继续，也正是因为太过偏执，他才不甘心失去core地位，他才与Fletcher积怨，虽然我觉得大家都讨厌Fletcher…也正是因为偏执，他才能忍受住Fletcher的“折磨”，一步一步达到要求，以及最后的爆发。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在那场演奏的事故中，Andrew打了Fletcher，他也因此被退学。比较值得注意的是当那个女律师（应该是吧？）让他为Fletcher的坏行为作证，在很长一番思想斗争之后他终于同意作证了，之后他放弃了音乐梦，Fletcher也不再是教师了。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;之后他们再次相遇并且“冰释前嫌”，Andrew再次上台演奏，结果是Fletcher是为了报复他的举报之仇，但是Andrew用自己的演奏予以反击并且在最后也打动了Fletcher，最终电影在Fletcher和Andrew二人的对峙演奏中结束了。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最后Andrew用自己行为让Fletcher认可了他，并且他自己的一口恶气也出了。鉴于Fletcher的古怪性格，他做出这种报复的行为也不算不可能，不过我之前一直以为Fletcher还是有感情的，所以当他报复的时候我还是很意外的。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;另外在维基百科上看到：</p>
<blockquote>
<p>安德鲁为此极度不满下，为了让佛列契改变主意而专心打鼓，打鼓打到两只手上的磨出的茧子流血。一刻起，安德鲁的性格发生了巨变，开始从彬彬有礼变的狂妄自大，甚至认为自己的女朋友妮可会拖自己的后腿而与她分手。</p>
</blockquote>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;尽管我并不是很认可这种说法，不过好像还是有一定的道理。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;总之这部电影还是看的很爽的，但是事后分析起来却感觉一脸懵逼，而且十分具有讽刺意味，可能是我没看懂吧…而且分析这个真的不比ACM轻松…</p>
<h2 id="评分"><a href="#评分" class="headerlink" title="评分"></a>评分</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;8/10。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;不知道这部电影想表达什么，可能是我没看懂。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;《爆裂鼓手》&quot;&gt;&lt;a href=&quot;#《爆裂鼓手》&quot; class=&quot;headerlink&quot; title=&quot;《爆裂鼓手》&quot;&gt;&lt;/a&gt;《爆裂鼓手》&lt;/h1&gt;&lt;h2 id=&quot;开始之前&quot;&gt;&lt;a href=&quot;#开始之前&quot; class=&quot;headerlink&quot; title=&quot;开
    
    </summary>
    
      <category term="电影" scheme="https://blog.patrickcty.cc/categories/%E7%94%B5%E5%BD%B1/"/>
    
    
      <category term="电影" scheme="https://blog.patrickcty.cc/tags/%E7%94%B5%E5%BD%B1/"/>
    
      <category term="看不懂" scheme="https://blog.patrickcty.cc/tags/%E7%9C%8B%E4%B8%8D%E6%87%82/"/>
    
  </entry>
  
  <entry>
    <title>ACM递推归纳</title>
    <link href="https://blog.patrickcty.cc/2017/02/18/ACM%E9%80%92%E6%8E%A8%E5%BD%92%E7%BA%B3/"/>
    <id>https://blog.patrickcty.cc/2017/02/18/ACM递推归纳/</id>
    <published>2017-02-17T16:53:50.000Z</published>
    <updated>2017-03-06T00:27:23.064Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ACM递推归纳"><a href="#ACM递推归纳" class="headerlink" title="ACM递推归纳"></a>ACM递推归纳</h1><p>递推是我众多不擅长的项目中的比较显著的一个…题目做得太艰难了。</p>
<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>递推中增加一个元素，在头部加和尾部加是同一种情况！！！因此考虑了尾部就不用考虑头部了！！！吃了好多亏orz。</p>
<h2 id="超级楼梯"><a href="#超级楼梯" class="headerlink" title="超级楼梯"></a>超级楼梯</h2><blockquote>
<p>有一楼梯共M级，刚开始时你在第一级，若每次只能跨上一级或二级，要走上第M级，共有多少种走法？</p>
</blockquote>
<p>分析：</p>
<p>因为只能走一级或者两级，所以最后一步有两种情况：</p>
<ol>
<li>走一步，剩下n-1和之前的相同</li>
<li>走两步，剩下n-2和之前的相同</li>
</ol>
<p>于是有：</p>
<blockquote>
<p>a[n] = a[n - 1] + a[n - 2]</p>
</blockquote>
<h2 id="一只小蜜蜂"><a href="#一只小蜜蜂" class="headerlink" title="一只小蜜蜂"></a>一只小蜜蜂</h2><blockquote>
<p>有一只经过训练的蜜蜂只能爬向右侧相邻的蜂房，不能反向爬行。请编程计算蜜蜂从蜂房a爬到蜂房b的可能路线数。<br>其中，蜂房的结构如下所示。<br><img src="https://okdkbnczs.qnssl.com/image/ACM/2044.jpg" alt="此处输入图片的描述"></p>
</blockquote>
<p>分析：</p>
<p>a到b的可能性本质上就是爬行b-a距离的可能性。而每一步有两个选择，右边或者斜右边，剩下的就和上面的几乎一样了，于是有：</p>
<blockquote>
<p>a[i] = a[i - 1] + a[i - 2]</p>
</blockquote>
<h2 id="LELE的RPG难题"><a href="#LELE的RPG难题" class="headerlink" title="LELE的RPG难题"></a>LELE的RPG难题</h2><blockquote>
<p>有排成一行的ｎ个方格，用红(Red)、粉(Pink)、绿(Green)三色涂每个格子，每格涂一色，要求任何相邻的方格不能同色，且首尾两格也不同色．求全部的满足要求的涂法.</p>
</blockquote>
<p>分析：</p>
<p>如果n增加一，就要根据增加前最后一个格子的颜色来判断了：</p>
<ul>
<li>如果最后一个不和第一个相同，也就是满足条件，就直接是a[n - 1]了，增加的一块只有一个选择</li>
<li>如果相同，那么前面n-2个一定是满足条件的，就是a[n - 2]，增加的一块有两个选择</li>
</ul>
<p>于是有：</p>
<blockquote>
<p>a[i] = a[i - 1] + 2 * a[i - 2]</p>
</blockquote>
<h2 id="骨牌铺方格"><a href="#骨牌铺方格" class="headerlink" title="骨牌铺方格"></a>骨牌铺方格</h2><blockquote>
<p>在2×n的一个长方形方格中,用一个1× 2的骨牌铺满方格,输入n ,输出铺放方案的总数.<br>例如n=3时,为2× 3方格，骨牌的铺放方案有三种</p>
</blockquote>
<p>分析：</p>
<p>这道题之前就把我卡住了，不过现在看到这么多难题之后反而觉得不难了…</p>
<p>因为骨牌的尺寸是1*2，因此横着摆放和竖着摆放是不同的，而竖着摆放一个就能填满，横着摆放两个才能填满，于是：</p>
<ul>
<li>当前情况是n-1的时候多加了一块竖着的</li>
<li>当前情况是n-2的时候多加了两块横着的</li>
</ul>
<p>于是有：</p>
<blockquote>
<p>a[i] = a[i - 1] + a[i - 2]</p>
</blockquote>
<h2 id="阿牛的EOF牛肉串"><a href="#阿牛的EOF牛肉串" class="headerlink" title="阿牛的EOF牛肉串"></a>阿牛的EOF牛肉串</h2><blockquote>
<p>长度为n的只由”E” “O” “F”三种字符组成的字符串（可以只有其中一种或两种字符，但绝对不能有其他字符）,阿牛同时禁止在串中出现O相邻的情况</p>
</blockquote>
<p>分析：</p>
<p>末尾有两种可能，是O或者是其他的</p>
<ul>
<li>是E或F，那么前面n-1就一定满足，即为a[n-1]</li>
<li>是O的话，O前一位一定是E或F，根据上面的，有a[n-2]</li>
</ul>
<p>综合起来，于是有：</p>
<blockquote>
<p>a[n] = 2 * (a[n - 1] + a[n - 2])</p>
</blockquote>
<h2 id="神、上帝以及老天爷"><a href="#神、上帝以及老天爷" class="headerlink" title="神、上帝以及老天爷"></a>神、上帝以及老天爷</h2><blockquote>
<p>首先，所有参加晚会的人员都将一张写有自己名字的字条放入抽奖箱中；<br>然后，待所有字条加入完毕，每人从箱中取一个字条；<br>最后，如果取得的字条上写的就是自己的名字，那么“恭喜你，中奖了！”</p>
<p>大家可以想象一下当时的气氛之热烈，毕竟中奖者的奖品是大家梦寐以求的Twins签名照呀！不过，正如所有试图设计的喜剧往往以悲剧结尾，这次抽奖活动最后竟然没有一个人中奖！</p>
<p>我的神、上帝以及老天爷呀，怎么会这样呢？</p>
<p>不过，先不要激动，现在问题来了，你能计算一下发生这种情况的概率吗？</p>
</blockquote>
<p>分析：</p>
<p>注：此处a[n]依旧是可能性而不是概率<br>这是一个错位排序的问题，增加一个元素考虑两种情况：</p>
<ul>
<li>前面n-1已经构成错排，那么直接把最后一个和前面n-1任意一个交换就可以了，即为(n - 1) * a[n - 1]</li>
<li>前面n-1不构成错排，新加的元素交换之后构成错排，于是有n-2个元素构成错排，而不构成的元素有n - 1种情况，即为(n -1) * a[n - 2]</li>
</ul>
<p>于是有：</p>
<blockquote>
<p>a[n] = (a[n - 1] + a[n - 2]) * (n - 1)</p>
</blockquote>
<h2 id="考新郎"><a href="#考新郎" class="headerlink" title="考新郎"></a>考新郎</h2><blockquote>
<p>假设一共有N对新婚夫妇,其中有M个新郎找错了新娘,求发生这种情况一共有多少种可能.</p>
</blockquote>
<p>分析：</p>
<p>这也是一道错排的题，和上面几乎一样。不过是M个错排，另外N-M个是组合</p>
<p>于是有：</p>
<blockquote>
<p>a[n] = (a[n - 1] + a[n - 2]) <em> (n - 1)<br>rst = a[n] </em> C(N,M)</p>
</blockquote>
<p>注：a[n]是错排的可能性，rst才是结果</p>
<h2 id="折线分割平面"><a href="#折线分割平面" class="headerlink" title="折线分割平面"></a>折线分割平面</h2><blockquote>
<p>我们看到过很多直线分割平面的题目，今天的这个题目稍微有些变化，我们要求的是n条折线分割平面的最大数目。比如，一条折线可以将平面分成两部分，两条折线最多可以将平面分成7部分，具体如下所示。</p>
</blockquote>
<p><img src="https://okdkbnczs.qnssl.com/image/ACM/2050.jpg" alt="此处输入图片的描述"></p>
<p>分析：</p>
<p>直线相交的时候每增加N个交点会增加N+1个平面<br>1.N条直线相交，平面数为</p>
<blockquote>
<p>1 + 1 + 2 + .. + n = 1 + n * (n + 1) / 2</p>
</blockquote>
<p>2.N组平行线相交<br>第N次添加的时候，会增加两个2N-2个交点，此时会增加两个2N-1个平面，此时平面数为</p>
<blockquote>
<p>1 + 2 + 6 + … + 4n - 2 = 2 <em> n </em> n + 1</p>
</blockquote>
<p>3.N组折线相交<br>相比上面，每组直线相交就会少一个平面，于是少N个平面，平面数就是上面的减N</p>
<blockquote>
<p>2 <em> n </em> n + 1 - n</p>
</blockquote>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>这部分代码并不难，难的是找出递推关系。</p>
<p>这么多组下来之后可以发现很多都是与前两次的状态有关的，因为根据特殊的条件可以分成两种情况讨论，不过找出这个讨论的条件也不是一件容易的事情。希望这次的踩坑能给之后的带来一些帮助吧！</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;ACM递推归纳&quot;&gt;&lt;a href=&quot;#ACM递推归纳&quot; class=&quot;headerlink&quot; title=&quot;ACM递推归纳&quot;&gt;&lt;/a&gt;ACM递推归纳&lt;/h1&gt;&lt;p&gt;递推是我众多不擅长的项目中的比较显著的一个…题目做得太艰难了。&lt;/p&gt;
&lt;h2 id=&quot;注意&quot;&gt;&lt;a
    
    </summary>
    
      <category term="ACM" scheme="https://blog.patrickcty.cc/categories/ACM/"/>
    
    
      <category term="坑爹" scheme="https://blog.patrickcty.cc/tags/%E5%9D%91%E7%88%B9/"/>
    
  </entry>
  
  <entry>
    <title>那些严重拖慢做题进度的题以及遇到的坑</title>
    <link href="https://blog.patrickcty.cc/2017/02/17/%E9%82%A3%E4%BA%9B%E4%B8%A5%E9%87%8D%E6%8B%96%E6%85%A2%E5%81%9A%E9%A2%98%E8%BF%9B%E5%BA%A6%E7%9A%84%E9%A2%98%E4%BB%A5%E5%8F%8A%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/"/>
    <id>https://blog.patrickcty.cc/2017/02/17/那些严重拖慢做题进度的题以及遇到的坑/</id>
    <published>2017-02-16T16:44:51.000Z</published>
    <updated>2017-03-06T00:27:23.064Z</updated>
    
    <content type="html"><![CDATA[<h1 id="那些严重拖慢做题进度的题以及遇到的坑"><a href="#那些严重拖慢做题进度的题以及遇到的坑" class="headerlink" title="那些严重拖慢做题进度的题以及遇到的坑"></a>那些严重拖慢做题进度的题以及遇到的坑</h1><p>杭电204X</p>
<h2 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h2><p>这一题的关键是用字符数组来捕捉每一位的数，因为存在十进制以上的数，还要捕捉特定的那些字母，对于其他的就可以用数字和字符的关系来进行转换。</p>
<p>还有一个细节就是负号，取余的时候用正数会比较方便，因此最后不要忘记负号。</p>
<p>关键代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">switch (n % r)</div><div class="line">&#123;</div><div class="line">    case 10:</div><div class="line">        a[i] = &apos;A&apos;;</div><div class="line">        break;</div><div class="line">    case 11:</div><div class="line">        a[i] = &apos;B&apos;;</div><div class="line">        break;</div><div class="line">    case 12:</div><div class="line">        a[i] = &apos;C&apos;;</div><div class="line">        break;</div><div class="line">    case 13:</div><div class="line">        a[i] = &apos;D&apos;;</div><div class="line">        break;</div><div class="line">    case 14:</div><div class="line">        a[i] = &apos;E&apos;;</div><div class="line">        break;</div><div class="line">    case 15:</div><div class="line">        a[i] = &apos;F&apos;;</div><div class="line">        break;</div><div class="line">    default:</div><div class="line">        a[i] = &apos;0&apos; + n % r;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>遇到的坑：</p>
<ul>
<li>一开始没有加default，为了图方便最后一个case没加break，后来加了default之后没意识到…狠狠坑了我一把</li>
<li>做题的时候思路要清晰，需要对余数大于小于10进行分类讨论，一个default就直接包含其中一种情况了</li>
<li>当感觉难以下手的时候不妨在纸上写下自己的思路！！！</li>
</ul>
<h2 id="一张桌子吃饭的并查集问题"><a href="#一张桌子吃饭的并查集问题" class="headerlink" title="一张桌子吃饭的并查集问题"></a>一张桌子吃饭的并查集问题</h2><p>并查集这个其实不是很难，只要把模板套上去就可以了</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">int fa[maxn];  // fa是father的简写</div><div class="line"></div><div class="line">void init(int n)</div><div class="line">&#123;</div><div class="line">    for (int i = 0; i &lt; n; ++i)</div><div class="line">    &#123;</div><div class="line">        fa[i] = i;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">int find(int n)</div><div class="line">&#123;</div><div class="line">    if (fa[n] == n)</div><div class="line">        return n;</div><div class="line">    return fa[n] = find(fa[n]);  // 赋值语句的前半句可以减少递归次数从而提高程序的效率</div><div class="line">&#125;</div><div class="line"></div><div class="line">void connect(int x, int y)</div><div class="line">&#123;</div><div class="line">    x = fa[x];</div><div class="line">    y = fa[y];</div><div class="line">    if (x != y)</div><div class="line">        fa[x] = y;  // 连接的是头头</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>遇到的坑：</p>
<ul>
<li>要注意的是实际问题的编号很可能不是从0开始的，所以init函数循环可能要改一下才符合实际情况，今天就是这个地方一直WA</li>
</ul>
<h2 id="输出杨辉三角"><a href="#输出杨辉三角" class="headerlink" title="输出杨辉三角"></a>输出杨辉三角</h2><p>这一题其实并不难，我是用杨辉三角的每个数的公式做的，也就是用到了排列组合的性质，然而排列组合的公式挖了个大坑</p>
<p>组合数公式：Cn,m = An,m / m!</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">if (n - m &lt; m)</div><div class="line">    m = n - m;</div><div class="line">for (int i = 0; i &lt; m; ++i)</div><div class="line">    rst *= (m - i);</div><div class="line">for (int j = 2; j &lt;= m; ++j)</div><div class="line">    rst /= m;</div><div class="line">retrurn rst;</div></pre></td></tr></table></figure>
<p>遇到的坑：</p>
<ul>
<li>主要是忘记公式了，再加上思维很混乱于是就一直都有问题</li>
</ul>
<h2 id="求集合中的A-B"><a href="#求集合中的A-B" class="headerlink" title="求集合中的A-B"></a>求集合中的A-B</h2><p>其实挺简单的，多来几个循环进行判断就可以了</p>
<p>遇到的坑：</p>
<ul>
<li>初始化的两个输入值中可以有一个为零的，所以在输入的判断中就不能直接<code>while (scanf(&quot;%d %d&quot;, &amp;n, &amp;m) != EOF &amp;&amp; m &amp;&amp; n)</code>了，而是要在while中进行break:<code>if (n == 0 &amp;&amp; m == 0) break;</code></li>
</ul>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>今天做题的效率十分低下，就是因为出现了这些大大小小的问题，希望以后做题的时候思路可以更清晰一点，不要再在这些坑爹的问题上耽误时间了，吃一堑长一智！</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;那些严重拖慢做题进度的题以及遇到的坑&quot;&gt;&lt;a href=&quot;#那些严重拖慢做题进度的题以及遇到的坑&quot; class=&quot;headerlink&quot; title=&quot;那些严重拖慢做题进度的题以及遇到的坑&quot;&gt;&lt;/a&gt;那些严重拖慢做题进度的题以及遇到的坑&lt;/h1&gt;&lt;p&gt;杭电204X
    
    </summary>
    
      <category term="ACM" scheme="https://blog.patrickcty.cc/categories/ACM/"/>
    
    
      <category term="坑爹" scheme="https://blog.patrickcty.cc/tags/%E5%9D%91%E7%88%B9/"/>
    
      <category term="为什么我这么菜呀" scheme="https://blog.patrickcty.cc/tags/%E4%B8%BA%E4%BB%80%E4%B9%88%E6%88%91%E8%BF%99%E4%B9%88%E8%8F%9C%E5%91%80/"/>
    
  </entry>
  
  <entry>
    <title>求最大公约数和最小公倍数</title>
    <link href="https://blog.patrickcty.cc/2017/02/15/%E6%B1%82%E6%9C%80%E5%A4%A7%E5%85%AC%E7%BA%A6%E6%95%B0%E5%92%8C%E6%9C%80%E5%B0%8F%E5%85%AC%E5%80%8D%E6%95%B0/"/>
    <id>https://blog.patrickcty.cc/2017/02/15/求最大公约数和最小公倍数/</id>
    <published>2017-02-15T14:17:11.000Z</published>
    <updated>2017-03-06T00:27:23.064Z</updated>
    
    <content type="html"><![CDATA[<h1 id="求最大公约数和最小公倍数"><a href="#求最大公约数和最小公倍数" class="headerlink" title="求最大公约数和最小公倍数"></a>求最大公约数和最小公倍数</h1><h2 id="最小公倍数"><a href="#最小公倍数" class="headerlink" title="最小公倍数"></a>最小公倍数</h2><p>公式：</p>
<blockquote>
<p>最小公倍数 = x * y / x与y的最大公约数</p>
</blockquote>
<h2 id="最大公约数"><a href="#最大公约数" class="headerlink" title="最大公约数"></a>最大公约数</h2><ul>
<li>辗转相除法：用大的数除以小的数，如果有余数，就用小的数除以余数，一直到没有余数，这时候当前的除数也就是上一轮的余数为最大公约数</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">if (x &lt; y)</div><div class="line">    swap(x, y);</div><div class="line">while (x % y)</div><div class="line">&#123;</div><div class="line">    c = x % y;</div><div class="line">    x = y;</div><div class="line">    y = c;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最大公约数就是y， 也就是除尽之前的余数</p>
<ul>
<li>相减法：用大的数减小的数，如果相减后的结果不和小的数相同，则继续相减，得到相同的结果就是余数</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">if (x &lt; y)</div><div class="line">    swap(x, y);</div><div class="line">while (x - y != y)</div><div class="line">&#123;</div><div class="line">    c = x - y;</div><div class="line">    x = y;</div><div class="line">    y = c;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最大公约数就是y</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;求最大公约数和最小公倍数&quot;&gt;&lt;a href=&quot;#求最大公约数和最小公倍数&quot; class=&quot;headerlink&quot; title=&quot;求最大公约数和最小公倍数&quot;&gt;&lt;/a&gt;求最大公约数和最小公倍数&lt;/h1&gt;&lt;h2 id=&quot;最小公倍数&quot;&gt;&lt;a href=&quot;#最小公倍数&quot; c
    
    </summary>
    
      <category term="算法" scheme="https://blog.patrickcty.cc/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://blog.patrickcty.cc/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>ACM输入输出套路汇总</title>
    <link href="https://blog.patrickcty.cc/2017/02/15/ACM%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E5%A5%97%E8%B7%AF%E6%B1%87%E6%80%BB/"/>
    <id>https://blog.patrickcty.cc/2017/02/15/ACM输入输出套路汇总/</id>
    <published>2017-02-15T13:48:15.000Z</published>
    <updated>2017-03-06T00:27:23.064Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ACM输入输出套路汇总"><a href="#ACM输入输出套路汇总" class="headerlink" title="ACM输入输出套路汇总"></a>ACM输入输出套路汇总</h1><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p>注意输入不要死套模板！比如刚才有道题输入可以有一个为零，但是我套模板就卡了半天！一直没发现错误！</p>
<h3 id="输入中有一-多个n来指示输入的情况"><a href="#输入中有一-多个n来指示输入的情况" class="headerlink" title="输入中有一/多个n来指示输入的情况"></a>输入中有一/多个n来指示输入的情况</h3><ul>
<li>输入的都是数字/字符</li>
</ul>
<p>这个就比较简单了，直接两层循环读取输入的数字</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">scanf(&quot;%d&quot;, &amp;n);</div><div class="line">while (n--)</div><div class="line">&#123;</div><div class="line">    scanf(&quot;%d&quot;, &amp;num);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>后面读取的是字符串</li>
</ul>
<p>这个地方容易遇到坑，字符串一直都是比较麻烦的</p>
<p>1.用gets()读取字符串<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">char a[1000];</div><div class="line">gets(a);</div></pre></td></tr></table></figure></p>
<p>2.用scanf读取字符串<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">char a[1000];</div><div class="line">scanf(&quot;%s&quot;, a);</div></pre></td></tr></table></figure></p>
<p>但是注意两者都是有坑的！</p>
<p>gets()输入的时候如果前面还有输入的就要加一个getchar()<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">scanf(&quot;%d&quot;, &amp;n);</div><div class="line">getchar()</div><div class="line">char a[1000];</div><div class="line">gets(a);</div></pre></td></tr></table></figure></p>
<p>原因是gets会把前面scanf输入没有读取的换行符也当做需要的读取进去，这就导致读取的内容“少一行”，所以要用一个getchar来吸收这个换行符。<br>还有就是gets由于<a href="http://www.cnblogs.com/ngnetboy/archive/2012/11/26/2789410.html" target="_blank" rel="external">存在安全隐患</a>被废除了，用倒是可以用，不过官方不推荐，所以最好不要用，不过gets比fgets方便一些，竞赛的话，看个人喜好了。</p>
<p>关于fgets</p>
<blockquote>
<p>定义函数：har <em> fgets(char </em> s, int size, FILE * stream);</p>
<p>函数说明：fgets()用来从参数stream 所指的文件内读入字符并存到参数s 所指的内存空间, 直到出现换行字符、读到文件尾或是已读了<strong><em>size-1</em></strong> 个字符为止, 最后会加上NULL 作为字符串结束.</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">char a[1000];</div><div class="line">fgets(a, 1000, stdin);  // 这家伙把换行符也读进去了，输出的时候就不用加换行符了</div></pre></td></tr></table></figure>
<p>scanf输入的时候字符串中<strong>不能有空格</strong>！不然就会在空格处停下来，有空格的就不考虑scanf.</p>
<h3 id="没有设有特定的提示输入来告诉你输入多少"><a href="#没有设有特定的提示输入来告诉你输入多少" class="headerlink" title="没有设有特定的提示输入来告诉你输入多少"></a>没有设有特定的提示输入来告诉你输入多少</h3><p>这时候就要用输入函数的返回值来判断了</p>
<ul>
<li>scanf</li>
</ul>
<p>当输入成功的时候，返回值是输入成功的数字的大小，部分成功也会返回成功个数。而发生错误或者end of file则返回EOF</p>
<p>所以可以这样判断:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">while (scanf(&quot;%d %d&quot;, &amp;m, &amp;n) == 2 &amp;&amp; m &amp;&amp; n)</div><div class="line">&#123;&#125;</div></pre></td></tr></table></figure></p>
<p>或者:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">while (scanf(&quot;%d&quot;, &amp;m) != EOF)</div><div class="line">&#123;&#125;</div></pre></td></tr></table></figure></p>
<p>上面这种也可以简写为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">while (~scanf(&quot;%d&quot;, &amp;m))</div><div class="line">&#123;&#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>gets/fgets</li>
</ul>
<p>这两个函数在成功的时候都会返回相应的指针，也就是数组名， 而失败就会返回NULL，因此可以:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">while (gets(a))</div><div class="line">&#123;&#125;</div></pre></td></tr></table></figure></p>
<p>输入的话基本就是这两大类了，其中根据不同的情况再做改变，比如说输入0结束，这就很简单了，稍微改一下就可以了。</p>
<h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p>输出的话主要是要判断是不是最后一个元素，像一行输出特别多组数据的时候特别要注意，因为涉及到换行。</p>
<p>下面这种就是缩短了循环，把特殊情况独立出来了，这样就避免了判断，当然判断i是不是等于n-1也是可以的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">for (int i = 0; i &lt; n - 1; ++i)</div><div class="line">&#123;</div><div class="line">    printf(&quot;%d &quot;, a[i]);</div><div class="line">&#125;</div><div class="line">printf(&quot;%d\n&quot;, a[n - 1]);</div></pre></td></tr></table></figure></p>
<p>还有的是最后一行不留换行等等，一定要看清楚题！不然很容易踩坑！暂时想到这么多，后面还有新的再补充！</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;ACM输入输出套路汇总&quot;&gt;&lt;a href=&quot;#ACM输入输出套路汇总&quot; class=&quot;headerlink&quot; title=&quot;ACM输入输出套路汇总&quot;&gt;&lt;/a&gt;ACM输入输出套路汇总&lt;/h1&gt;&lt;h2 id=&quot;输入&quot;&gt;&lt;a href=&quot;#输入&quot; class=&quot;head
    
    </summary>
    
      <category term="ACM" scheme="https://blog.patrickcty.cc/categories/ACM/"/>
    
    
      <category term="ACM" scheme="https://blog.patrickcty.cc/tags/ACM/"/>
    
  </entry>
  
  <entry>
    <title>《偷影子的人》</title>
    <link href="https://blog.patrickcty.cc/2017/02/13/%E3%80%8A%E5%81%B7%E5%BD%B1%E5%AD%90%E7%9A%84%E4%BA%BA%E3%80%8B/"/>
    <id>https://blog.patrickcty.cc/2017/02/13/《偷影子的人》/</id>
    <published>2017-02-13T04:25:27.000Z</published>
    <updated>2017-03-06T00:27:23.064Z</updated>
    
    <content type="html"><![CDATA[<h1 id="《偷影子的人》"><a href="#《偷影子的人》" class="headerlink" title="《偷影子的人》"></a>《偷影子的人》</h1><h2 id="开始之前"><a href="#开始之前" class="headerlink" title="开始之前"></a>开始之前</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;和《追风筝的人》《摆渡人》一样，这本书也是十分畅销的欧美小说，并且这三本还被并列提到，但是我感觉无论是从内从还是题材上，《追风筝的人》比起另外两本都更胜一筹。</p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;男主小时候就是一个普通的小孩子，但是他有一个神奇的能力——与影子交谈。总感觉“我”是一个十分奇怪的人，可能也是因为爸爸的离开，以及进入新的环境。能力让“我”结识了吕克，伊凡，克蕾尔…并且用这个能力帮助了其他人。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;比较有趣的一个人物就是伊凡了，伊凡一开始是学校的一名保安，他在操场上解救了受罚打扫操场的“我”，伊凡也是“我”用能力第一个帮助的人，也是“我”的第一个朋友。不过伊凡这个人还是有一定的疑点，每次伊凡与“我”见面的时候都只有两个人，而且那次工具房的火灾中，也只有“我”记得伊凡的存在，最可疑的是，最后在凌晨三四点那个时候，伊凡出现在了学校操场，那个老地方，来引导我走出内心的彷徨。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;回想这些疑点，我比较同意伊凡是“我”内心的投影这个说法，他总是在“我”最迷茫最无助的时候出现，特别是最后一次的时间，出现得太奇怪，不过也不排除是作者为了填坑而强行增加的段落…</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;另外一个比较重要的人物就是苏菲了，苏菲是“我”的前女朋友，但是由于“我”不能承受起这份感情，他们分手了，苏菲在分手的时候的那张字条上的话真的十分让人触动。也是那么体贴，让我想起了你的那番话，即使分手了，他们还是好朋友，还能一起吃饭，一起玩耍。而我呢，我却选择不再联系，相忘于江湖。这应该也不是一件坏事吧，正是因为爱的深沉才难以放下，正是因为距离，所以做朋友，就更难找到一直保持关系的理由。就像苏菲最后找到了吕克，我希望你也能找到爱你的，让你快快乐乐的那个人。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最后克雷尔这个结局还是很棒的，不过我总感觉很扯，这么多年的默默守候，这么多年的等待一个杳无音讯的人，甚至是小时候的一个人。尽管小说中刻画得很美好，不过现实中真的会这么顺利么？不过小说毕竟是小说，能给予我们温暖与感动不就够了么？</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;看的时候，看完都感觉心里暖暖的，这样的小说，似乎也不错呢～–</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;《偷影子的人》&quot;&gt;&lt;a href=&quot;#《偷影子的人》&quot; class=&quot;headerlink&quot; title=&quot;《偷影子的人》&quot;&gt;&lt;/a&gt;《偷影子的人》&lt;/h1&gt;&lt;h2 id=&quot;开始之前&quot;&gt;&lt;a href=&quot;#开始之前&quot; class=&quot;headerlink&quot; titl
    
    </summary>
    
      <category term="书籍" scheme="https://blog.patrickcty.cc/categories/%E4%B9%A6%E7%B1%8D/"/>
    
    
      <category term="温暖" scheme="https://blog.patrickcty.cc/tags/%E6%B8%A9%E6%9A%96/"/>
    
      <category term="爱情" scheme="https://blog.patrickcty.cc/tags/%E7%88%B1%E6%83%85/"/>
    
  </entry>
  
  <entry>
    <title>《Heidi》</title>
    <link href="https://blog.patrickcty.cc/2017/02/11/%E3%80%8AHeidi%E3%80%8B/"/>
    <id>https://blog.patrickcty.cc/2017/02/11/《Heidi》/</id>
    <published>2017-02-11T09:23:30.000Z</published>
    <updated>2017-03-06T00:27:23.064Z</updated>
    
    <content type="html"><![CDATA[<h1 id="《海蒂和爷爷》"><a href="#《海蒂和爷爷》" class="headerlink" title="《海蒂和爷爷》"></a>《海蒂和爷爷》</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;每个人的心都是一座孤岛，但是就是有这样的存在，能连接孤岛，但相反也同样会有这样的存在让孤岛更加封闭。而海蒂无疑是前一种。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;其实本片的原名是《Heidi》，我也觉得这样更为合理，因为Heidi就是那个连接孤岛的人。</p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我觉得海蒂某种方面上和《摆渡人》中的迪伦是有点相像的，她们都是那么善良，那么乐观。即使被姨妈抛弃到爷爷这里，即使一开始不被爷爷待见，他还是留在爷爷身边。就这样，她慢慢打开了爷爷的心，让爷爷一开始的想把她送走，到照顾她，为她打造椅子，疼爱她…</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当海蒂与爷爷以及朋友彼得过着无拘无束的日子的时候，把海蒂抛弃的姑妈又把海蒂骗到豪宅里去了，为了可怜的赏钱。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在豪宅中，海蒂认识了因为疾病而不能走路的大小姐克拉拉，海蒂的出现，让克拉拉的笑容重新洋溢在脸上。但是她并不快乐，她被困在豪宅中了，即使学会了礼仪，即使学会认字，即使吃的住的都是最好的，他都不快乐，她是一只鸟，属于天空，而豪宅就像一只笼子，将她困住了，思念成疾的她甚至梦游在门口眺望着故乡。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最后她终于回到了故乡，并且之后也把克拉拉“带”了过来，在一次出去游玩的过程中，因为轮椅被彼得推下悬崖，克拉拉不能移动，但是看到了飞着的蝴蝶，克拉拉奇迹般的站了起来，并且又能再次再地上行走。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这部电影人物比较多，但是又完全不显得杂乱，即使只出现过很少的时间的任务，性格特点也十分凸显。</p>
<h2 id="人物"><a href="#人物" class="headerlink" title="人物"></a>人物</h2><h3 id="海蒂"><a href="#海蒂" class="headerlink" title="海蒂"></a>海蒂</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;她善良，包容，她愿意把自己的一半午餐分给皮特让他不打山羊。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;她率真向往自由，电影开始的时候，就有海蒂脱下她一身的洋装，在草丛中奔跑～这个与她回到爷爷身边的时候的情景相互呼应～</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;她关心他人，在豪宅的时候，“偷面包”的情景多次出现，而她并不是因为没见过世面，而是记住了彼得的奶奶不能吃硬面包于是想把她吃的软面包送给她，真是一个体贴的孩子~</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;她打开了爷爷的内心，打开了克拉拉的内心。他的笑容如冬日的卵样，夏日的清风，直击人心。她用她的笑容默默地改变这个世界，所幸世界没有改变她的笑容～</p>
<h3 id="爷爷"><a href="#爷爷" class="headerlink" title="爷爷"></a>爷爷</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;爷爷是一个被人误解的人，他独自生活在山上，一直被人当怪物看待。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;但事实上爷爷是一个很棒的人，他勤恳，善良，理解他人。他只是封闭了他的心灵，我想这很有可能是他的老伴还有女儿女婿的过世所造成的。所幸海蒂出现了，海蒂打开了他封闭的内心，他愿意接纳他人了，甚至还变得风趣了，最后看他撩克拉拉的奶奶的时候，真的好暖啊哈哈。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最令我印象深刻的有两处，第一处是海蒂听彼得说爷爷杀了人之后的怀疑，但是爷爷只是镇定地说了下面这句话：</p>
<blockquote>
<p>人们就喜欢谈论些坏的东西，你需要自己做判断，相信自己的眼睛和耳朵还是相信那些流言？</p>
</blockquote>
<p><img src="https://okdkbnczs.qnssl.com/image/movies/heidiC1.png" alt="爷爷的话1"><br><img src="https://okdkbnczs.qnssl.com/image/movies/heidiC.png" alt="爷爷的话2"></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;另一处就是当彼得把克拉拉的轮椅推下悬崖之后爷爷察觉到了对彼得说话的场景，真的是帅爆了！！！</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;爷爷忍受着寂寞，无视着他人的眼光，封闭地过着，但幸运的是他遇到了海蒂，他放开了他自己。真的很让人欣慰。</p>
<h3 id="克拉拉"><a href="#克拉拉" class="headerlink" title="克拉拉"></a>克拉拉</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;克拉拉不是脾气古怪，只是太孤独了。没有同龄人的陪伴，没有了父母的陪伴，被困在家里，造就了她内心的忧郁。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;因此当她知道海蒂要离开时的，是那么的失态，那么的耍大小姐脾气，她的痛苦，恐怕只有她自己才能理解。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;不过正是有了海蒂，她的痛苦才会被隐藏，而海蒂走的时候，那种绝望，又再次扑面而来。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;其实她是一个性格很好的人，她也有着温暖的笑容~</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;而在阿尔卑斯山上，看到那一望无际的美景，看到飞舞的蝴蝶，再加上友情，她的伤终于痊愈，她也勇敢的站了起来，终于她克服了内心的障碍，重新开始了行走~</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;丢掉了轮椅的同时，锁着内心的锁链也丢掉了，她完全打开了内心，她重新找到了自我~</p>
<h3 id="彼得"><a href="#彼得" class="headerlink" title="彼得"></a>彼得</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这是一个比较矛盾的人，他偷吃海蒂的东西，他在海蒂被姨妈强行接走的时候不向爷爷说情况，他把克拉拉的轮椅推下悬崖。他性格古怪，嫉妒，自我。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;不过从背后我们可以看出彼得并不是那么一无是处，至少他陪海蒂度过了那么多个白天，他是海蒂的好朋友。而我相信海蒂一定也让他改变了不少~</p>
<h3 id="姨妈"><a href="#姨妈" class="headerlink" title="姨妈"></a>姨妈</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;姨妈出现的场景虽然不多，但总是很狼狈，放下海蒂之后狼狈地逃走，狼狈地被爷爷赶走，狼狈地抓着海蒂逃走233。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;她为了一点钱不惜让海蒂，爷爷，彼得得生活都改变了。自私，不负责任，两面三刀的形象跃然于荧幕之上。</p>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;影片真的让人觉得暖暖的~最后的结局也十分棒~情节也比较紧凑，真的有好多可以回味的内容~</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;还有克拉拉妹子也很漂亮呀~</p>
<p><img src="https://okdkbnczs.qnssl.com/image/movies/heidi2.jpg" alt="原来妹子这么高～"></p>
<h2 id="评分"><a href="#评分" class="headerlink" title="评分"></a>评分</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;9/10。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;剧情丰富，情节温暖，人物性格丰满，好片~</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;《海蒂和爷爷》&quot;&gt;&lt;a href=&quot;#《海蒂和爷爷》&quot; class=&quot;headerlink&quot; title=&quot;《海蒂和爷爷》&quot;&gt;&lt;/a&gt;《海蒂和爷爷》&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前
    
    </summary>
    
      <category term="电影" scheme="https://blog.patrickcty.cc/categories/%E7%94%B5%E5%BD%B1/"/>
    
    
      <category term="电影" scheme="https://blog.patrickcty.cc/tags/%E7%94%B5%E5%BD%B1/"/>
    
  </entry>
  
</feed>
