<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[《头号玩家》——我为什么觉得它那么精彩]]></title>
      <url>https://blog.patrickcty.cc/2018/04/07/%E3%80%8A%E5%A4%B4%E5%8F%B7%E7%8E%A9%E5%AE%B6%E3%80%8B%E2%80%94%E2%80%94%E6%88%91%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A7%89%E5%BE%97%E5%AE%83%E9%82%A3%E4%B9%88%E7%B2%BE%E5%BD%A9/</url>
      <content type="html"><![CDATA[<p>前几天我跟风去看了最近大热的电影《头号玩家》，整部电影的观感可以用一个词来形容：酣畅淋漓！那么究竟为什么我会觉得它那么精彩呢？</p>
<p>首先就像知乎里面的大家说的那样：认同感。从小到大，对于游戏，大多数人的印象都是精神鸦片以及类似的贬义词。但这整部电影是以游戏世界绿洲为背景的，这种设定是对游戏无声的肯定，也切切实实让我们也有了认同感，游戏在这里并不是鸦片，而是整个世界中不可或缺甚至是最重要的部分。</p>
<p>其次就是主角的身份了，主角是一个普通人，就和我们大家一样，这一点抹掉了通常的这种题材电影中主角和观众的距离。而主角的神勇同时也在表明着我们也能一样神勇，这种映射使得影片的代入感很强，观看时沉浸度也很高，更容易体会主角的感情以及电影的内容。</p>
<p>再者则是爱情与友情了，在游戏中也一样能收获到甜美的爱情以及坚定的友情。就像上一点所说，主角离我们很近，主角的爱情和友情一样会被映射到我们自己的身上。试问这样的爱情和友情谁不想拥有呢（特别对于单身狗）？在这里的爱情尤其的甜，特别是主角和女主在现实生活中见面的时候，对我来说这个场景甚至比许多爱情电影还要甜。为什么呢？因为虚拟场景中的恋爱是和现实中的恋爱有着巨大的鸿沟的，这种鸿沟的跨越，难道不令人激动么！更何况游戏中的妹子在现实中不仅是妹子而且还那么美丽而性感（醒醒，在网络中找不到的！）！</p>
<p>除此之外，游戏中的各种彩蛋也是加分项，看到自己熟识的其他电影游戏中的角色与元素出现在现在大屏幕上，认同感再一次得到了加强，这就使得观影体验进一步的提高，观影的兴致也就更加高涨了~即使有不熟悉或者不认识相应的元素，但是帅不就够了么！比如看见高达出现在真人电影中真的太帅了！除了帅之外，同样的角色从动画到电影是一种全新的体验，是另一种诠释方式，这种令人耳目一新的感觉真的太棒了！</p>
<p>总之，无限加强的代入感和无限缩小的距离感使得电影仿佛多了一个维度，正是这多出的维度让电影变得更加精彩~至少对于我来说是这样的！</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[《三体》——科技外壳下对人性的深刻剖析]]></title>
      <url>https://blog.patrickcty.cc/2018/04/07/%E3%80%8A%E4%B8%89%E4%BD%93%E3%80%8B%E2%80%94%E2%80%94%E7%A7%91%E6%8A%80%E5%A4%96%E5%A3%B3%E4%B8%8B%E5%AF%B9%E4%BA%BA%E6%80%A7%E7%9A%84%E6%B7%B1%E5%88%BB%E5%89%96%E6%9E%90/</url>
      <content type="html"><![CDATA[<p>初读《三体》，最吸引我的是其中的硬科幻，也就是它在科幻中融入的大量的科学知识，也因为如此小说新奇而同时贴合实际。</p>
<p>再读《三体》，书中深层的对人性的剖析则更加令我深思。特别是人性的反复无常在希望与绝望的交织中显露无疑。</p>
<p>如果要选出《三体》三部曲中的三个核心人物，那绝对是第一部的叶文洁，第二部黑暗森林的罗辑，第三部死神永生的程心。</p>
<p>三者都在不同程度上改变了人类文明的命运，前者是彻底打破了人类文明的安逸，将人类文明暴露在了狩猎者面前；中者则是彻底揭露了人类文明的幼稚，但同时又用自己强大的精神力震慑住了狩猎者，将人类文明稳定在了深渊边缘不至于堕入万劫不复的境地；后者则是人类文明中幼稚的代表体，也正是这份幼稚，让人类没能在黑暗森林中幸存下来。</p>
<p>罗辑这个人是三部曲中最重要的角色，也同时是最能反映人性的角色。他出生于黄金时代，在危机纪元被委以重任，成为担任拯救全人类任务的“面壁者”。而此时的他只是一个浑浑噩噩过日子的普通人，面对面壁者这种沉重而又孤独却同时权力巨大的身份时他选择了任何普通人都会去选择的逃避。</p>
<p>但他可是救世主啊，他可是担负着拯救全人类的愿景呀，于是那些要被他拯救的人类中断了他的幸福生活并将他逼上了绝境。但可笑的是，当他抛却一切得到解答，同时进入冬眠等待实验结果之时，等待他的却是被全人类当做笑话。</p>
<p>多亏了他玩世不恭的性格，他并没有因此而被巨大的反差带来的失落所击垮。事实上也正是因为他的性格，他才能挺过作为面壁者初期那巨大的压力，换做是另外一个普通人可能已经崩溃或者迷失自我了。除了罗辑自身的性格，大史的存在也为稳定罗辑的精神起了重要的作用，在性格上这两人比较类似，都是那种活在当下不为外界所影响的类型，而这种性格在任何情况下都能舒适地活下去。（多么希望我也是这样的性格啊。</p>
<p>然而命运似乎要给那些过河拆桥的人类一个教训，在末日之战中，人类重新回想起来了几个世纪以前初次面对三体人的恐怖。于是理所当然的，人类紧紧抓住那根救命稻草，因而那个“笑话”又重新成为了救世主。不过跌宕起伏的地位并非是一无是处，它使得罗辑的精神力更加强大，强大到足以突破三体世界的封锁和整个三体世界相抗衡。这是多么强大的一股精神力量啊，用一己之力，将最糟糕的局势反转，将人类的生活拉回正轨，为人类营造了七十年的和平时间。</p>
<p>从来没有一个人是生而为救世主的，也同样没有一个人是生而为毁灭者的。这其中一定起源于某种品质——在罗辑身上是坦然面对生活，在灭霸身上是对死亡的爱；然后再在磨砺中加以强化，直到最后铸成坚不可摧的信念，或者是恶意；前者使罗辑维持住了人类的命运，后者使灭霸毁灭了无数文明。但磨砺的过程一定是极其痛苦的，甚至是压倒性的绝望，这些我们都无法想象，因为面对容易得多的困难，我们尚被压得喘不过气来。</p>
<p>对于罗辑，我只有无上的敬佩可以向他表达。</p>
<p>而程心则是把最后一根稻草放到骆驼身上的那个人。尽管人类的毁灭和她有着直接的关系，但这是全体人类的责任，而不是她的全责。人类总喜欢把命运寄托在少数人的手上，前有罗辑，后有程心。但这样做的坏处就是把鸡蛋放在一个篮子里面——只要这个篮子出现了问题那就是灾难性的后果。</p>
<p>程心并不是一个十恶不赦的恶人，相反她是一个极度善良的人，只是她生在了错误的年代。面对前所未见的凶恶敌人，人类依旧选择了用善良来面对，结果就只能是灭亡，而这样的选择几乎是无法改变的，在人类中没有足够大的力量可以左右整个人类的选择，连罗辑也不可以，因为人类的善良是基于他们的自信，或者更准确的来说是来源于自己的无知与自大。而这自大则是因为人类进步得太快而忘乎所以。</p>
<p>或许如果让章北海作为人类世界的最高领袖人类的被毁灭的命运才会改变吧。</p>
<p>而对于现在，三体对我来说最大的启发就是：做一个罗辑和大史那样的人，不以物喜，不以己悲，创造属于自己生活；做一个程心那样的人，奉献自己，兼济天下。前者出世，后者入世；但有趣的是，在小说中，出世者拯救世界，入世者将世界带往毁灭，不过这也与我们现在的生活无关了。</p>
<p>回到人性，那些或令人肃然起敬，或令人哭笑不得，或令人心生鄙夷的结果都是人性的表达，而无分好坏。但事实上对于人性，我们可以加以约束，让自己不像狂风中的小草，随风摇曳，而像扎根于土地的大树，岿然不动。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[《声之形》——将也的自我救赎之路]]></title>
      <url>https://blog.patrickcty.cc/2018/03/16/%E3%80%8A%E5%A3%B0%E4%B9%8B%E5%BD%A2%E3%80%8B%E2%80%94%E2%80%94%E5%B0%86%E4%B9%9F%E7%9A%84%E8%87%AA%E6%88%91%E6%95%91%E8%B5%8E%E4%B9%8B%E8%B7%AF/</url>
      <content type="html"><![CDATA[<p>做了那么过分事情的他，能被原谅么，这是将也一直以来的心结，也是在自我了结之前最想知道的问题。那最后他为什么没有自我了结呢？可能正是因为他知道了这个心结有解开的可能性。而在这之后，男主的自我救赎之路就开始了。</p>
<p>校园霸凌是一个世界性的问题，而男主的心结也是由此而生，因为做得太过分，他自己也变成了被霸凌的对象，甚至之后还因此封闭了自我。</p>
<p>而男主去解开心结的方法是去赎罪，尽管他不愿承认。幸好硝子天性善良选择接纳了他，并在他的努力下重新维系起了之前断掉的关系。但这些人中只有佐原依旧善待硝子，其他人对待硝子的态度并没有发生什么改变。</p>
<p>在看的时候，我以为电影是两条线进行：将也找回自我的线以及硝子改变对自我看法的线。但我为硝子感到可悲，她的那些朋友到最后也没有深入她的内心，也没有人告诉她她有那么一颗温柔而强大的内心，值得活在这个世界上，被这个世界善待。不是因为她而让这个世界变得黑暗，而是因为这个世界的恶意一直让她陷入黑暗。令人遗憾的是到最后男主也只是真心说出了抱歉而没有解开女主的心结。</p>
<p>虽然最后女主已经不再想着轻生，也好像变得开朗，但我为什么却还是为女主感觉那么悲伤呢。愿所有硝子都能被温柔以待。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[春节档电影]]></title>
      <url>https://blog.patrickcty.cc/2018/03/14/%E6%98%A5%E8%8A%82%E6%A1%A3%E7%94%B5%E5%BD%B1/</url>
      <content type="html"><![CDATA[<p>春节档电影总是有限，这次一共有四部，其中西游记题材的真的是看烂了，于我而言完全没有观看的欲望。另外的三部中我看了两部，这两部都给了我相应的惊喜。</p>
<p>首先看的是《唐2》，整部电影的节奏把握得很好，观众看起来比较畅快，里面的喜剧元素也让人比较轻松，刘昊然推理时候的场景简直科技感炸裂，看得也非常过瘾。剧情方面在看的时候也没发现明显的槽点，不过事后看大家的评论才知道原来推理有这么多漏洞 233，不过作为一个非推理迷，剧情还是比较让人满意的。评分的话我个人觉得可以有 8/10。</p>
<p>接下来看的是《红海》，这一部是春节档中口碑最好的一部，看完之后觉得真的很良心，战斗场面逼真度极高且恢弘，人物表现丰满，就是整体一直维持在高强度的节奏看完之后个人感觉很累……还有给血腥场面的特写真的有点尺度太大了啊……整体评分的话 8.5/10，不适合带着孩子老人去看，一部不作的主旋律好片。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[《黑豹》]]></title>
      <url>https://blog.patrickcty.cc/2018/03/14/%E3%80%8A%E9%BB%91%E8%B1%B9%E3%80%8B/</url>
      <content type="html"><![CDATA[<p>对我来说，看电影的话，要看就要看好电影，但这好电影的标准不知何时已经变成了让我觉得有意思的电影，而相对的，电影的逻辑严密性，主题反而没那么重要了。</p>
<p>而这部《黑豹》，对我来说则无疑是一部好电影。整部电影最精彩的部分就是瓦坎达的科技了，因为有了万能的振金，被外界视作贫困潦倒的第三世界国家实际上是一个科技高度发达的不为外界所知的文明国度。</p>
<p>不得不说振金的设定真的非常巧妙，影片中出现的能远程驾驶的控制器，能防止子弹和碰撞的汽车，自由伸缩的长矛，可以掀翻无敌汽车的手部“空气炮”，看似毛毯却可以当做盾牌的奇妙物件以及强度甚至比钢铁侠战甲还要高的黑豹战斗服（最重要的是不用躲在角落换衣服了 233），这些科技产物绝对是一场视觉盛宴，极具观赏性。</p>
<p>而剧情方面就没有科技来得那么精彩了，因为电影的核心所在应该是想要表达的主题：能力越大，责任越大，与其独善其身，更应兼济天下。而大反派就是因为前代想“独善其身”而造成的畸形产物，主角的任务就是弥补父亲以前的错误。也正是因为主题，影片中花大量的篇幅引导我们思考是应该独善其身还是应该站出来兼济天下，而大反派的戏份也因此比较有限，与主角的碰撞也比较草率地结束了，尽管反派塑造的很好很有魅力，但却有虎头蛇尾的嫌疑。</p>
<p>有一个问题是主角团这边形象没有其他的漫威电影来得高大，主角的魅力也没怎么凸显出来，至少远远没有《美国队长 1》那么好，不过后面的《复仇者联盟 3》黑豹还有不少戏份，希望到时候黑豹的形象能更加丰满高大。</p>
<p>评分 8/10，影片中的高科技元素是家分店，主题的表达也是可圈可点，但是因此而削弱了人物形象的塑造有点得不偿失。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[《奇迹男孩》]]></title>
      <url>https://blog.patrickcty.cc/2018/01/31/%E3%80%8A%E5%A5%87%E8%BF%B9%E7%94%B7%E5%AD%A9%E3%80%8B/</url>
      <content type="html"><![CDATA[<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>当你因为先天缺陷而导致面容与常人不同时，你是选择封闭自己还是敞开怀抱？当你的孩子你因为先天缺陷而导致面容与常人不同时，你会怎样对待他？当你拥有一个因为先天缺陷而导致面容与常人不同的弟弟，而且这个弟弟从父母那里剥夺走了原本属于你的爱与关心，你会怎么做？如果你遇到了这样的同学，他因为先天缺陷而导致面容与常人不同，你会怎么对待他？</p>
<p>影片对这些问题进行了探讨，交出来的答卷确实也相当有水平。</p>
<p>首先我们从父母的角度来看。对于这样与众不同的孩子，他们并没有一到年龄就将他交给学校，我想他们也明白，童年产生的阴影可能会影响一辈子，因而他们选择在家里对孩子进行早教，同时在这个过程中也仍保留着对孩子性格的引导——让他知道他仍是一个正常孩子。这些举措确实有效，不仅给了他一个相对快乐的童年，还进行了充分的积累来让他能相对安稳地踏进真正的社会。</p>
<p>而这一天也终于到来，影片中说得很有道理的一点是：在某些方面，成年人社会比小孩社会要好过，因为小孩不懂得隐藏自己的情绪，而小孩子面对与自己不同的事物，通常采取的措施是排斥、孤立与嘲笑。因而校园霸凌与孤立成为了奥吉面临的最大的问题，而这些问题是普遍存在于所有的中小学学校中的。</p>
<p>我记得在小学的时候，我们班有一个吴同学，可能因为他是务工子弟的儿子，他身上的衣服和鞋子总是感觉破破烂烂的，并有些脏，也有一些同学说他“臭”，但这臭是否是真实存在的我其实也不清楚。就是因为他的这些不同之处，他受到了我们班的一些不良同学的排挤，就像是电影里的朱利安所做的类似的事情。我们都知道，为了合群或是出于其他的一些原因，学校中跟风的行为非常普遍，我也因此对吴同学采取疏远的态度，甚至有一次还将他推下了升旗台……但尽管如此，在之后我还去他家玩过，也曾有一段时间和他在一起玩，虽然关系并没有密切到和电影中杰克与奥吉的关系那样。因为不想成为被孤立的人，我也加入了孤立他的人群中，而我们班其他同学的想法似乎和我也相同，因此吴同学自始至终都受到了排挤与霸凌。</p>
<p>我们的奥吉在进学校之际就因为外貌而遭受了类似的对待，但和吴同学不同的是，在受到排挤之际，有同学不害怕也被孤立，站了出来和奥吉交朋友，也正是在这个过程中，奥吉自身的优点也为人所知，其他人也不再因为他的与众不同外貌而排斥他了。</p>
<p>首先站出来的是杰克威尔，但是他依然害怕被孤立，因而在他和朱利安他们一起的时候说出了迎合他们的话语，而正是这句话是深深刺痛了奥吉的内心；真正让奥吉敞开心扉的是莎莫，比起杰克是因为奥吉的帮助而开始与他相处，莎莫是在奥吉最为脆弱的时候出现在了奥吉的身边，并让奥吉知道了友谊的真正感觉，同时也将他从背叛的阴影之中解救出来。</p>
<p>如果当时我们班里面有人更勇敢一点，如果那个勇敢的人就是我，那么就可以让吴同学的小学生活更加好一点，只是合群的魔爪钳住了我们，将我们和吴同学放在了对立的位置……</p>
<p>接着我们来到姐姐的角度。一般在拥有多个孩子的家庭里面，最受宠的都是最小的那个。在本部影片中，更小的孩子还拥有先天缺陷而需要父母亲更多的关爱，因而姐姐得到的爱就更少了。尽管我是独生子女不存在这样的问题，但是如果让我面临这样的情况那我的内心一定相当郁闷甚至导致我不给弟弟好脸色看。然而影片中的姐姐隐藏了自己的情绪，一方面不给爸爸妈妈添麻烦，另一方面又尽自己所能来照顾与众不同的弟弟。</p>
<p>姐姐这部分最让我印象深刻的是在万圣节的这天，本来是她和妈妈的独处被弟弟所破坏，尽管姐姐很生气，但是面对更加伤心的弟弟，她压下了自己的情绪，而去想方设法安慰弟弟，让他走出家门，走出了郁闷。由此看来弟弟的健康成长中姐姐也是功不可没的呢。</p>
<p>虽然姐姐足够好，但是这部分父母亲还是有点失职，即使有个特殊的孩子要照顾，但也不能忽视了那个乖巧懂事的另一个孩子的存在，尽管那个孩子看起来足够坚强，似乎并不需要心疼。姐姐的那场演出让父母知道了他们一直忽视的姐姐的优秀，也让他们察觉到了他们所存在的对姐姐的关心太少的问题。</p>
<p>接下来则是米兰达的角度。米兰达突然的冷漠态度原来是为了圆上自己身世的幌子，而正是这个身世，让米兰达在夏令营中成为最受欢迎的人。这无疑也是群体中经常出现的另一个问题，每个人都想受到其他人的关注，而这份关注需要相应的基础来支撑，如果没有相应的基础则需要一定的代价来进行交换，米兰达交换的筹码则是自己最真挚的友谊。但在经历了那么多之后，米兰达终于明白了，最珍贵的应该是友谊，而不是那泡沫般的受欢迎，也正是米兰达的醒悟，让姐姐得以在家人面前展示自己从而让父母认识到了自己一直以来对姐姐的忽视。</p>
<p>影片是从多个人物的角度来讲述故事，不过主要的故事都围绕在奥吉的身上。这样的讲述手法给故事设置了很多矛盾冲突，又在之后一一进行解决，让故事充满波折又引人思考，除此之外，影片对我一开始提的问题的思考也非常深刻，是一部非常用心的影片。</p>
<p>插点题外话，这部电影是我和我表弟一起看的，看的时候电影院中基本上都是家长带着孩子看。一开始我还以为这会是一部非常扯的亲子向电影，但最终看下来我实在是收获良多。</p>
<h2 id="评分"><a href="#评分" class="headerlink" title="评分"></a>评分</h2><p>9/10.</p>
<p>内容有趣而令人感动，主题也比较深刻，感情也非常充沛，非常值得一看！</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[《神秘巨星》]]></title>
      <url>https://blog.patrickcty.cc/2018/01/31/%E3%80%8A%E7%A5%9E%E7%A7%98%E5%B7%A8%E6%98%9F%E3%80%8B/</url>
      <content type="html"><![CDATA[<h2 id="开始之前"><a href="#开始之前" class="headerlink" title="开始之前"></a>开始之前</h2><p>这是阿米尔汗的另一部新作，也正是冲着阿米尔汗这个名字，我果断地贡献了一份电影票。而看完这部电影之后我感觉它确实没有让我失望。</p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>阿米尔汗的每部电影都反映着一个或多个印度中存在的不好的社会现象，而这次他对准的是印度的重女轻男的思想以及婚姻不平等，而这样的主题是通过小女孩对梦想的追求来表现的。</p>
<p>影片中最大的冲突就是小女孩对梦的追求与父亲不允许的冲突，影片中的父亲是一个大男子主义严重到不允许其他女人有违逆他的想法，如果有就施以暴力。而最可怕的是，这个父亲还是家庭里面的经济支柱，而毫无经济实力的母子只能逆来顺受。</p>
<p>影片中对家庭暴力的刻画还是非常到位的，甚至都让我感觉不寒而栗。也正是在家庭暴力与对梦想的阻挠两方面的共同作用下，促使了小女孩的觉醒，而另一个关键则是母亲的觉醒，但母亲则需要考虑更多实际的问题，因而对小女孩提出的离婚的要求她并没有一开始就答应，而是在将要离开印度之时才做出选择。</p>
<p>影片中最剧烈的两个冲突也即为母子觉醒的导火线，第一个是在父亲发现母亲项链消失的真相之后砸掉电脑以及最后在机场想要丢掉吉他，其中后者也是全剧中的最高潮，母亲也终于甩掉来了一直以来的懦弱以及物质的包袱而去拥抱一个未知但是有着无穷潜力的未来。</p>
<p>片中让我比较印象深刻的另一个角色就是钦腾了，这个小男孩实力告诉了我们撩妹的精髓所在，即使被嫌弃他也不放弃而是依然如故，最终他们终于修成正果（虽然我觉得有些勉强）。无论如何钦腾的性格真的是非常适合追妹子，比我好多了 233，要是我有他的一半那我一定能追到妹子 233。</p>
<p>影片中刻画得最好的是母亲这一形象，她全心全意地爱着自己的两个孩子，对女儿的爱表现得尤为明显。她非常爱女儿，对女儿的要求是有求必应，但这些仍被限制在了父亲允许的前提下，而也正是在这样的条件下，面对女儿让她离婚的请求，她才不去答应，因为这样的未来是没有物质的保障的，这样可能使女儿过得更差，因而她宁可忍受家暴也要让女儿有一个有保障的生活，因而当女儿的吉他弦被剪断她也忍了，因而当女儿的电脑被砸她也没有选择离婚。而当将离开印度之时，当她从电视和路人口中真正感受到女儿的音乐天赋时，这时候当父亲要扔掉那个被称作是“垃圾”的吉他，要彻底断绝女儿的音乐梦想，母亲终于抛弃了之前的想法与顾虑，在大众的“保护”下勇敢站了出来，选择了离开，她完成了觉醒，也选择了一条可能会艰难但是却有可能无比辉煌的道路。</p>
<p>而我们的阿米尔汗在这部电影中只是一个配角，影片中对他的描写是先抑后扬，就是这样的一个刻薄、自大、花心、惹人讨厌的人，却帮助小女孩一步一步完成了救赎，也找到了自己的初心。这个角色整体刻画得还不错，只是有些地方让人感觉用力过猛。</p>
<p>整部电影的硬伤还是不少的，但这位并不妨碍它想要表达的追求梦想、鼓励家庭暴力的受害者拿起法律的武器来反抗、追求男女平等的思想。</p>
<h2 id="评分"><a href="#评分" class="headerlink" title="评分"></a>评分</h2><p>8/10.</p>
<p>整体观影体验还不错，就是一些硬伤使得这部电影的剧本方面还有进步的空间。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[《寻梦环游记》]]></title>
      <url>https://blog.patrickcty.cc/2018/01/18/%E3%80%8A%E5%AF%BB%E6%A2%A6%E7%8E%AF%E6%B8%B8%E8%AE%B0%E3%80%8B/</url>
      <content type="html"><![CDATA[<h2 id="开始之前"><a href="#开始之前" class="headerlink" title="开始之前"></a>开始之前</h2><p>这部电影上映的时候还是在 2017.11.24，那时候因为种种原因我想看但是一直没有去看。现在我终于考完了，于是赶紧趁还没下线去电影院观看了~</p>
<p>看这部电影的时候中途放映机还坏了一会 233，不过即使没有画面，听着英文还是听得懂的 233。</p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>为什么想看这部电影呢？很大程度上在于我之前看的影评，那么这部电影究竟有没有影评中所说的那么好呢？下面会给出答案。</p>
<p>迪士尼和皮克斯的动画电影从来没有让人失望过，这次也是一样，无论是从主题上，画面上还是剧情上都依旧让人赞叹不已。</p>
<p>剧情中最大的冲突在于我们的主人公米格的音乐梦。米格的曾曾祖父因为去搞音乐了而离家而去再也没有回来，而这个家被曾曾祖母依靠做鞋子而一手支撑起来了，但同时曾曾祖母也认为音乐是一个诅咒，不允许家族中再出现音乐相关的内容。正因为此，家族的约束和小男孩的音乐梦发生了激烈的冲突。</p>
<p>让人眼前一亮的是，上面的这些剧情介绍是用一种特别的方式表达出来的——剪纸风格，这样的风格完美地符合了亡灵节的主题，同时又不落俗套。</p>
<p>故事的第一阶段是少年的觉醒阶段，从完全被家里人所控制无从实现自己的音乐，到萌生反抗的想法再到受到鼓舞决定不顾家人的反对勇敢去实现梦想。也正是因为有了这样的转变，少年才能无意中接触到亡灵世界。</p>
<p>而亡灵世界无疑是“炫技”的极限了，恢弘的亡灵国度通过高超的动画技术被表现得淋漓尽致。</p>
<p>第二个阶段则是米格寻找歌神。米格之所以进入亡灵世界是因为受到了诅咒，必须要得到亲人的祝福才能回到原本世界，而亲人们却同样反对他的音乐梦想，因而米格要想坚持音乐梦想则需要得到歌神，也就是他认为的曾曾祖父的帮助。</p>
<p>在剧情方面，电影故意让观众以为歌神才是米格真正的曾曾祖父，但之后却来了个大反转——原来米格真正的曾祖父并不是歌神，而是那个过不了关无法看望亲人的埃克托，歌神也没有他向外界表现得那么美好，他的成功原来建立在谋杀并且占有埃克托的成果的基础上。</p>
<p>在寻找歌神的这个过程中，米格终于展现出了自己的音乐才华，也完成了蜕变——变得自信而坚定，也从埃克托那里找到了亲情的真谛。其实关于歌神真正的面目影片中已经有铺垫：歌神的演唱会他自己却不去参加排练，而是交给其他的人员来进行，而一个稍微敬业一点的明星都不会做出这么不负责的举动。</p>
<p>第三个阶段则是回到家人的身边。埃克托的真实身份米格已经了解，但是他却一直没有被她老婆所原谅，而在这个阶段中那股仇恨终于被爱所消解，歌神的真实面目也展现在了大众面前，但这时埃克托却因为快被遗忘而即将消失，米格也在日出之前勉强回到了原本世界。</p>
<p>这部分的“战斗”部分让人印象深刻，影片充分利用了骨头的特点，将手臂拆下来当做双节棍等来使用这些非常“骨头”的场景真的非常符合世界的设定，也让人会心一笑。</p>
<p>最后一个阶段是音乐唤醒亲情。在埃克托即将被遗忘之际，米格使用埃克托的吉他，用那首写给 Coco 的《Remember Me》，成功将 Coco 的记忆唤醒，同时也消解了家庭中对音乐的误解。</p>
<p>最后的结局还是非常圆满的，歌神的真实身份，埃克托的故事也为大家所知晓，米格的音乐梦想也得以继续，Coco 也终于和埃克托团聚。</p>
<p>何为亲情？亲情应该是相互扶持的同时又相互谅解，尊重梦想，尊重家庭成员的感受这才是真正的亲情所拥有的样子。尽管伊梅尔达一开始对埃克托非常恨，恨他理开这个家不再回来，但是尽管如此，深埋着的爱并没有随之消散，而是等待着爆发的那一刻，影片想表达的亲情从这里也表现得淋漓尽致。</p>
<p>现在回到开始的那个问题：这部电影究竟有没有影评中所说的那么好呢？其实比起来还差了一点点，因为亲情这个主题实在是有些老套，但是它仍然是一部质量极佳的作品，绝对值回票价。</p>
<h2 id="评分"><a href="#评分" class="headerlink" title="评分"></a>评分</h2><p>9/10.</p>
<p>影片整体质量很高，不过比起之前的《头脑总动员》的精妙的设定还稍微差了一点，但无论如何仍然是一部无可挑剔的高质量影片。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[《敦刻尔克》]]></title>
      <url>https://blog.patrickcty.cc/2018/01/13/%E3%80%8A%E6%95%A6%E5%88%BB%E5%B0%94%E5%85%8B%E3%80%8B/</url>
      <content type="html"><![CDATA[<h2 id="开始之前"><a href="#开始之前" class="headerlink" title="开始之前"></a>开始之前</h2><p>上次看完电影写感受还是 8.26 的《十万个冷笑话 2》了。不知不觉中，坚持了那么久的习惯就突然被终止了，就像我在另外方面的坚持，也是戛然而止。</p>
<p>现在又是考试周期间，但是如今我却不向大一的时候那么从容，曾经的“大靠大玩，小考小玩”对现在的我已然成为了过去完成时，以前的“考试电影周”亦是不复存在。</p>
<p>这学期的我的心态经历了过山车，从充满动力及幸福，到煎熬，到后来的一直的隐性自暴自弃，消极，以及现在都持续影响着我的浮躁……</p>
<p>无论如何，电影感想又开始了，闲话少叙，进入正题。</p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>这是诺兰继《星际穿越》之后的又一部执导作品。诺兰可以说是我最喜欢的导演了，他的作品独特的风格使得每篇作品都有一种和普通影片截然不同的观影感受，这也是我最欣赏的地方。</p>
<p>而这部《敦刻尔克》，描写的是战争，虽然不能发挥出之前的悬疑感，但是诺兰的风格还是让这部影片独具特色。</p>
<p>影片拥有三条主线，分别为空海陆，对应的是一小时，一天，十天。比较遗憾的是在看电影的地方我并没有注意到这个时间的关系，因而诺兰精密的安排我没有完全把握住。不过最后三条主线交汇到一条还是让我把握到了命运的气息。</p>
<p>我觉得这部电影想描述的最重要的不是战争，而是人。从电影刚开始的时候主角的丢枪逃跑，到之后为了生存的各种努力，都让我们感受到了战争的残酷，生存的艰难，以及战场上人的实际身理与心理状况。</p>
<p>而海上这条线则表示得更加淋漓尽致：为了向证明自己价值的乔治，因为炮弹而极度害怕的士兵，因为乔治受伤而从愤怒到最后转为体谅的彼得，从始至终都沉稳的道森先生。尽管失去了乔治，但他们所在的这艘小船将许许多多的被困在敦刻尔克的士兵带回了家，也让他们不再重蹈道森先生儿子的覆辙了。</p>
<p>而空中的这条线却更加含蓄，片尾法里亚选择不去跳伞而被俘虏这个表现得最为淋漓尽致。在击落这么多架敌机之后，法里亚面对油已经耗尽的飞机，没有选择跳伞而是随着飞机一起滑翔直到降落，是为了不让这架英国最新研制的喷火战机被德国人所得到而研究，也是为了给正在撤退的士兵带来希望，将他们从压抑中给解救出来。</p>
<p>除开人物之外，本片的配乐也是一大亮点，我是在寝室用头戴耳机来听的，配合着电影压抑的氛围，配乐更进一步渲染了这种气氛，因此整部影片看完我整个人是极度疲惫的，这种疲惫是精神上的，也间接让我感受了历史上真是存在的压抑的微小的一部分。</p>
<h2 id="评分"><a href="#评分" class="headerlink" title="评分"></a>评分</h2><p>8/10。</p>
<p>这依然是一部典型的诺兰式电影，虽然情节不及之前来得酣畅淋漓，但是看完之后还是让人感触良多，依然保持了一贯的高质量。</p>
<p>电影中生存是一件如此困难的事情，而我们呢，或许真的是只有当将要失去的时候才能感受到宝贵的地方吧。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java Spring Boot 笔记]]></title>
      <url>https://blog.patrickcty.cc/2018/01/03/JavaSpringBoot%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h2 id="Collection、Map、Set-与-List"><a href="#Collection、Map、Set-与-List" class="headerlink" title="Collection、Map、Set 与 List"></a>Collection、Map、Set 与 List</h2><ul>
<li>Collection（容器）是集合接口，保存一组对象（Object）</li>
<li>Map 类似于 Python 的 dict，用来保存映射，HashMap 是 Map 的一种实现</li>
<li>List 类似于 Python 数组，用下标来取值，LinkedList、Vector 都是其实现</li>
<li>Set 是集合，只能通过游标来取值，HashMap 是其的一种实现</li>
</ul>
<h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><p>平常的对象和函数都是接受固定类型的变量作为参数，但是泛型接受的参数可以是不确定的，可以接受任意数据类型的变量作为参数，当然除了基本类型</p>
<h2 id="Optional"><a href="#Optional" class="headerlink" title="Optional"></a>Optional</h2><p>Optional 对象相当于是一个容器，它的值可以为 null。如果值存在则 isPresent() 方法会返回 true，此时调用 get() 方法就会返回容器中的对象。</p>
<p>这个类的主要作用就是把 null 用容器装起来了，可以不用显示地进行控制检测，可以有效解决空指针异常。</p>
<h2 id="jsonignore"><a href="#jsonignore" class="headerlink" title="@jsonignore"></a>@jsonignore</h2><p>在 JSON 返回的时候，有些值我们不想让它显示给客户端，比如密码，因此可以用这个注释来忽视掉这些属性</p>
<h2 id="JavaBeans"><a href="#JavaBeans" class="headerlink" title="JavaBeans"></a>JavaBeans</h2><p>JavaBeans 是 Java 中一种特殊的类，其中：</p>
<ul>
<li>所有属性为private</li>
<li>提供默认构造方法</li>
<li>提供getter和setter</li>
<li>实现serializable接口</li>
</ul>
<p>这样做是因为 Java 语言欠缺属性、事件、多重继承功能。</p>
<h2 id="gt-表达式"><a href="#gt-表达式" class="headerlink" title="-&gt; 表达式"></a>-&gt; 表达式</h2><p>和 JS 类似，Java 的 -&gt; 表达式定义的也是一个匿名函数，在这里叫做 Lambda 表达式，格式如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(parameters) -&gt; expression</div><div class="line">或</div><div class="line">(parameters) -&gt;&#123; statements; &#125;</div></pre></td></tr></table></figure>
<p>表达式的特点为：</p>
<ul>
<li>可选类型声明：不需要声明参数类型，编译器可以统一识别参数值。</li>
<li>可选的参数圆括号：一个参数无需定义圆括号，但多个参数需要定义圆括号。</li>
<li>可选的大括号：如果主体包含了一个语句，就不需要使用大括号。</li>
<li>可选的返回关键字：如果主体只有一个表达式返回值则编译器会自动返回值，大括号需要指定明表达式返回了一个数值。</li>
</ul>
<h2 id="Arrays-asList"><a href="#Arrays-asList" class="headerlink" title="Arrays.asList()"></a>Arrays.asList()</h2><p>这个方法是用来把参数包装成一个 List，可以接受数组作为参数。</p>
<h2 id="Spring-Boot-关键构件"><a href="#Spring-Boot-关键构件" class="headerlink" title="Spring Boot 关键构件"></a>Spring Boot 关键构件</h2><h3 id="Entity"><a href="#Entity" class="headerlink" title="Entity"></a>Entity</h3><p>类似于 Flask 中的 Model 类，用来表示数据库的结构。</p>
<h3 id="Repository"><a href="#Repository" class="headerlink" title="Repository"></a>Repository</h3><p>直接与数据库进行交互，类似于 Flask 中的 db.session 需要自己定义相应的方法来实现一些对数据库的 CURD 操作。</p>
<h3 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h3><p>相当于 Flask 中的 view，表示业务逻辑的代码</p>
<h2 id="SQL-Dialect"><a href="#SQL-Dialect" class="headerlink" title="SQL Dialect"></a>SQL Dialect</h2><p>不同的 SQL 数据库都有不同的 SQL 扩展，这种扩展就是“方言”</p>
<h2 id="SQL-Server-中文显示为问号"><a href="#SQL-Server-中文显示为问号" class="headerlink" title="SQL Server 中文显示为问号"></a>SQL Server 中文显示为问号</h2><p>这个是字符集(collate)顺序的锅，默认的字符集不显示中文，我使用了下面的语句来更改数据库的字符集顺序：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">alter database dbname collate Chinese_PRC_CI_AS</div></pre></td></tr></table></figure>
<p>以及下面的语句更改表中列的字符集：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">alter table tbname alter column clname cltype collate Chinese_PRC_CI_AS</div></pre></td></tr></table></figure>
<p>结果改了之后查询以及插入值再查询后依然是问号，但是重新创建数据库之后就可以正确显示中文了：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">create database dbname collate chinese_prc_ci_as</div></pre></td></tr></table></figure>
<p>真的好坑，不知道是不是我人品比较差不能直接修改。</p>
<p>参考资料：</p>
<ul>
<li><a href="https://zhidao.baidu.com/question/51161338.html" target="_blank" rel="external">https://zhidao.baidu.com/question/51161338.html</a></li>
<li><a href="https://stackoverflow.com/questions/16685269/error-on-renaming-database-in-sql-server-2008-r2" target="_blank" rel="external">https://stackoverflow.com/questions/16685269/error-on-renaming-database-in-sql-server-2008-r2</a></li>
</ul>
<h2 id="List-用法"><a href="#List-用法" class="headerlink" title="List 用法"></a>List 用法</h2><h3 id="取出-List-中的元素"><a href="#取出-List-中的元素" class="headerlink" title="取出 List 中的元素"></a>取出 List 中的元素</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">list.get(1)  // 数字为 index</div></pre></td></tr></table></figure>
<h3 id="检查-List-是否为空"><a href="#检查-List-是否为空" class="headerlink" title="检查 List 是否为空"></a>检查 List 是否为空</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">list.isEmpty()</div></pre></td></tr></table></figure>
<h3 id="查看-List-的大小"><a href="#查看-List-的大小" class="headerlink" title="查看 List 的大小"></a>查看 List 的大小</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">list.size()</div></pre></td></tr></table></figure>
<h2 id="JPA-中的查询方法"><a href="#JPA-中的查询方法" class="headerlink" title="JPA 中的查询方法"></a>JPA 中的查询方法</h2><p>和 SQLAlchemy 类似，除非指定返回一个结果，JPA 中返回的结果也是按照集合来表示的，因此也要用 List 等来保存结果。</p>
<p>如果指定了 <code>findFirstByXXX</code> 或者 <code>findOneByXXX</code> 就可以只返回一个结果。</p>
<h2 id="RequestBody-的用法"><a href="#RequestBody-的用法" class="headerlink" title="@RequestBody 的用法"></a>@RequestBody 的用法</h2><p>在 REST 应用中，我们一般接受 JSON 作为传入的参数，使用 @RequestBody 之后就只能接受 JSON 作为参数了，不能接受 form-data 等，而此时的 Content-Type 要为 application/json</p>
<p>这个地方和 Python 的还不一样，Flask-RestFul 不仅仅可以接受 JSON 作为参数，还可以解析出很多其他种类的数据。</p>
<p>如果直接使用相应的 Entity 作为参数，那这样的参数就只能识别 form-data，而其他的都不能识别了。</p>
<p>参考教程：<a href="http://blog.csdn.net/rickyit/article/details/70242218" target="_blank" rel="external">http://blog.csdn.net/rickyit/article/details/70242218</a></p>
<h2 id="JPA-使用-DateTime-与-数据库相联系"><a href="#JPA-使用-DateTime-与-数据库相联系" class="headerlink" title="JPA 使用 DateTime 与 数据库相联系"></a>JPA 使用 DateTime 与 数据库相联系</h2><p>在 Java 中直接使用 Date 来新建一个实时间的变量，然后在数据库里面对应的就是 DateTime 类型的了。</p>
<p>其中数据库时间戳类型要根据 @Temporal 注解来指定，相应代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">@Column(name=&quot;DATE_CREATED&quot;)</div><div class="line">@Temporal(TemporalType.TIMESTAMP)</div><div class="line">private java.util.Date dateCreated;</div></pre></td></tr></table></figure>
<p>参考教程：<a href="https://stackoverflow.com/questions/9409342/handle-datetime-in-jpa2" target="_blank" rel="external">https://stackoverflow.com/questions/9409342/handle-datetime-in-jpa2</a></p>
<h2 id="JPA-中的一对多关系"><a href="#JPA-中的一对多关系" class="headerlink" title="JPA 中的一对多关系"></a>JPA 中的一对多关系</h2><p>使用 @OneToMany 以及 @ManyToOne 注解来定义，详细教程看<a href="http://www.cnblogs.com/luxh/archive/2012/05/27/2520322.html" target="_blank" rel="external">这个</a>和<a href="http://www.cnblogs.com/luxh/archive/2012/05/27/2520501.html" target="_blank" rel="external">这个</a>，其中双向映射是可以从任意一个对象引用另一个对象，而单向则是只有一边才可以</p>
<h2 id="JPA-设置默认时间"><a href="#JPA-设置默认时间" class="headerlink" title="JPA 设置默认时间"></a>JPA 设置默认时间</h2><p>每次插入数据时候生成的时间用 @CreationTimestamp 来表示，每次更新数据生成的时间用 @UpdateTimestamp 来表示</p>
<p>参考教程：<a href="http://blog.csdn.net/sushengmiyan/article/details/50360451" target="_blank" rel="external">http://blog.csdn.net/sushengmiyan/article/details/50360451</a></p>
<h2 id="fastjson-使用"><a href="#fastjson-使用" class="headerlink" title="fastjson 使用"></a>fastjson 使用</h2><p>fastjson 是阿里所编写的 Java 处理 JSON 的模块，据说有超高的速度。</p>
<p>Maven 依赖：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;fastjson&lt;/artifactId&gt;</div><div class="line">    &lt;version&gt;1.2.41&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure></p>
<p>把 JSON 字符串解析为 JSON 对象：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">JSONObject jsonResult = JSONObject.parseObject(strResult);</div></pre></td></tr></table></figure>
<p>把 JSON 字符串解析为 JSON 数组：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">JSONArray jsonArray = JSONObject.parseArray(strResult)</div></pre></td></tr></table></figure>
<p>把 Map 转换为 JSON 字符串：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Map param&lt;String, Object&gt; = ...;</div><div class="line">String JSONString = JSON.toJSONString(param);</div></pre></td></tr></table></figure>
<h2 id="HTTPClient-发送-HTTP-请求"><a href="#HTTPClient-发送-HTTP-请求" class="headerlink" title="HTTPClient 发送 HTTP 请求"></a>HTTPClient 发送 HTTP 请求</h2><h3 id="Maven-依赖"><a href="#Maven-依赖" class="headerlink" title="Maven 依赖"></a>Maven 依赖</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;org.apache.httpcomponents&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;httpclient&lt;/artifactId&gt;</div><div class="line">    &lt;version&gt;4.5&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure>
<h3 id="Get-请求"><a href="#Get-请求" class="headerlink" title="Get 请求"></a>Get 请求</h3><p>建立 HTTP 客户端：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">CloseableHttpClient client = HttpClients.createDefault();</div></pre></td></tr></table></figure>
<p>建立 Get 请求:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">HttpGet getRequest = new HttpGet(url);</div></pre></td></tr></table></figure>
<p>发送 Get 请求并且保存返回结果:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">HttpResponse response = client.execute(getRequest);</div></pre></td></tr></table></figure>
<p>获取状态码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">response.getStatusLine().getStatusCode()</div></pre></td></tr></table></figure>
<h3 id="Post-请求"><a href="#Post-请求" class="headerlink" title="Post 请求"></a>Post 请求</h3><p>建立客户端：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">CloseableHttpClient client = HttpClients.createDefault();</div></pre></td></tr></table></figure>
<p>建立 Post 请求：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">HttpPost postRequest = new HttpPost(url);</div></pre></td></tr></table></figure>
<p>构建 Post JSON 请求体：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Map&lt;String, Object&gt; param = new LinkedHashMap&lt;String, Object&gt;();</div><div class="line">param.put(&quot;appid&quot;, &quot;wxgegfegffe&quot;);</div></pre></td></tr></table></figure>
<p>把 Map 转换为 JSON 字符串：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">String JSONString = JSON.toJSONString(param);</div></pre></td></tr></table></figure>
<p>设置实体编码，防止中文乱码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">StringEntity entity = new StringEntity(JSONString, &quot;utf-8&quot;);</div></pre></td></tr></table></figure>
<p>设置 HTTP 中的编码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">entity.setContentEncoding(&quot;UTF-8&quot;);</div><div class="line">entity.setContentType(&quot;application/json&quot;);</div></pre></td></tr></table></figure>
<p>把实体包含到 Post 请求中：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">postRequest.setEntity(entity);</div></pre></td></tr></table></figure>
<p>发送 HTTP 请求：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">HttpResponse response = client.execute(postRequest);</div></pre></td></tr></table></figure></p>
<h2 id="构建-token"><a href="#构建-token" class="headerlink" title="构建 token"></a>构建 token</h2><h3 id="Maven-依赖-1"><a href="#Maven-依赖-1" class="headerlink" title="Maven 依赖"></a>Maven 依赖</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;com.nimbusds&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;nimbus-jose-jwt&lt;/artifactId&gt;</div><div class="line">    &lt;version&gt;5.1&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure>
<h3 id="生成-token"><a href="#生成-token" class="headerlink" title="生成 token"></a>生成 token</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">// Generate random 256-bit (32-byte) shared secret</div><div class="line">SecureRandom random = new SecureRandom();</div><div class="line">byte[] sharedSecret = new byte[32];</div><div class="line">random.nextBytes(sharedSecret);</div><div class="line"></div><div class="line">// Create HMAC signer</div><div class="line">// 需要接受一个 256-bit 的内容作为参数</div><div class="line">JWSSigner signer = new MACSigner(sharedSecret);</div><div class="line"></div><div class="line">// Prepare JWT with claims set</div><div class="line">// 也就是封装进去的一些信息</div><div class="line">JWTClaimsSet claimsSet = new JWTClaimsSet.Builder()</div><div class="line">    .subject(&quot;alice&quot;)</div><div class="line">    .issuer(&quot;https://c2id.com&quot;)</div><div class="line">    .expirationTime(new Date(new Date().getTime() + 60 * 1000))</div><div class="line">    .build();</div><div class="line"></div><div class="line">// 使用 HAMC 来保护这个 claimSet</div><div class="line">// HAMC 是 hash-based message authentication code</div><div class="line">SignedJWT signedJWT = new SignedJWT(new JWSHeader(JWSAlgorithm.HS256), claimsSet);</div><div class="line"></div><div class="line">// Apply the HMAC protection</div><div class="line">signedJWT.sign(signer);</div><div class="line"></div><div class="line">// Serialize to compact form, produces something like</div><div class="line">// eyJhbGciOiJIUzI1NiJ9.SGVsbG8sIHdvcmxkIQ.onO9Ihudz3WkiauDO2Uhyuz0Y18UASXlSc1eS0NkWyA</div><div class="line">// 这就是生成的 token</div><div class="line">String token = signedJWT.serialize();</div></pre></td></tr></table></figure>
<h3 id="验证-token"><a href="#验证-token" class="headerlink" title="验证 token"></a>验证 token</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">// On the consumer side, parse the JWS and verify its HMAC</div><div class="line">signedJWT = SignedJWT.parse(token);</div><div class="line"></div><div class="line">// 通过这个共享密码来检测</div><div class="line">JWSVerifier verifier = new MACVerifier(sharedSecret);</div><div class="line"></div><div class="line">// assert 是 Junit 中的方法</div><div class="line">// 如果共享密码是正确的那么这个结果就为真</div><div class="line">assertTrue(signedJWT.verify(verifier));</div><div class="line"></div><div class="line">// Retrieve / verify the JWT claims according to the app requirements</div><div class="line">// 和 Python 相应的模块不同，这里要手动进行相应的检验</div><div class="line">assertEquals(&quot;alice&quot;, signedJWT.getJWTClaimsSet().getSubject());</div><div class="line">assertEquals(&quot;https://c2id.com&quot;, signedJWT.getJWTClaimsSet().getIssuer());</div><div class="line">assertTrue(new Date().before(signedJWT.getJWTClaimsSet().getExpirationTime()));</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[GoNetwork 学习]]></title>
      <url>https://blog.patrickcty.cc/2018/01/03/GoNetwork%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<h2 id="off-chain-state-channel-与闪电网络"><a href="#off-chain-state-channel-与闪电网络" class="headerlink" title="off-chain state channel 与闪电网络"></a>off-chain state channel 与闪电网络</h2><p>off-chain state channel 是一种区块链上的解决方案，目的是为了解决区块链的扩展性、高延迟。交易费用问题，它通过在用户之间建立通道进行多次交易，最终的结果再放到链上。</p>
<p>雷电（Radien）网络和闪电（lightening）网络都是状态通道的实现方法，不过前者是基于以太坊，后者是基于比特币。</p>
<p>在状态通道中转移的相当于是支票，如果要兑换支票的话还是要去银行（区块链），但是兑换的时候状态通道就会关闭，而理论上状态通道开得越久越好。创建状态通道需要先在主链上初始化一个固定的金额，之后就是通道中对这个金额的分配了。</p>
<p>生命周期：</p>
<ol>
<li>由两个或两个以上的参与者公开的对初始状态达成一致，即一个状态通道开启。（在一笔交易中，涉及到的资金将交给交给第三方委托或者智能合约去临时封存），比如去银行开卡，你是用户，银行是服务，双方确认初始金额是0元无异议后，就开启一个通道。</li>
<li>参与方之间可以更新最近的每笔交易状态，状态本身存储在本地。</li>
<li>当参与方的任何一方将交易状态最终公布，则状态通道关闭。</li>
</ol>
<p>参考资料：</p>
<ul>
<li><a href="http://gocofe.com/2017/06/%E8%B0%88%E8%B0%88%E5%8C%BA%E5%9D%97%E9%93%BE%E4%B8%8A%E7%9A%84%E7%8A%B6%E6%80%81%E9%80%9A%E9%81%93%EF%BC%88state-channels%EF%BC%89/" target="_blank" rel="external">http://gocofe.com/2017/06/%E8%B0%88%E8%B0%88%E5%8C%BA%E5%9D%97%E9%93%BE%E4%B8%8A%E7%9A%84%E7%8A%B6%E6%80%81%E9%80%9A%E9%81%93%EF%BC%88state-channels%EF%BC%89/</a></li>
<li><a href="http://ethfans.org/posts/raiden-network" target="_blank" rel="external">http://ethfans.org/posts/raiden-network</a></li>
<li><a href="https://raiden.network/faq.html" target="_blank" rel="external">https://raiden.network/faq.html</a></li>
<li><a href="http://www.8btc.com/ln-rn-corda" target="_blank" rel="external">http://www.8btc.com/ln-rn-corda</a></li>
</ul>
<h2 id="GoNetwork-白皮书"><a href="#GoNetwork-白皮书" class="headerlink" title="GoNetwork 白皮书"></a>GoNetwork 白皮书</h2><p>白皮书主要讲述了是其应用与商业计划，其中是基于 state channel 来实现的 scalability，mobile 部分体现在他们部署他们的解决方案到移动的游戏应用中（作为一种支付方式）</p>
<p>自己的思考：</p>
<p>GoNetwork 和雷电网络与闪电网络类似，都是基于状态通道，这的确是一种不用改变区块链本身存储结构而提高区块链扩展性的好方法，同时也加快了处理的速度，而安全性也能通过签名来实现；而把产品与游戏进行结合也是一种好的推广方法，依赖于移动端也在无形中降低了用户门槛。</p>
<p>不过因为状态通道的建立还是需要在主链上添加 TX，因此当真的突然产生了大量的通道可能还是会造成整个网络的拥堵，不过如果这种情况出现的概率不高的话那么不处理也不会有太大的影响。</p>
<h2 id="论文"><a href="#论文" class="headerlink" title="论文"></a>论文</h2><h3 id="The-Quest-for-Scalable-Blockchain-Fabric-Proof-of-Work-vs-BFT-Replication"><a href="#The-Quest-for-Scalable-Blockchain-Fabric-Proof-of-Work-vs-BFT-Replication" class="headerlink" title="The Quest for Scalable Blockchain Fabric: Proof-of-Work vs. BFT Replication"></a>The Quest for Scalable Blockchain Fabric: Proof-of-Work vs. BFT Replication</h3><ol>
<li>the GHOST (Greedy Heaviest-Observed Sub-Tree) rule：产生了 fork 之后通过权衡子树来解决，而不是选择最长的区块。<br>这个方法通过提高区块链性能来增加可扩展性但不影响存储</li>
<li>BlockChain-NG：挖出矿的成为 leader，leader 可以添加 microblock（通过时间戳来判断有效性）到链上，这些链不受 PoW 挖掘的限制，而只是被拼凑在一起。<br>microblock 提高了吞吐量并且降低了延迟，也同样不减少存储</li>
<li>加上支链成为有向无环图<br>这个方法提高了并性能力从而提高了处理速度，同样不减少存储</li>
</ol>
<h3 id="Bitcoin-NG-A-Scalable-Blockchain-Protocol"><a href="#Bitcoin-NG-A-Scalable-Blockchain-Protocol" class="headerlink" title="Bitcoin-NG: A Scalable Blockchain Protocol"></a>Bitcoin-NG: A Scalable Blockchain Protocol</h3><p>即为上面所提到的</p>
<h3 id="The-Bitcoin-Lightning-Network-Scalable-Off-Chain-Instant-Payments"><a href="#The-Bitcoin-Lightning-Network-Scalable-Off-Chain-Instant-Payments" class="headerlink" title="The Bitcoin Lightning Network: Scalable Off-Chain Instant Payments"></a>The Bitcoin Lightning Network: Scalable Off-Chain Instant Payments</h3><p>比特币的闪电网络，使用了状态通道来提高可扩展性，这个方法也减小了区块链上的存储</p>
<h3 id="On-Scaling-Decentralized-Blockchains"><a href="#On-Scaling-Decentralized-Blockchains" class="headerlink" title="On Scaling Decentralized Blockchains"></a>On Scaling Decentralized Blockchains</h3><p>块大小和时间间隔的重新参数化来解决可扩展性问题，这个方法不影响存储</p>
<h3 id="Notes-on-Scalable-Blockchain-Protocols"><a href="#Notes-on-Scalable-Blockchain-Protocols" class="headerlink" title="Notes on Scalable Blockchain Protocols"></a>Notes on Scalable Blockchain Protocols</h3><p>通过“采样和回退”游戏实现可伸缩的区块链共识：将交易拆分成影响区块链状态的小部分的 collations，并要求为了使交易的 collation 有效，必须通过从大型验证池随机获取的固定大小的样本的验证。</p>
<p>这个方法不影响存储，但是提高了速度和可扩展性</p>
<h3 id="When-Mobile-Blockchain-Meets-Edge-Computing-Challenges-and-Applications"><a href="#When-Mobile-Blockchain-Meets-Edge-Computing-Challenges-and-Applications" class="headerlink" title="When Mobile Blockchain Meets Edge Computing: Challenges and Applications"></a>When Mobile Blockchain Meets Edge Computing: Challenges and Applications</h3><p>通过使用边缘计算来将区块链运用于移动端，没有提高区块链的可扩展性也没有减少存储</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用 Java 连接 SQL Server]]></title>
      <url>https://blog.patrickcty.cc/2018/01/03/%E4%BD%BF%E7%94%A8Java%E8%BF%9E%E6%8E%A5SQLServer/</url>
      <content type="html"><![CDATA[<h2 id="下载配置-JDBC-驱动"><a href="#下载配置-JDBC-驱动" class="headerlink" title="下载配置 JDBC 驱动"></a>下载配置 JDBC 驱动</h2><p>在 MS 官网下载 JDBC 驱动，链接<a href="https://www.microsoft.com/zh-cn/download/details.aspx?id=21599" target="_blank" rel="external">点这里</a>。</p>
<p>Windows 版下载 exe 包，运行完成解压。然后把 Microsoft SQL Server JDBC Driver 3.0\sqljdbc_3.0\chs\auth\x64\sqljdbc_auth.dll文件 复制到C:\Windows\SysWOW64目录下。（64bit系统）</p>
<p>将 Microsoft SQL Server JDBC Driver 3.0\sqljdbc_3.0\chs\sqljdbc4.jar 包导入到项目中。我是使用 IntelliJ，参考<a href="http://zyjustin9.iteye.com/blog/2172445" target="_blank" rel="external">这个教程</a>。</p>
<h2 id="使用-Java-连接"><a href="#使用-Java-连接" class="headerlink" title="使用 Java 连接"></a>使用 Java 连接</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div></pre></td><td class="code"><pre><div class="line">import java.sql.*;</div><div class="line"></div><div class="line">public class Main &#123;</div><div class="line"></div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        Connection conn = null;  // 存储连接</div><div class="line">        Statement stmt = null;  // SQL 语句相关</div><div class="line">        ResultSet rs = null;  // 执行结果，只有查询语句才有结果</div><div class="line">        // 数据库 url，用来连接 SQL Server</div><div class="line">        // 注意这里不能使用 Windows 验证，因此要自己创建 login</div><div class="line">        String url = &quot;jdbc:sqlserver://localhost:1433;&quot; +</div><div class="line">                &quot;databaseName=学生-课程;user=patrickcty;password=patrickcty&quot;;</div><div class="line">        try &#123;</div><div class="line">            // 导入驱动</div><div class="line">            Class.forName(&quot;com.microsoft.sqlserver.jdbc.SQLServerDriver&quot;);</div><div class="line">            conn = DriverManager.getConnection(url);  // 建立连接</div><div class="line"></div><div class="line">            // 连接检测</div><div class="line">            if (conn != null) &#123;</div><div class="line">                System.out.println(&quot;Success connected!&quot;);</div><div class="line">            &#125;</div><div class="line">            else &#123;</div><div class="line">                System.out.println(&quot;Not connected!&quot;);</div><div class="line">            &#125;</div><div class="line">            // 创建语句对象</div><div class="line">            stmt = conn.createStatement();</div><div class="line">            String sql = &quot;select * from student&quot;;</div><div class="line">            // 查询语句用这个方法</div><div class="line">            // 结果保存在 rs 中</div><div class="line">            rs = stmt.executeQuery(sql);</div><div class="line">            while (rs.next()) &#123;</div><div class="line">                System.out.println(&quot;学号：&quot; + rs.getString(1) + &quot;姓名：&quot; + rs.getString(2));</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            // 插删改用这个方法</div><div class="line">            sql = &quot;insert into student values (&apos;2015000021&apos;, &apos;开普勒&apos;, &apos;男&apos;, 25, &apos;物理系&apos;)&quot;;</div><div class="line">            stmt.executeUpdate(sql);</div><div class="line"></div><div class="line">            sql = &quot;update student set sdept = &apos;文学系&apos; where sname = &apos;卡莲&apos;&quot;;</div><div class="line">            stmt.executeUpdate(sql);</div><div class="line"></div><div class="line">            sql = &quot;delete from student where sname = &apos;开普勒&apos;&quot;;</div><div class="line">            stmt.executeUpdate(sql);</div><div class="line"></div><div class="line">            sql = &quot;select * from student&quot;;</div><div class="line">            rs = stmt.executeQuery(sql);</div><div class="line">            while (rs.next()) &#123;</div><div class="line">                System.out.println(&quot;学号：&quot; + rs.getString(1) + &quot;姓名：&quot; + rs.getString(2));</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            sql = &quot;create table test (id int)&quot;;</div><div class="line">            stmt.executeUpdate(sql);</div><div class="line"></div><div class="line">            sql = &quot;select * from sysobjects where xtype=&apos;U&apos;&quot;;</div><div class="line">            rs = stmt.executeQuery(sql);</div><div class="line">            while (rs.next()) &#123;</div><div class="line">                System.out.println(&quot;表名：&quot; + rs.getString(1));</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            sql = &quot;drop table test&quot;;</div><div class="line">            stmt.executeUpdate(sql);</div><div class="line"></div><div class="line">        &#125;</div><div class="line">        catch (Exception ex) &#123;</div><div class="line">            ex.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        // 关闭各种连接</div><div class="line">        finally &#123;</div><div class="line">            try &#123;</div><div class="line">                if (rs != null) &#123;</div><div class="line">                    rs.close();</div><div class="line">                &#125;</div><div class="line">                if (stmt != null) &#123;</div><div class="line">                    stmt.close();</div><div class="line">                &#125;</div><div class="line">                if (conn != null) &#123;</div><div class="line">                    conn.close();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            catch (Exception ex) &#123;</div><div class="line">                ex.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><ul>
<li><p>查询的时候报错“sqlserver 服务器主体无法在当前安全上下文下访问数据库”</p>
<blockquote>
<p>问题在于这个账号没有要查询的表的权限……想当然地一维这个账号有这个权限……</p>
</blockquote>
</li>
<li><p>打开 SQL Server Browser 遇到的各种问题</p>
<blockquote>
<p>为什么要打开 SQL Server Browser 呢？因为我已开始想用 IntelliJ 中的数据库工具来连接 SQL Server，而这个工具需要使用这个服务，但是按照<a href="https://blog.jetbrains.com/datagrip/2016/06/21/connecting-datagrip-to-ms-sql-server/" target="_blank" rel="external">教程</a>来在打开服务的时候无法执行，最后参照<a href="http://blog.csdn.net/u012586848/article/details/46860839" target="_blank" rel="external">这个教程</a>打开了这个服务。结果最后才发现已经有了 SSMS 根本没必要再多此一举做这个工作……所以头脑一定要冷静，不然很容易就做了无用功……<br>然后 SQL Server Browser 其实是用在一个物理服务器上有多个 SQL Server 实例的时候，这个服务确保客户端能访问到正确的实例。</p>
</blockquote>
</li>
</ul>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="http://www.cnblogs.com/freeabyss/archive/2013/04/15/3187065.html" target="_blank" rel="external">http://www.cnblogs.com/freeabyss/archive/2013/04/15/3187065.html</a></li>
<li><a href="http://www.cnblogs.com/chenxizhang/archive/2009/06/30/1514202.html" target="_blank" rel="external">http://www.cnblogs.com/chenxizhang/archive/2009/06/30/1514202.html</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[首次接触智能合约遇到的坑]]></title>
      <url>https://blog.patrickcty.cc/2017/12/03/%E9%A6%96%E6%AC%A1%E6%8E%A5%E8%A7%A6%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/</url>
      <content type="html"><![CDATA[<p>在很多的教程中，都是使用如下方法来编译 sol 代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">contract = eth.compile.solidity(contractSource).test</div></pre></td></tr></table></figure>
<p>但这样会报错：</p>
<blockquote>
<p>Error: The method eth_getCompilers does not exist/is not available</p>
</blockquote>
<p>原因在于在最新的 API 中这个方法已经被抛弃了，因此我们只能手动编译代码再创建一个合约类了。</p>
<p>编译的方法可以直接用 solc 命令来编译，不过直接在 <a href="https://ethereum.github.io/browser-solidity/" target="_blank" rel="external">remix</a>——可以看做一个在线的 Solidity IDE 中编译会比较方便。</p>
<p>编译之后记录下 abi 以及编译后的二进制代码，然后使用下面语句初始化智能合约类：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yourContract = web3.eth.contract(your_abi)</div></pre></td></tr></table></figure>
<p>再用智能合约类来创建一个智能合约的实例并且部署到区块链上：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">var ss = browser_ballot_sol_smartsponsorContract.new(</div><div class="line">   _benefactor,  // 接受钱的人</div><div class="line">   &#123;</div><div class="line">     from: therunner,  // 智能合约发起者 </div><div class="line">     data: theBinaryCode</div><div class="line">     gas: &apos;4700000&apos;  // 需要的手续费</div><div class="line">   &#125;, function (e, contract)&#123;</div><div class="line">    console.log(e, contract);</div><div class="line">    if (typeof contract.address !== &apos;undefined&apos;) &#123;</div><div class="line">         console.log(&apos;Contract mined! address: &apos; + contract.address + &apos; transactionHash: &apos; + contract.transactionHash);</div><div class="line">    &#125;</div><div class="line"> &#125;)</div></pre></td></tr></table></figure>
<p>之后就只需要使用 <code>loadScript</code> 来加载出合约了。</p>
<p>注意：当合约已经被部署到区块链上就不能再修改了，如果要再次访问就要通过 abi 与 address 了，如果不记得这些的话就无法再次访问到合约了。</p>
<h2 id="无法正常连接"><a href="#无法正常连接" class="headerlink" title="无法正常连接"></a>无法正常连接</h2><p><a href="http://ethfans.org/posts/block-chain-technology-smart-contracts-and-ethereum" target="_blank" rel="external">在之前的教程</a>中我们要使用 <code>geth attach</code> 命令来连接到相应的网络中，但是直接使用这个命令的话会提示无法找到 ipc 文件。</p>
<p>报错的原因在于直接使用这条命令连接的默认的公有链，但是我们想连接的是自己定义的私有链，因此我们要用私有链接的 ipc 来进行连接。</p>
<p>首先要启动我们的私有连，在启动之后会有如下的提示信息：</p>
<blockquote>
<p>IPC endpoint opened: /Users/patrick/Music/BlockChain/data/geth.ipc<br>Welcome to the Geth JavaScript console!</p>
<p>instance: Geth/v1.7.2-stable-1db4ecdc/darwin-amd64/go1.9<br>coinbase: 0xea21220a7ab78b50107734d7a4a6ca19cc39f595<br>at block: 139 (Fri, 01 Dec 2017 23:55:34 CST)<br> datadir: /Users/patrick/Music/BlockChain/data<br> modules: admin:1.0 debug:1.0 eth:1.0 miner:1.0 net:1.0 personal:1.0 rpc:1.0 txpool:1.0 web3:1.0</p>
</blockquote>
<p>这里第一行的 ipc 就是我们所需要的私有链的地址，然后使用如下命令就可以连接上私有链了：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; geth attach ipc:/the/path/of/the/ipc</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[区块链技术-智能合约-以太坊（译文修改版）]]></title>
      <url>https://blog.patrickcty.cc/2017/12/03/%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF-%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6-%E4%BB%A5%E5%A4%AA%E5%9D%8A%EF%BC%88%E8%AF%91%E6%96%87%E4%BF%AE%E6%94%B9%E7%89%88%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>本文仅仅是出于学习的目的，对 King Wang 的译文中的代码部分根据当前版本的工具进行了更新。</p>
<hr>
<p>本文征得IBM的Glynn Bird同意翻译发表。虽然文章没有很深的理论，但是它用简洁的语言描述了区块链技术，智能合约，以及以太坊。文章用了一个可以运行的慈善募捐实例，把以太坊最核心的功能做了演示。</p>
<hr>
<p>区块链(BlockChain)技术吸引了大量的关注，原因不仅是它作为账本来纪录交易，成为加密货币(例如比特币)的引擎；更重要的是，它可以封装代码和数据，成为“智能合约”(Smart Contract)。本文介绍开源区块链技术的一种：以太坊(Ethereum), 并且以慈善募捐为例构建一个智能合约，来演示这种技术的强大之处。</p>
<h2 id="什么是区块链"><a href="#什么是区块链" class="headerlink" title="什么是区块链"></a>什么是区块链</h2><p>区块链是一种数据结构，把数据按时间顺序存储在可以无限伸长的链表中，就像一个账本。区块链数据结构通过分布式，无中心“主”节点，点对点的计算机网络来维护。链表中的每个区块包含一定数量的交易，交易代表数据库状态的改变，例如，钱从一个帐号转到另一个。交易由网络中的多个节点验证，并且最终存储在区块链的区块里面。每个区块包含一个签名哈希(Signed Hash)，包含的是链表中前一个区块的内容。遍历整个区块链可以验证：某个区块的哈希确实是存储在链表中后一个区块里。区块链用图来表示是这样子的：</p>
<p>The Genesis Block是最原始的区块。H()是哈希。Transaction是交易。Time是时间轴，从原始区块链到无限。</p>
<p><img src="http://upyun-assets.ethfans.org/uploads/photo/image/56f449a7d8e9486784757e9ddc7294d6.png" alt="区块链结构"></p>
<p>区块链包含一系列价值的转移，从一个地址转到另一个。一个地址代表系统中唯一的一个帐号。地址实际上是一个公钥，它的对应私钥属于创建账号的那个用户。没有用账户的私钥做数字签名，价值就不能从那个账户中转移。</p>
<p>在加密保护交易的同时，区块链还提供数据库状态的分布共识。它保证价值转移要么发生一次，要么不发生。应用开发人员可以放心：因为数据一旦存储，就不能修改，可以信赖。区块链网络抽取一个计算机节点，在区块链中产生下一个区块，这个节点要花费大量的算力解决一个数学任务，这个节点是事先未知的。这个节点找到了问题的解答，可以命名下一个区块并发布，网络中的其它节点验证这个发布的区块。由于证明了工作量(Proof of Work)， 赢得发布的节点得到两种奖励：获得新铸成的加密货币，以及从创建交易的一方收取费用。这个过程称为“挖矿”，它的目的是：</p>
<ol>
<li>铸成新的加密货币，而产生货币的速率是受严格控制的</li>
<li>奖励“矿工”，“矿工”验证了交易以及在网络中达成共识</li>
</ol>
<p>实践中，有非常快的特殊硬件，挖矿就有优势，所以就有了“军备竞赛”：矿工们采用越来越多的硬件，来维持同样的获取货币的速率。</p>
<p>比特币是最有名的区块链的实用例子。比特币是可以交换真实货币的加密货币。它可以通过区块链交易，在比特币账号(钱包)之间转移。本文写作时，比特币点对点网络有7000个节点。</p>
<h2 id="以太坊和智能合约"><a href="#以太坊和智能合约" class="headerlink" title="以太坊和智能合约"></a>以太坊和智能合约</h2><p>区块链吸引应用开发人员的主要的性质有：</p>
<ol>
<li>区块链由别人运营。如果你的应用把数据存在大家都用的区块链，它就不需要为数据提供存储机制。区块链中的节点提供存储有激励：收交易费和有机会铸新币。</li>
<li>区块链提供分布共识机制，你自己做很难。</li>
<li>区块链为用户提供匿名机制。一个账号身份标识(ID)是个公钥,它不一定和人直接相关。</li>
<li>“价值”可以从一个账号转移到另一个，但是费用要小于传统的真实货币转账机制。</li>
<li>如果某个区块链受信赖，那么存储在那个区块链的交易也受信赖。</li>
</ol>
<p>以太坊采用区块链的原理，又增加了在区块链上创建智能合约：智能合约是一种应用，它能保存价值，存储数据，封装代码，执行计算任务。类似比特币，以太坊也含有货币，称为以太(ether)。以太是计算机节点挖出来的，由节点验证交易，交易存储在分布共识的区块链中。以太可以在账户(公钥)之间以及智能合约之间转移。</p>
<p>智能合约允许匿名的几方进入约束协议，每个参与方对交易完全知情。价值可以在账户间转移，或者放在智能合约中的第三方托管（escrow ）。由于合约就是代码，开发者想做什么应用，就能做得出，你的想象力是唯一的限制。</p>
<h2 id="智能合约的例子：智能赞助-smartSponsor"><a href="#智能合约的例子：智能赞助-smartSponsor" class="headerlink" title="智能合约的例子：智能赞助(smartSponsor)"></a>智能合约的例子：智能赞助(smartSponsor)</h2><p>在本文的剩余部分，我们构建一个智能合约，它可以让持有账户的用户做以下互动:</p>
<ol>
<li>一个慈善机构搞募捐，称为受益者thebenefactor</li>
<li>一个赞助实施方为这个慈善机构募捐，称为实施者therunner</li>
<li>想要提供赞助的用户，称为赞助者thesponsor</li>
<li>一个以太坊区块链的挖矿节点，验证交易，称为矿工theminer</li>
</ol>
<p>我们的称为智能赞助(smartSponsor)的合约(contract)是:</p>
<ol>
<li>实施者therunner通过一个募捐活动为慈善机构募捐</li>
<li>构建合约时，实施者therunner命名接受募捐的受益者thebenefactor</li>
<li>实施者therunner然后邀请用户提供赞助，用户调用智能合约的函数(function), 这个函数的功能是从赞助者thesponsor的账号转移以太到合约(contract)中，这些以太沉淀在合约中，直到有回调发生</li>
<li>在合约的整个生命周期，各方都可以看到谁是受益者thebenefactor，募到了多少以太，从谁哪儿募到(当然赞助者thesponsor可以匿名)</li>
</ol>
<p><img src="http://upyun-assets.ethfans.org/uploads/photo/image/eb0bdd5098014980a8bcf3c24cc3ba94.png" alt="合约模型"></p>
<p>合约定了以后，两种现象必有其一：</p>
<p>1.募捐照计划实施，实施者指示合约把全部募捐转移给受益者</p>
<p><img src="http://upyun-assets.ethfans.org/uploads/photo/image/69ad085d0f94498d8d4e70a7be0be2f6.png" alt="合约模型2"></p>
<p>2.因为某种原因募捐实施不了，实施者指示合约把赞助者承诺的募捐退还</p>
<p><img src="http://upyun-assets.ethfans.org/uploads/photo/image/8fb34f670a0447f581c0b675d5651929.png" alt="合约模型3"></p>
<p>以太坊允许智能合约用代码定义，代码使用一种叫Solidity的编程语言。这是一种类似Java的语言。合约就像Java类，区块链交易存储在成员变量中，可以调用合约的方法来查询合约，或者改变合约的状态。由于区块链的拷贝分布在网络中所有的节点，任何人可以查询合约来获取合约中的公有信息。</p>
<p>我们的合约会包含以下方法：</p>
<ol>
<li>smartSponsor –合约的构造器。它初始化合约的状态。合约的构建者命名账户的地址，这个账户会在合约提款时得益。</li>
<li>pledge –可以被任何捐赠以太的赞助者调用。赞助者可以提供支持募捐的信息，但这个不是必需的。</li>
<li>getPot –返回合约中当前的以太总量。</li>
<li>refund –把承诺的募捐退还给赞助者。只有合约的拥有者能够调用这个方法。</li>
<li>drawdown –把合约中的全部募捐转移到受益者账户。同样，只有合约的拥有者能够调用这个方法。</li>
</ol>
<p>我们的想法是合约要有约束：如果赞助者把以太转移到合约，除非整个合约退回，否则赞助者不能取回。如此，所有的数据都公开可取，意思是任何能够访问以太坊的人，通过合约的代码，能够看到谁设置了合约，谁是受益者，谁承诺了哪一笔捐赠。</p>
<p>重要的是，所有改变合约状态的操作(构建，承诺，退还，或者把合约中的全部募捐转移到受益者账户)都需要在区块链中创建交易。这就意味着，交易被“挖矿”和区块被存储以前，数据还没有被存储。有些操作只是读取已经存在的合约状态(getPot或者读取公共成员变量)，这些操作不需要挖矿。这点重要而微妙：写操作很慢(我们必须等到挖矿完成)。或许写操作结果最终进不了区块链(如果你的代码抛出一个异常或者有其他的错误)，需要调用者给矿工干活的激励。这在以太坊术语中称为gas。所有写操作需要支付gas来改变区块链的状态。</p>
<p>我们有幸不需要加入太坊网络和购买以太，就能使用相同的软件，配置一个本地测试区块链，运行一个矿工来产生自己所谓的以太。这样我们不用浪费真的以太，来测试我们的代码。</p>
<h2 id="Solidity-代码"><a href="#Solidity-代码" class="headerlink" title="Solidity 代码"></a>Solidity 代码</h2><p>这里是用Solidity语言写的我们的智能合约的全部代码：（注：这是修改后的代码）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line">pragma solidity ^0.4.0;</div><div class="line">// Smart contract to allow someone to organise a sponsored event for charity</div><div class="line">// Glynn Bird - 2016</div><div class="line"></div><div class="line">contract smartSponsor &#123;</div><div class="line">  address public owner;</div><div class="line">  address public benefactor;</div><div class="line">  bool public refunded; </div><div class="line">  bool public complete;</div><div class="line">  uint public numPledges;</div><div class="line">  struct Pledge &#123;</div><div class="line">    uint amount;</div><div class="line">    address eth_address;</div><div class="line">    bytes32 message;</div><div class="line">  &#125;</div><div class="line">  mapping(uint =&gt; Pledge) public pledges;</div><div class="line">  </div><div class="line">  // constructor</div><div class="line">  function smartSponsor(address _benefactor) public &#123;</div><div class="line">    owner = msg.sender;</div><div class="line">    numPledges = 0;</div><div class="line">    refunded = false;</div><div class="line">    complete = false;</div><div class="line">    benefactor = _benefactor;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  // add a new pledge</div><div class="line">  function pledge(bytes32 _message) public payable &#123;</div><div class="line">    if (msg.value == 0 || complete || refunded) revert();</div><div class="line">    pledges[numPledges] = Pledge(msg.value, msg.sender, _message);</div><div class="line">    numPledges++;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  function getPot() public constant returns (uint) &#123;</div><div class="line">    return this.balance; </div><div class="line">  &#125;</div><div class="line"></div><div class="line">  // refund the backers</div><div class="line">  function refund() public &#123;</div><div class="line">    if (msg.sender != owner || complete || refunded) revert();</div><div class="line">    for (uint i = 0; i &lt; numPledges; ++i) &#123;</div><div class="line">      pledges[i].eth_address.transfer(pledges[i].amount);</div><div class="line">    &#125;</div><div class="line">    refunded = true;</div><div class="line">    complete = true;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  // send funds to the contract benefactor</div><div class="line">  function drawdown() public &#123;</div><div class="line">    if (msg.sender != owner || complete || refunded) revert();</div><div class="line">    benefactor.transfer(this.balance);</div><div class="line">    complete = true;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>Pledge结构描述一个捐赠，记录赞助者的账号，赞助值，和一个消息字符串</li>
<li>pledges数组记录一组Pledge</li>
<li>所有contract的成员变量都是公共的，因此它们的getter是自动产生的<br>有些函数调用throw来避免在出错时，数据被存储到区块链<br>请注意，代码没有提及交易，区块，gas，或者区块链以及加密货币的任何术语。代码仅仅存储成员变量的状态。以太坊仅仅创建了必要的交易，提交给网络验证(本例采用了我们的测试网络)，然后存储到区块链。所有复杂的东西，都避免让我们看到。结果我们的代码很少(50行)，又容易理解。</li>
</ul>
<p>这个很重要，因为智能合约就是信赖的共享；合约中的所有参与方应该清楚他们的承諾，募捐去了哪里，谁可以做哪些操作。代码越简单，越容易验证合约是否值得信赖。</p>
<h2 id="运行智能合约"><a href="#运行智能合约" class="headerlink" title="运行智能合约"></a>运行智能合约</h2><p>要运营合约，先要把以太坊跑起来。我的Ubuntu服务器安装指南在<a href="https://github.com/glynnbird/smartsponsor。" target="_blank" rel="external">https://github.com/glynnbird/smartsponsor。</a> 我使用的是IBM的Bluemix虚拟机(译注：这个不是必须的)，再用apt-get加些需要的包。</p>
<p>假定你根据我的安装指南，在你的测试网络创建了4个以太坊账号，以及配置了一个挖矿进程， 我们可以拷贝smartSponsor代码，在以太坊控制台执行（也就是说打开了两个窗口，一个用来挖矿另一个执行导入合约的代码）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt; git clone https://github.com/glynnbird/smartsponsor.git  // 注：代码有修改</div><div class="line">&gt; cd smartsponsor</div><div class="line">&gt; geth attach</div></pre></td></tr></table></figure>
<p>从geth控制台，执行和以太坊API交互的JavaScript命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt; loadScript(&quot;./smartsponsor.js&quot;)</div><div class="line">Contract transaction send: TransactionHash: 0xe797ce5c1e5eeaae6e4bd09ad6564f9deba1beeeb7f09b6c16eec728584e370c waiting to be mined...</div><div class="line">true</div><div class="line">&gt; Contract mined! Address: 0x15590c0417f6421fd35e113db0fdb2055df2344b</div><div class="line">[object Object]</div></pre></td></tr></table></figure>
<p>其中 JavaScript 文件修改成了<a href="https://www.zybuluo.com/PatrickCtyyx/note/972386" target="_blank" rel="external">这篇文章</a>的情况。</p>
<p>smartsponsor.js文件创建了一些变量，它们是我们创建的4个以太坊坊账号的地址(theminer, therunner, thebenefactor, thesponsor),这样接下来的代码片段中，谁做了什么，就容易理解了。该文件还包含一系列的指令，用来编译Solidity源码，构建smartSponsor合约，产生therunner合约实例，确保合约的受益者是thebenefactor。</p>
<p>直到交易被挖矿了，合约才变活。这个需要几秒或几分钟，取决于运行计算机的速度。让我们来观察一下合约（合约赋给了变量ss）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&gt; ss</div><div class="line">&#123;</div><div class="line">  address: &quot;0xe021f45922e141f5e17d05a4b2721ec972065960&quot;,</div><div class="line">  transactionHash: &quot;0x77ba5bc77f0a62888c08084a7c00cf00b6cc024f88f988e9daada751788c8693&quot;,</div><div class="line">  allEvents: function(),</div><div class="line">  benefactor: function(),</div><div class="line">  complete: function(),</div><div class="line">  drawdown: function(),</div><div class="line">  getPledge: function(),</div><div class="line">  getPot: function(),</div><div class="line">  numPledges: function(),</div><div class="line">  owner: function(),</div><div class="line">  pledge: function(),</div><div class="line">  refund: function(),</div><div class="line">  refunded: function()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们可以看到合约有一个address，意味着它能收发以太值，以及一个transactionHash，用它来找到区块链中的位置。公共的，可对合约调用的函数也列出了。现在让我们调用几个：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&gt; ss.benefactor()</div><div class="line">&quot;0x63de8807ac0bd63be460be0de250749c4df1dcb0&quot;</div><div class="line">&gt; ss.owner()</div><div class="line">&quot;0x458305055882d53663b41a00eebd0b657469843f&quot;</div><div class="line">&gt; ss.getPot()</div><div class="line">0</div><div class="line">&gt; ss.numPledges()</div><div class="line">0</div><div class="line">&gt; ss.complete()</div><div class="line">False</div></pre></td></tr></table></figure>
<p>我们可以看到合约的拥有者和受益者是不同的账号(分别是therunner和thebenefactor)，合约的状态初始化为没有募捐和赞助。从自己的区块链拷贝做读操作，是免费的，所以我们不需要提供gas。</p>
<p>接下来我们寄给thesponsor账号一些钱，原先账号是没有以太的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&gt; personal.unlockAccount(thesponsor,&quot;password&quot;);</div><div class="line">&gt; eth.sendTransaction(&#123;from: theminer, to: thesponsor, value: 100000000000000000&#125;);</div><div class="line">&quot;0xd4fc641311e31abb6546c3503c367c6ac971b0ad9cb4bcd4c56597e3b98d6d7a&quot;</div><div class="line">&gt; eth.getBalance(theminer);</div><div class="line">4.9524805801917e+22</div><div class="line">&gt; eth.getBalance(thesponsor);</div><div class="line">100000000000000000</div></pre></td></tr></table></figure>
<p>接下来认证thesponsor用户，给我们的智能合约赞助一些钱：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt; personal.unlockAccount(thesponsor,&quot;password&quot;);</div><div class="line">true</div><div class="line">&gt; ss.pledge(&quot;Good luck with the run!&quot;, &#123;from: thesponsor, value: 10000000, gas: 3000000&#125;);</div><div class="line">&quot;0xc0880c4151946014389e135bcbefe39fb8f786e9e3e0ce077fa5f967e2a31ab3&quot;</div></pre></td></tr></table></figure>
<p>价值参数是我们希望转移到合约的以太数量。10000000似乎很大，但单位是wei。1个以太有1000000000000000000个wei！</p>
<p>返回值是交易标识。我们必须等到交易存储到区块链，才能看到合约状态改变了：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt; ss.getPot()</div><div class="line">10000000</div><div class="line">&gt; ss.numPledges()</div><div class="line">1</div><div class="line">&gt; ss.pledges(0)</div><div class="line">[10000000, &quot;0x225905462cf12404757852c01edfd2ec0bf0dbe9&quot;, &quot;0x476f6f64206c75636b2077697468207468652072756e21000000000000000000&quot;]</div></pre></td></tr></table></figure>
<p>调用pledges(0)返回第一个捐赠pledge，包含它的价值，赞助者的地址，和消息(以一串字节表示).我们可以不断地调用pledge函数来增加捐赠，并观察pot变大。在7个赞助者捐赠以后，我们有：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; ss.getPot()</div><div class="line">70000000</div></pre></td></tr></table></figure>
<p>请注意，合约得到了赞助者承诺的全部以太数量，但是赞助者的账号被扣除了比承诺稍多一点的价值。为什么？因为调用pledge函数的操作，必须提供gas作为动力。<br>当实施者准备完成合约，只需调用drawdown函数:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt; personal.unlockAccount(therunner,&quot;password&quot;);</div><div class="line">true</div><div class="line">&gt; ss.drawdown(&#123;from: therunner, gas:3000000&#125;);</div><div class="line">&quot;0x082424d8057b8c250f8b86cda05211628bb3bae513ce27bf6194445ae035a3c4&quot;</div></pre></td></tr></table></figure>
<p>合约挖矿完成后，我们应该看到受益者的账号收到了合约的捐赠数量：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt; eth.getBalance(thebenefactor);</div><div class="line">70000000</div><div class="line">&gt; ss.getPot()</div><div class="line">0</div></pre></td></tr></table></figure>
<h3 id="补充：在另一个窗口中打开智能合约："><a href="#补充：在另一个窗口中打开智能合约：" class="headerlink" title="补充：在另一个窗口中打开智能合约："></a>补充：在另一个窗口中打开智能合约：</h3><p>如果想在另一个窗口中打开此智能合约则需要记录下合约的 abi 以及 address:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt; abi = your_abi</div><div class="line">&gt; sample = eth.contract(abi)</div><div class="line">&gt; ss2 = sample.at(&quot;your_address&quot;)</div><div class="line">&gt; ss2.getPot</div><div class="line">0</div></pre></td></tr></table></figure>
<p>智能合约在合约里的第三方托管记录多个捐赠，要么转移到受益者，要么退还给赞助者。代码确保只有合约的创建者可以退还捐赠，或者全部转移给受益者，并且防止合约完成后再加捐赠。整个过程中，合约的状态可以被各方查询，这些都包含在50行代码里面！</p>
<p>用geth行命令工具执行的命令实际上是Javascript语句。你用自己的客户端代码同样可以调用远端API,和真实(或测试)网络进行交互。这样，创建基于互联网的智能合约前端就很简单。</p>
<p>你用Mist浏览器可以创建帐户，查看和操作合约，就像一个智能合约的应用商店。Mist设想了很多计划，但目前它是一个相对简单的钱包应用，以及合约浏览器。</p>
<h2 id="区块链仅仅是一个分布式数据库？"><a href="#区块链仅仅是一个分布式数据库？" class="headerlink" title="区块链仅仅是一个分布式数据库？"></a>区块链仅仅是一个分布式数据库？</h2><p>区块链是一种按时间顺序存储数据的账本，它是跨越多个结点的分布式数据库。但和Cloudant分布式数据库的意义不同：它并不是把数据分割成片，使工作量散布，从而每片就能搞定一部分。它的网络中，所有节点必须处理所有的数据变化。还有，挖矿的节点执行工作量证明(proof-of-work)，来证明节点有资格实施所预计的改变，这个造成写数据的过程极度缓慢，以太坊每秒只能处理20-30个交易(不是每个用户20-30个交易，而是全部区块链)。</p>
<p>以太坊不仅是一个数据仓库。它增加了新的功能：在区块链中封装代码和数据。这样参与各方可以确信一个合约能够说到做到。与签过名的纸上合约，律师，公证，银行，保险，清算相比，大有不同。</p>
<h2 id="区块链和智能合约能做什么？"><a href="#区块链和智能合约能做什么？" class="headerlink" title="区块链和智能合约能做什么？"></a>区块链和智能合约能做什么？</h2><p>以太坊只是智能合约平台的一种，用它可以构建基于区块链的应用。最合适的用例有：</p>
<ul>
<li>从一方转移价值到另一方</li>
<li>一方或几方需要匿名</li>
<li>价值必须存储在合约本身，并且存储一段时间</li>
<li>希望避免转移真实货币产生的交易费用 需要建立共识 </li>
<li>希望显示公开性，把状态存储在公共域</li>
<li>需要确保物理或虚拟材料的来源和真实性</li>
</ul>
<p>马上想到的应用有：拍卖，借贷，遗嘱，注册，众筹，股权，和投票。</p>
<p>从金钱和计算角度看，写操作是很贵的，所以智能合约多用在写操作少，但是数据价值高的应用。尽管读操作是免费的，只存在一些简单的查询操作。你可以给存储的数据加索引，但还不像一般的数据库，它不存在查询语言，也不存在抽取或聚合数据的方式。</p>
<p>区块链还有另外一些缺点。所有网络中的参与方要存储所有的区块，数据不是分割成可以分别搞定的片段，所以每个节点必须存储整个数据库，并且处理每一个变化。用工作量证明模型，在网络中分布信赖，是一种聪明的迂回解决方案，但是实际情况下，要用千万个节点消耗能量来证明节点值得信赖。最后一点，以太的价值，就像比特币，买卖受投机影响，使得以太的金融价值不稳定。以太坊在发展规划中有性能提升，可扩展性，替换工作量证明，但是在笔者写此文时，它们还只是愿景。</p>
<h2 id="原文链接"><a href="#原文链接" class="headerlink" title="原文链接"></a>原文链接</h2><p>中文原文：<a href="http://ethfans.org/posts/block-chain-technology-smart-contracts-and-ethereum" target="_blank" rel="external">http://ethfans.org/posts/block-chain-technology-smart-contracts-and-ethereum</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Vue与API请求遇到的坑]]></title>
      <url>https://blog.patrickcty.cc/2017/11/07/Vue%E4%B8%8EAPI%E8%AF%B7%E6%B1%82%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/</url>
      <content type="html"><![CDATA[<h2 id="开始之前"><a href="#开始之前" class="headerlink" title="开始之前"></a>开始之前</h2><p>最近在写比赛项目 TeamSeeker 的代码，后台写得差不多了，于是乎决定写一下网页前端来请求 API，顺便再次测试一下后台的合理性，同时也接触一下一直都想尝试的 Vue。只是没想到居然会遇到这么多坑。</p>
<h2 id="遇到的坑"><a href="#遇到的坑" class="headerlink" title="遇到的坑"></a>遇到的坑</h2><h3 id="初始化-Vue-项目"><a href="#初始化-Vue-项目" class="headerlink" title="初始化 Vue 项目"></a>初始化 Vue 项目</h3><p>本来只是准备写单个的 HTML 来组织成前端的，后来想来想去还是跟着教程用 Webpack 来初始化一个比较大的项目。</p>
<p>但是项目是成功初始了，但是在引用第三方的组件的时候，明明已经使用 npm 安装了但是就是引用不了 CSS。</p>
<p>去网上找了一圈发现是没有在项目的配置文件中对这些文件类型进行配置，然而试了半天配置的还是不成功……</p>
<p>最后发现了一个简单的方法，就是在用 npm 安装模块的时候使用 -S 参数，这样就会自动保存在配置中了。这个参数表示保存的意思，等同于 <code>--save</code>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i materialize-css -S</div></pre></td></tr></table></figure>
<h3 id="发送请求时候的跨域问题"><a href="#发送请求时候的跨域问题" class="headerlink" title="发送请求时候的跨域问题"></a>发送请求时候的跨域问题</h3><p>因为使用的是前后端分离的设计思想，因此难免会产生跨域问题。其实这个问题我之前遇到过，当时是直接在返回的内容中带上 <code>Access-Control-Allow-Origin</code> 这个请求头。</p>
<p>不过坑爹的是，在有的时候，在发送跨域请求之前，浏览器会发送 OPTIONS 请求来检查服务器有没有返回 <code>Access-Control-Allow-Origin</code> 这个请求头从而判断服务器是否支持跨域。于是问题就来了，因为我根本没有定义这个方法，因此也自然不会返回这个请求头了，于是就产生了跨域的问题……</p>
<p>不过这个问题在 Google 上找到了答案，具体原理就是在服务器自定义 Response 类，使得在每次请求后都返回所需要的请求头，这样就可以解决这个问题了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">class MyResponse(Response):</div><div class="line">    def __init__(self, response=None, **kwargs):</div><div class="line">        kwargs[&apos;headers&apos;] = &apos;&apos;</div><div class="line">        headers = kwargs.get(&apos;headers&apos;)</div><div class="line">        # 跨域控制</div><div class="line">        origin = (&apos;Access-Control-Allow-Origin&apos;, &apos;*&apos;)</div><div class="line">        methods = (&apos;Access-Control-Allow-Methods&apos;, &apos;HEAD, OPTIONS, GET, POST, DELETE, PUT&apos;)</div><div class="line">        if headers:</div><div class="line">            headers.add(*origin)</div><div class="line">            headers.add(*methods)</div><div class="line">        else:</div><div class="line">            headers = Headers([origin, methods])</div><div class="line">        kwargs[&apos;headers&apos;] = headers</div><div class="line">        return super().__init__(response, **kwargs)</div></pre></td></tr></table></figure>
<p>然后在 <code>create_app</code> 里面使用这个类：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">app.response_class = MyResponse</div></pre></td></tr></table></figure>
<p>原文参考<a href="https://blog.zengrong.net/post/2615.html" target="_blank" rel="external">这个博客</a>。</p>
<p>顺便一提，在解决这个问题的时候还出现了一个问题，那就是在请求第二页的时候不管后端前端怎么改都得不到正确的结果，结果找了半天发现是并没有第二页的内容……真的是智障了……</p>
<h3 id="使用-axios-无法将-response-保存下来"><a href="#使用-axios-无法将-response-保存下来" class="headerlink" title="使用 axios 无法将 response 保存下来"></a>使用 axios 无法将 response 保存下来</h3><p>axios 是 Vue 官方推荐的 AJAX 请求发送的模块，一个 GET 请求是这样发送的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">axios.get(&apos;http://example.com/api/index&apos;, &#123;</div><div class="line">    params: &#123;</div><div class="line">      &quot;page&quot;: page</div><div class="line">    &#125;</div><div class="line">&#125;)</div><div class="line">    .then(function (response) &#123;</div><div class="line">      console.log(response);</div><div class="line">    &#125;)</div><div class="line">    .catch(function (error) &#123;</div><div class="line">      console.log(error);</div><div class="line">    &#125;)</div></pre></td></tr></table></figure>
<p>但是我如果想保存 response 对象到 Vue 的一个对象中（需要使用 this） 来访问，如果直接使用 <code>this.$store.dispatch(&#39;getIndex&#39;, response.data);</code> 是不能保存进去的，原因在于 this 在 axios.get() 函数中也起作用，在函数中的作用域就不是 Vue 的对象了，因此我们要在调用函数之前把 this 赋值给另一个变量，然后再用另一个变量来引用 Vue 的对象的内容：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var _self = this;</div><div class="line">axios.get(</div><div class="line">    ...</div><div class="line">    _this.$store.dispatch(&apos;getIndex&apos;, response.data);</div><div class="line">)</div></pre></td></tr></table></figure>
<h3 id="数据首次加载"><a href="#数据首次加载" class="headerlink" title="数据首次加载"></a>数据首次加载</h3><p>这个到现在还是不是很清楚，先留个坑。</p>
<h3 id="使用-axios-发送-POST-请求遇到的坑"><a href="#使用-axios-发送-POST-请求遇到的坑" class="headerlink" title="使用 axios 发送 POST 请求遇到的坑"></a>使用 axios 发送 POST 请求遇到的坑</h3><p>继使用 axios 发送 GET 请求遇到坑之后，用 POST 请求又踩到了坑，真的是体验极差啊（哭。</p>
<p>这次又是什么问题呢？那就是：</p>
<blockquote>
<p>Request header field Access-Control-Allow-Headers is not allowed by Access-Control-Allow-Headers</p>
</blockquote>
<p>为什么会出现这个问题呢？又是 OPTIONS 这个磨人的小妖精……StackOverflow 上是这样解释的：</p>
<blockquote>
<p>For cross-domain requests, setting the content type to anything other than application/x-www-form-urlencoded, multipart/form-data, or text/plain will trigger the browser to send a preflight OPTIONS request to the server.</p>
</blockquote>
<p>而 axios 发送 POST 请求的时候默认是用 JSON 作为 Content-Type 来发送了，而这正好不是上面的这些，因此就又要提前发送一次 OPTIONS 请求，而正好我又没有对这个处理……</p>
<p>不过这次就不用改服务器的代码了，axios 官方已经给出了解决方法了，那就是把 Content-Type 设置为 <code>application/x-www-form-urlencoded</code>，然后再对 JSON 数据进行处理，具体方法如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">var qs = require(&apos;qs&apos;);</div><div class="line">axios.post(&apos;http://example.com/api/wxlogin&apos;,    </div><div class="line">    qs.stringify(&#123;</div><div class="line">        js_code: &apos;001U3te40K6KSD1Bpaf40DKAe40U3tel&apos;</div><div class="line">    &#125;)</div><div class="line">)</div><div class="line">    .then(function (response) &#123;</div><div class="line">        console.log(response);</div><div class="line">    &#125;)</div><div class="line">    .catch(function (error) &#123;</div><div class="line">        console.log(&apos;aaa&apos;, error);</div><div class="line">    &#125;)</div></pre></td></tr></table></figure>
<p>当然这个 qs 模块也是要事先安装的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i qs -S</div></pre></td></tr></table></figure>
<h3 id="使用-font-awesome-但是死活引入不了-CSS"><a href="#使用-font-awesome-但是死活引入不了-CSS" class="headerlink" title="使用 font-awesome 但是死活引入不了 CSS"></a>使用 font-awesome 但是死活引入不了 CSS</h3><p>网站当然少不了图标，一个比较简单好用的方法就是使用 font-awesome 提供的图标，平常我都是使用 CDN 来引入的，但是这个项目结构下好像不适合直接引入，而是应该使用 npm 安装模块。</p>
<p>但是安装之后死活找不到安装好的模块，也就无法引入了。于是不得不去安装 vue-awesome，然而这个的图标死活和文字对齐不了……这个简直不能忍啊，最后不得不又得回到 font-awesome。</p>
<p>又找了一圈之后发现是我安装的方法不对，我一开始是使用下面这个来安装的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i fontawesome -S（不要用这个安装！！！）</div></pre></td></tr></table></figure>
<p>确实提示已经安装成功了，但是不能用。我之后又使用了下面这个来安装：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i font-awesome -S</div></pre></td></tr></table></figure>
<p>加了中间这个短横线之后就可以引入了……虽然我发现安装后的提示都是一样的……简直坑爹啊……还是我大 Python 的 pip 要好用……</p>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>这几天真的踩了超多的坑，简单的一个页面结果写了一周才大概完成……中间的心酸真的是只有自己知道了……</p>
<p>最近一段时间也是事情堆起来了……哎只希望下次驾照考试能顺利一点吧……已经成了我心中的梦魇了……真的很害怕很无助……</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[MATLAB一些操作]]></title>
      <url>https://blog.patrickcty.cc/2017/11/07/MATLAB%E4%B8%80%E4%BA%9B%E6%93%8D%E4%BD%9C/</url>
      <content type="html"><![CDATA[<h2 id="syms"><a href="#syms" class="headerlink" title="syms"></a>syms</h2><p>使用 syms 关键字可以定义自变量，这样就可以写出带 x，y，z 等的表达式。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">syms x, y;</div><div class="line"></div><div class="line">y = exp(-2 * x);</div></pre></td></tr></table></figure>
<h2 id="prod"><a href="#prod" class="headerlink" title="prod"></a>prod</h2><p>使用 prod 可以实现矩阵中的元素连乘的效果。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">x = [3 4 5];</div><div class="line">prod(x)</div><div class="line">&gt;&gt; 120</div></pre></td></tr></table></figure>
<h2 id="循环遍历一个向量"><a href="#循环遍历一个向量" class="headerlink" title="循环遍历一个向量"></a>循环遍历一个向量</h2><p>直接把向量赋值给循环变量。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">a = [4 5 6]；</div><div class="line"></div><div class="line">for i = a</div><div class="line">    % disp 为输出语句</div><div class="line">    disp(i);</div><div class="line">end</div></pre></td></tr></table></figure>
<h2 id="subs"><a href="#subs" class="headerlink" title="subs"></a>subs</h2><p>subs 用来替换。</p>
<p>假设 poly 是一个以 x 为自变量的多项式，如果要计算某个值：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">subs(poly, x, 5)</div></pre></td></tr></table></figure>
<h2 id="在向量中增加元素"><a href="#在向量中增加元素" class="headerlink" title="在向量中增加元素"></a>在向量中增加元素</h2><p>假设 event 是一个向量，如果要增加一个 b 向量在尾部，则：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">event = [event b]</div></pre></td></tr></table></figure>
<h2 id="ezplot"><a href="#ezplot" class="headerlink" title="ezplot"></a>ezplot</h2><p>ezplot 用来画出某个带自变量的表达式的曲线，可以指定自变量的范围。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">% polyresult 为多项式表达式</div><div class="line">ezplot(polyresult, [-1, 1]);</div></pre></td></tr></table></figure>
<h2 id="plot"><a href="#plot" class="headerlink" title="plot"></a>plot</h2><p>最基本的画曲线的函数，根据横纵坐标。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">plot(x0, errevent, &apos;--&apos;, x0, errcheby);</div></pre></td></tr></table></figure>
<h2 id="figure"><a href="#figure" class="headerlink" title="figure"></a>figure</h2><p>新建一张画布，下一个图就会画在这个画布上了。</p>
<h2 id="hold-on-amp-hold-off"><a href="#hold-on-amp-hold-off" class="headerlink" title="hold on &amp; hold off"></a>hold on &amp; hold off</h2><p>用来把多个曲线画在同一个坐标系中。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">figure;</div><div class="line">ezplot(polyresult, [-1, 1]);</div><div class="line">hold on;</div><div class="line">syms x0;</div><div class="line">ezplot(exp(-2 * x0), [-1, 1]);</div><div class="line">hold off;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[数据库ROLLUP与CUBE]]></title>
      <url>https://blog.patrickcty.cc/2017/11/07/%E6%95%B0%E6%8D%AE%E5%BA%93ROLLUP%E4%B8%8ECUBE/</url>
      <content type="html"><![CDATA[<h2 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h2><p>ROLLUP 和 CUBE 都是用来在差查询结果中生成合计的项目。</p>
<p>这两个关键字需要和 GROUP BY 来一起使用，需要注意的是 GROUP BY 关键字后面可以跟多个列名，这多个列名之间的顺序和输出的顺序是相关的。</p>
<p>ROLLUP 和 CUBE 的操作都要依赖 GROUP BY。</p>
<h2 id="GROUPING"><a href="#GROUPING" class="headerlink" title="GROUPING"></a>GROUPING</h2><p>GROUPING 用来区分是本来内容就是 null 还是是因为 ROLLUP 和 CUBE 而产生的 null 值，如果是后者那么 GROUPING(列名) 返回的结果就是 1，否则则是零。</p>
<p>ROLLUP 统计的时候会默认生成 null，这时候就需要自己填入统计的结果了。</p>
<h2 id="ROLLUP"><a href="#ROLLUP" class="headerlink" title="ROLLUP"></a>ROLLUP</h2><p>ROLLUP 产生的合计项目和 GROUP BY 中的多个列名的顺序有关。</p>
<p>ROLLUP 会根据 GROUP BY 的第一个列来进行分组并且输出汇总的内容。</p>
<p>例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">select case when grouping(city) = 1 then &apos;ALL&apos;</div><div class="line">	else city </div><div class="line">	end as city,</div><div class="line">	case when grouping(state) = 1 then &apos;ALL&apos;</div><div class="line">	else state</div><div class="line">	end as state</div><div class="line">from pubs.dbo.authors</div><div class="line">group by city, state with rollup;</div></pre></td></tr></table></figure>
<p>运行结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Ann Arbor	MI</div><div class="line">Ann Arbor	ALL</div><div class="line">……省略若干行</div><div class="line">Vacaville	CA</div><div class="line">Vacaville	ALL</div><div class="line">Walnut Creek	CA</div><div class="line">Walnut Creek	ALL</div><div class="line">ALL	ALL</div></pre></td></tr></table></figure></p>
<p>在这里是对应的每个不同的州进行分组，然后对每个组进行汇总，最终对所有的州再进行一次汇总。</p>
<h2 id="CUBE"><a href="#CUBE" class="headerlink" title="CUBE"></a>CUBE</h2><p>CUBE 产生的合计项目和 GROUP BY 中的多个列名的顺序在某种程度上可以说是无关。</p>
<p>CUBE 产生的结果不仅会产生 ROLLUP 的结果，还会产生 ROLLUP 中没出现的另一种顺序的结果。</p>
<p>例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">select case when grouping(city) = 1 then &apos;ALL&apos;</div><div class="line">	else city </div><div class="line">	end as city,</div><div class="line">	case when grouping(state) = 1 then &apos;ALL&apos;</div><div class="line">	else state</div><div class="line">	end as state</div><div class="line">from pubs.dbo.authors</div><div class="line">group by city, state with cube;</div></pre></td></tr></table></figure></p>
<p>结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">Berkeley	CA</div><div class="line">Covelo	CA</div><div class="line">Menlo Park	CA</div><div class="line">Oakland	CA</div><div class="line">Palo Alto	CA</div><div class="line">San Francisco	CA</div><div class="line">San Jose	CA</div><div class="line">Vacaville	CA</div><div class="line">Walnut Creek	CA</div><div class="line">ALL	CA</div><div class="line">Gary	IN</div><div class="line">ALL	IN</div><div class="line">Lawrence	KS</div><div class="line">ALL	KS</div><div class="line">Rockville	MD</div><div class="line">ALL	MD</div><div class="line">Ann Arbor	MI</div><div class="line">ALL	MI</div><div class="line">Corvallis	OR</div><div class="line">ALL	OR</div><div class="line">Nashville	TN</div><div class="line">ALL	TN</div><div class="line">Salt Lake City	UT</div><div class="line">ALL	UT</div><div class="line">ALL	ALL</div><div class="line">Ann Arbor	ALL</div><div class="line">Berkeley	ALL</div><div class="line">Corvallis	ALL</div><div class="line">Covelo	ALL</div><div class="line">Gary	ALL</div><div class="line">Lawrence	ALL</div><div class="line">Menlo Park	ALL</div><div class="line">Nashville	ALL</div><div class="line">Oakland	ALL</div><div class="line">Palo Alto	ALL</div><div class="line">Rockville	ALL</div><div class="line">Salt Lake City	ALL</div><div class="line">San Francisco	ALL</div><div class="line">San Jose	ALL</div><div class="line">Vacaville	ALL</div><div class="line">Walnut Creek	ALL</div></pre></td></tr></table></figure></p>
<p>如果忽视输出数据的顺序，那么这个结果相当于两个 ROLLUP 的结果作 UNION<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">select case when grouping(city) = 1 then &apos;ALL&apos;</div><div class="line">	else city </div><div class="line">	end as city,</div><div class="line">	case when grouping(state) = 1 then &apos;ALL&apos;</div><div class="line">	else state</div><div class="line">	end as state</div><div class="line">from pubs.dbo.authors</div><div class="line">group by city, state with rollup</div><div class="line">union</div><div class="line">select case when grouping(city) = 1 then &apos;ALL&apos;</div><div class="line">	else city </div><div class="line">	end as city,</div><div class="line">	case when grouping(state) = 1 then &apos;ALL&apos;</div><div class="line">	else state</div><div class="line">	end as state</div><div class="line">from pubs.dbo.authors</div><div class="line">group by state, city with rollup;</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[微信小程序学习]]></title>
      <url>https://blog.patrickcty.cc/2017/11/07/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>全局配置文件为 app.json，在项目的根目录中。</p>
<p>配置详情参考<a href="https://mp.weixin.qq.com/debug/wxadoc/dev/framework/config.html" target="_blank" rel="external">官方文档</a>。</p>
<p>要注意的是主体页面的颜色要和微信的颜色保持一致为白色，但是状态栏以及标签页这些地方可以是自己喜欢的颜色。</p>
<h2 id="登录状态的维护"><a href="#登录状态的维护" class="headerlink" title="登录状态的维护"></a>登录状态的维护</h2><p>和其他媒介一样，微信小程序本质上是内容的载体，因而我们也要有一个后台服务器来为小程序提供内容。</p>
<p>从小程序登录微信是极其容易的一件事情，但是我们的后台 api 怎么知道用户是不是真的登录了呢？那就要通过微信提供的 api 来验证了。</p>
<p>在微信的 <code>wx.login()</code> api 中，如果成功登录，则会返回一个登录凭证 code，小程序可以把这个 code 传递给 后台服务器，然后后台服务器通过调用微信的验证 api 来测试登录状态，如果成功则会返回 session_key 到后台服务器（这个 session_key 是密钥，不应该传输到小程序客户端）。</p>
<p>而小程序和普通的浏览器不一样，是不能存储 cookie 的，因此 cookie 相关应该存储到服务器中，而服务器应该把存储 cookie 的 key 来返回给小程序，小程序之后就通过这个 key 来向服务器进行请求。</p>
<p>注意这里有两个登录状态，一个是小程序中微信号的登录状态，第二个是服务器中的登录状态。后者是依托于前者，如果前者过期重新登录，则必须要更新服务的的登录状态。</p>
<p>这样设置的好处是控制了服务器的资源不能被随意获取。</p>
<p><a href="http://www.jianshu.com/p/c5f6c98b2685" target="_blank" rel="external">参考资料</a></p>
<h2 id="杂"><a href="#杂" class="headerlink" title="杂"></a>杂</h2><p><code>wx.getStorageSync(key)</code> 是用来从本地缓存中同步获取指定 key 对应的内容。</p>
<p><code>wx.setStorageSync(key, value)</code> 把 value 存储到相应的 key 对应的内容中，会覆盖掉原来 key 对应的内容。</p>
<p><code>.unshift()</code> Array 的方法，用来在数组的首部添加一个或多个元素，添加几个元素就有几个参数。</p>
<p><code>.map()</code> Array 的方法，用 map 中的函数来处理 Array 中的每个数据。</p>
<p><code>=&gt;</code> 用来定义箭头函数，这个函数表达式的语法比函数表达式短。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// 一个参数时圆括号是可选的</div><div class="line">singleParam =&gt; &#123; statements; &#125;</div><div class="line">(singleParam) =&gt; &#123; statements; &#125;</div><div class="line"></div><div class="line">(param1, param2, …, paramN) =&gt; &#123; statements; &#125;</div><div class="line">(param1, param2, …, paramN) =&gt; expression</div><div class="line">// 等价于：(param1, param2, …, paramN) =&gt; &#123; return expression; &#125;</div><div class="line">/* 当删除大括号时，它将是一个隐式的返回值，这意味着我们不需要指定我们返回*/</div><div class="line"></div><div class="line">// 没有参数时必须要使用圆括号</div><div class="line">() =&gt; &#123; statements; &#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Consensus Algorithms]]></title>
      <url>https://blog.patrickcty.cc/2017/09/27/ConsensusAlgorithms/</url>
      <content type="html"><![CDATA[<h2 id="PoW-Proof-of-Work"><a href="#PoW-Proof-of-Work" class="headerlink" title="PoW(Proof of Work)"></a>PoW(Proof of Work)</h2><h3 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h3><p>PoW is a consensus strategy used in Bitcoin network.</p>
<p>In PoW, each node of the network is calculating a hash value of the constantly changing block header.</p>
<p>The consensus requires that the calculated value must be equal or small than a certain given value.</p>
<p>When one node obtains the relevant value, all other nodes must mutally validated in case of frauds. Then a new block is added to the blockchain.</p>
<h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><p>Bitcoin network regard the blockchain head as the input, including:</p>
<ul>
<li>version number(4 Bytes)</li>
<li>previous block hash(32 Bytes)</li>
<li>Merkle root(32 Bytes, formed by transactions in current block)</li>
<li>timestamp(4 Bytes)</li>
<li>bits(4 Bytes, representing the difficulty of the calculation)</li>
<li>nonce(4 Bytes, a random number, by changing which miners guess the solution)</li>
</ul>
<p>As has been mentioned above, miners changes the value of the nonce(and the timestamp) to guess the solution. And the function that is used to calculate the result is SHA256.</p>
<p>The solution or the target value is controlled by ‘bits’, and here is the computational formula：</p>
<blockquote>
<p>targe value = max target value / bits</p>
</blockquote>
<p>And max target value is a constant value:</p>
<blockquote>
<p>0x00000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF</p>
</blockquote>
<p>That is to say, the larger the ‘bits’ value is, the harder the target value can be guessed.</p>
<p>Above all, the procedures botcoin miners do to prove their work can be concluded with three steps:</p>
<ul>
<li>generate the Merkle Root Hash using transactions</li>
<li>combine all the fields as the input</li>
<li>change the nonce value in the blockchain head and calculate SHA256(SHA256(Block_Header)), compare it with the target value, if it is smaller then the proof is done</li>
</ul>
<h3 id="Other-PoW-Protocols"><a href="#Other-PoW-Protocols" class="headerlink" title="Other PoW Protocols"></a>Other PoW Protocols</h3><p>PoW needs a lot of computer calculations which is a waste of resources. To take advantage of the loss, some PoW protocols are designed to have some side-applications.</p>
<ul>
<li>Primecoin searches for special prime number chains to be used in mathematical research.</li>
<li>PoB(Proof of Burn) uses bitcoin instead of electricity to mine blocks.(It’s kind of similar to buying a lottery)</li>
</ul>
<h2 id="PoS-Proof-of-Stake"><a href="#PoS-Proof-of-Stake" class="headerlink" title="PoS(Proof of Stake)"></a>PoS(Proof of Stake)</h2><h3 id="Explanation-1"><a href="#Explanation-1" class="headerlink" title="Explanation"></a>Explanation</h3><p>PoS requires people to prove the ownership of the amount of currency, which means that preople with more currencies is more likely to forge the next block.</p>
<p>To avoid the result that the single richest prople domain the network, solutions are often proposed with the combination of the stake size. </p>
<p>P.S. PoS still has to calculate the hash value.</p>
<h3 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h3><p>Blackcoin uses a formula that looks for the lowest hash value in combination with the size of the stake.</p>
<p>In peercoin, older and larger sets of coins have a greater probability of mining the next block.</p>
<h2 id="PBFT-Practical-Byzantine-Fault-Tolerance"><a href="#PBFT-Practical-Byzantine-Fault-Tolerance" class="headerlink" title="PBFT(Practical Byzantine Fault Tolerance)"></a>PBFT(Practical Byzantine Fault Tolerance)</h2><h3 id="Explanation-2"><a href="#Explanation-2" class="headerlink" title="Explanation"></a>Explanation</h3><p>PBFT is a replication algorithm to tolerate byzantine faults.</p>
<p>A new block is determined in a round. </p>
<p>In each round, a primary would be selected according to some rules. And it is responsible for ording the transaction.</p>
<p>The whole process could be divided into three phrases: pre-prepared, prepared and commit. In each phrase, a node would enter next phrase if it has received votes from over 2/3 of all nodes.</p>
<p>P.S. PBFT requires that every node is known to the network.</p>
<h2 id="DPoS-Delegated-Proof-of-Stake"><a href="#DPoS-Delegated-Proof-of-Stake" class="headerlink" title="DPoS(Delegated Proof of Stake)"></a>DPoS(Delegated Proof of Stake)</h2><h3 id="Explanation-3"><a href="#Explanation-3" class="headerlink" title="Explanation"></a>Explanation</h3><p>In DPoS, miners get their priority to generate the blocks according to their stake. </p>
<p>Stakeholders elect their delegates to generate and validate a block, which will significantly improve the speed of confirmation.</p>
<p>Besides, the parameters of the network such as block size and block intervals could be tuned by elected delegates.</p>
<p>P.S. DPoS still has to calculate the hash value.</p>
<h2 id="Ripple"><a href="#Ripple" class="headerlink" title="Ripple"></a>Ripple</h2><h3 id="Explanation-4"><a href="#Explanation-4" class="headerlink" title="Explanation"></a>Explanation</h3><p>Ripple is a consensus algorithm that utilizes collectively-trusted subnetworks within the large network.</p>
<p>In this network, nodes are divided into two types:</p>
<ul>
<li>server: participate consensus process</li>
<li>client: only transfer funds</li>
</ul>
<p>In PBFT, nodes have to ask every node, but in Ripple each node only has a Unique Node List(UNL) to query.</p>
<p>When determining whether to put a transaction into the ledger, the server would query the nodes in UNL. If the received agreements have reached 80%, the transaction would be packed into the ledger.</p>
<h2 id="Tendermint"><a href="#Tendermint" class="headerlink" title="Tendermint"></a>Tendermint</h2><h3 id="Explanation-5"><a href="#Explanation-5" class="headerlink" title="Explanation"></a>Explanation</h3><p>In Tendermint, a new node is determined in a round. </p>
<p>A propser would be selected to broadcast an unconfirmed block in this round.</p>
<p>It would be devided into three steps:</p>
<ol>
<li>Prevote </li>
<li>Precommit</li>
<li>Commit</li>
</ol>
<p>Only if the node has received 2/3 or the agreement can it reach the next step. And when the node has received 2/3 of the commits, it accepts the block.</p>
<p>It’s similar to PBFT, but in this method nodes have to lock their coins to become validators.</p>
<p>P.S. Tendermint requires that every node is known to the network.</p>
<h2 id="More-Infomation"><a href="#More-Infomation" class="headerlink" title="More Infomation"></a>More Infomation</h2><ul>
<li><a href="http://www.infoq.com/cn/articles/bitcoin-and-block-chain-part02" target="_blank" rel="external">PoW</a></li>
<li><a href="http://www.jianshu.com/p/1e2acd3cbd9f" target="_blank" rel="external">PBFT</a></li>
<li><a href="http://blog.csdn.net/lsttoy/article/details/61624287" target="_blank" rel="external">PoW</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Flask常用扩展用法（二）]]></title>
      <url>https://blog.patrickcty.cc/2017/09/23/Flask%E5%B8%B8%E7%94%A8%E6%89%A9%E5%B1%95%E7%94%A8%E6%B3%95%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      <content type="html"><![CDATA[<h2 id="Flask-Restful"><a href="#Flask-Restful" class="headerlink" title="Flask-Restful"></a>Flask-Restful</h2><p>具体内容参考之前的<a href="https://blog.patrickcty.cc/2017/08/10/%E5%86%8D%E6%AC%A1%E7%90%86%E8%A7%A3Flask%E4%B8%ADRESTfulAPI/">文章</a>。</p>
<h2 id="Flask-Celery"><a href="#Flask-Celery" class="headerlink" title="Flask-Celery"></a>Flask-Celery</h2><p>这个用法比较多，之前的两篇文章也有总结过，可以参考之前的内容：</p>
<ul>
<li><a href="https://blog.patrickcty.cc/2017/09/01/%E5%86%8D%E6%AC%A1%E7%90%86%E8%A7%A3Flask%E4%B8%ADCelery%E7%9A%84%E7%94%A8%E6%B3%95%EF%BC%88%E4%B8%80%EF%BC%89/">第一篇</a></li>
<li><a href="https://blog.patrickcty.cc/2017/09/03/%E5%86%8D%E6%AC%A1%E7%90%86%E8%A7%A3Flask%E4%B8%ADCelery%E7%9A%84%E7%94%A8%E6%B3%95%EF%BC%88%E4%BA%8C%EF%BC%89/">第二篇</a></li>
</ul>
<h2 id="Flask-Debugtool"><a href="#Flask-Debugtool" class="headerlink" title="Flask-Debugtool"></a>Flask-Debugtool</h2><p>如同这个扩展的名字一样，这个扩展的作用就是为了使调试 Flask 应用变得更加的轻松愉快。</p>
<p>注意：这个扩展只有在配置文件的 Debug = True 的时候才会生效。</p>
<h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">from flask_debugtoolbar import DebugToolbarExtension</div><div class="line"></div><div class="line">debug_toolbar = DebugToolbarExtension()</div><div class="line">debug_toolbar.init_app(app)</div></pre></td></tr></table></figure>
<h3 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h3><p>默认情况下，Flask Debug Tool 会拦截 HTTP 302 重定向请求，修改配置文件来禁止这个行为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">DEBUG_TB_INTERCEPT_REDIRECTS = False</div></pre></td></tr></table></figure>
<h2 id="Flask-Cache"><a href="#Flask-Cache" class="headerlink" title="Flask-Cache"></a>Flask-Cache</h2><p>一个强大的缓存工具，可以有效减少数据库等的查询次数，从而极大程度加快页面的访问速度。</p>
<h3 id="初始化-1"><a href="#初始化-1" class="headerlink" title="初始化"></a>初始化</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">from flask_cache import Cache</div><div class="line"></div><div class="line">cache = Cache()</div><div class="line">cache.init_app(app)</div></pre></td></tr></table></figure>
<h3 id="配置缓存输出结果"><a href="#配置缓存输出结果" class="headerlink" title="配置缓存输出结果"></a>配置缓存输出结果</h3><p>这里是把结果保存在内存的一个 Python 字典里面<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">CACHE_TYPE = &apos;simple&apos;</div></pre></td></tr></table></figure></p>
<h3 id="缓存函数和视图"><a href="#缓存函数和视图" class="headerlink" title="缓存函数和视图"></a>缓存函数和视图</h3><h4 id="缓存视图函数"><a href="#缓存视图函数" class="headerlink" title="缓存视图函数"></a>缓存视图函数</h4><p>只用在函数上添加一个装饰器就可以缓存这个视图函数的输出结果了：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">@blog_print.route(&apos;/&apos;)</div><div class="line">@blog_print.route(&apos;/&lt;int:page&gt;&apos;)</div><div class="line">@cache.cached(timeout=60)</div><div class="line">def home(page=1):</div><div class="line">    posts = Post.query.order_by(</div><div class="line">        Post.publish_time.desc()</div><div class="line">    ).paginate(page, 10)</div><div class="line">    recent, top_tags = sidebar_data()</div><div class="line"></div><div class="line">    return render_template(</div><div class="line">        &apos;home.html&apos;,</div><div class="line">        posts=posts,</div><div class="line">        recent=recent,</div><div class="line">        top_tags=top_tags</div><div class="line">    )</div></pre></td></tr></table></figure>
<p>timeout 表示结果缓存的时长，超过这个时长就会再次执行函数取得新的缓存结果。</p>
<h4 id="缓存不带参数的函数"><a href="#缓存不带参数的函数" class="headerlink" title="缓存不带参数的函数"></a>缓存不带参数的函数</h4><p>非视图函数也可以缓存，不过要加入 key_prefix 参数，这个参数用来表示函数的运行结果。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">@cache.cached(timeout=7200, key_prefix=&apos;sidebar_data&apos;)</div><div class="line">def sidebar_data():</div><div class="line">    recent = Post.query.order_by(</div><div class="line">        Post.publish_time.desc()</div><div class="line">    ).limit(5).all()</div><div class="line">    # 下面这个查询不是很理解，join 和 group_by 这两个的用法没怎么接触过</div><div class="line">    top_tags = db.session.query(</div><div class="line">        Tag, func.count(tags.c.post_id).label(&apos;total&apos;)</div><div class="line">    ).join(</div><div class="line">        tags</div><div class="line">    ).group_by(Tag).limit(5).all()</div><div class="line"></div><div class="line">    return recent, top_tags</div></pre></td></tr></table></figure>
<h4 id="缓存带参数的函数"><a href="#缓存带参数的函数" class="headerlink" title="缓存带参数的函数"></a>缓存带参数的函数</h4><p>对于需要接受参数的函数，就不能直接加上装饰器了，不然每次运行的结果都是相同，这时候我们可以使用 memorize 函数来解决这个问题。</p>
<p>memorize 函数不但会储存函数的运行结果，还会储存调用时的参数，括号里面表示的也是缓存的秒数。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">@staticmethod</div><div class="line">@cache.memoize(60)</div><div class="line">def verify_auth_token(token):</div><div class="line">    s = Serializer(current_app.config[&apos;SECRET_KEY&apos;])</div><div class="line"></div><div class="line">    try:</div><div class="line">        data = s.loads(token)</div><div class="line">    except SignatureExpired:</div><div class="line">        return None</div><div class="line">    except BadSignature:</div><div class="line">        return None</div><div class="line">    user = User.query.get(data[&apos;id&apos;])</div><div class="line">    return user</div></pre></td></tr></table></figure>
<h3 id="使用-redis-作为缓存后端"><a href="#使用-redis-作为缓存后端" class="headerlink" title="使用 redis 作为缓存后端"></a>使用 redis 作为缓存后端</h3><p>redis 我们在 Flask-Celery 里面用到过，用来储存消息队列相关内容，在这里我们也可以利用 redis 来缓存更多的结果。</p>
<p>只用修改配置文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">class ProdConfig(Config):</div><div class="line">    CACHE_TYPE = &apos;redis&apos;</div><div class="line">    CACHE_REDIS_HOST = &apos;localhost&apos;</div><div class="line">    CACHE_REDIS_PORT = &apos;6379&apos;</div><div class="line">    CACHE_REDIS_PASSWORD = &apos;&apos;</div><div class="line">    CACHE_REDIS_DB = &apos;0&apos;</div></pre></td></tr></table></figure>
<h2 id="Flask-Admin"><a href="#Flask-Admin" class="headerlink" title="Flask-Admin"></a>Flask-Admin</h2><p>强大的管理员管理界面，省去了不少造轮子的功夫。</p>
<h3 id="初始化-2"><a href="#初始化-2" class="headerlink" title="初始化"></a>初始化</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">from flask_admin import Admin</div><div class="line"></div><div class="line">admin = Admin()</div><div class="line">admin.init_app(app)</div></pre></td></tr></table></figure>
<p>初始化之后这个扩展就自动在 localhost:5000/admin 处显示出了相应的管理员页面。</p>
<h3 id="编写基础管理页面"><a href="#编写基础管理页面" class="headerlink" title="编写基础管理页面"></a>编写基础管理页面</h3><p>BaseView 是用来在 admin 的主界面添加相应的视图选项。</p>
<p>现在我们在 localhost:5000/admin 之后添加一个 customview 的选项。例如生成 localhost:5000/admin/customview/ 的路径</p>
<p>由于也要创建视图，所以在视图函数所在的文件/文件夹 里面加入以下的代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">from flask_admin import BaseView, expose</div><div class="line"></div><div class="line">class CustomView(BaseView):</div><div class="line">    @expose(&apos;/&apos;)</div><div class="line">    @login_required</div><div class="line">    @admin_permission.require(http_exception=403)</div><div class="line">    def index(self):</div><div class="line">        return self.render(&apos;admin/custom.html&apos;)</div><div class="line"></div><div class="line">    @expose(&apos;/second_page&apos;)</div><div class="line">    @login_required</div><div class="line">    @admin_permission.require(http_exception=403)</div><div class="line">    def second_page(self):</div><div class="line">        return self.render(&apos;admin/second_page.html&apos;)</div></pre></td></tr></table></figure>
<p>这个类名就是默认的路由的名字（localhost:5000/admin/customview/）了，还可以定义更多的子路由，定义的方法就是使用 expose 装饰器。</p>
<p>注意这里必须要有一个暴露‘/’路由的方法来作为选项的根路径。</p>
<p>为了保持风格的统一性，我们的模板也应该继承 Flask Admin 的默认样式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;% extends &apos;admin/master.html&apos; %&#125;</div><div class="line">&#123;% block body %&#125;</div><div class="line">    Test custom view.</div><div class="line">    &lt;a href=&quot;&#123;&#123; url_for(&apos;.second_page&apos;) &#125;&#125;&quot;&gt;Link&lt;/a&gt;</div><div class="line">&#123;% endblock %&#125;</div></pre></td></tr></table></figure>
<p>基本工作已经做完了，但是要让这些生效，必须在 admin 对象上注册一个 CustomView 的实例，这个是在 create_app 函数中完成的，而不是在 extensions 中。因为渲染管理页面需要用到数据库对象，如果放在 extensions 则可能会发生循环导入。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># name 参数用来表示导航条中的文本</div><div class="line">admin.add_view(CustomView(name=&apos;Custom&apos;))</div></pre></td></tr></table></figure>
<h3 id="编写数据库管理页面"><a href="#编写数据库管理页面" class="headerlink" title="编写数据库管理页面"></a>编写数据库管理页面</h3><p>Flask Admin 最强大的地方就是它可以直接管理 SQLAlchemy 模型，让对数据库的操作直接在 GUI 中完成。</p>
<p>完成这样的功能同样也需要在视图函数文件处进行初始化：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">from flask_admin.contrib.sqla import ModelView</div><div class="line">from flask_admin.contrib.fileadmin import FileAdmin</div><div class="line"></div><div class="line">class CustomModelView(ModelView):</div><div class="line">    pass</div></pre></td></tr></table></figure>
<p>也要在 create_app 的地方注册，这里要把所需要的表注册进去：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">models = [User, Reminder, Post, Role, Comment, Contact, Tag]</div><div class="line"></div><div class="line">for model in models:</div><div class="line">    # category 参数相同的部分就会放在导航栏的同一个下拉菜单中</div><div class="line">    admin.add_view(CustomModelView(model, db.session, category=&apos;Models&apos;))</div></pre></td></tr></table></figure>
<h3 id="编写文件系统管理页面"><a href="#编写文件系统管理页面" class="headerlink" title="编写文件系统管理页面"></a>编写文件系统管理页面</h3><p>除了直接访问数据库内容，Flask Admin 还可以从网页访问服务器的文件系统。</p>
<p>首先也需要在视图函数文件处进行初始化<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">from flask_admin.contrib.fileadmin import FileAdmin</div><div class="line"></div><div class="line">class CustomFileAdmin(FileAdmin):</div><div class="line">    pass</div></pre></td></tr></table></figure></p>
<p>然后只需要把 CustomFileAdmin 类注册到 admin 中就可以访问了：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">admin.add_view(CustomFileAdmin(</div><div class="line">    os.path.join(os.path.dirname(__file__), &apos;static&apos;),</div><div class="line">    &apos;/static/&apos;,</div><div class="line">    name=&apos;Static Files&apos;</div><div class="line">))</div></pre></td></tr></table></figure>
<h3 id="保护-Flask-Admin-的安全"><a href="#保护-Flask-Admin-的安全" class="headerlink" title="保护 Flask Admin 的安全"></a>保护 Flask Admin 的安全</h3><p>既然是 Admin，那自然只有管理员才能访问了，所以我们要加入相应的权限。</p>
<p>首先也应该在自定义路由加入 login_require, admin_permission.require() 装饰器来声明权限：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">class CustomView(BaseView):</div><div class="line">    @expose(&apos;/&apos;)</div><div class="line">    @login_required</div><div class="line">    @admin_permission.require(http_exception=403)</div><div class="line">    def index(self):</div><div class="line">        return self.render(&apos;admin/custom.html&apos;)</div><div class="line"></div><div class="line">    @expose(&apos;/second_page&apos;)</div><div class="line">    @login_required</div><div class="line">    @admin_permission.require(http_exception=403)</div><div class="line">    def second_page(self):</div><div class="line">        return self.render(&apos;admin/second_page.html&apos;)</div></pre></td></tr></table></figure>
<p>再就是在 MobileView 和 FileAdmin 中定义 is_accessible 方法来控制权限：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">class CustomModelView(ModelView):</div><div class="line">    def is_accessible(self):</div><div class="line">        return current_user.is_authenticated and admin_permission.can()</div><div class="line">        </div><div class="line">        </div><div class="line">class CustomFileAdmin(FileAdmin):</div><div class="line">    def is_accessible(self):</div><div class="line">        return current_user.is_authenticated and admin_permission.can()</div></pre></td></tr></table></figure>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>常用的扩展差不多就是这么多了，Flask 的一个强大的地方就是它自定义扩展很容易，所以市面上 Flask 扩展有很多，实现的功能也很全面，就进一步减轻了完成一个 Flask App 的工作量。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Flask常用扩展用法]]></title>
      <url>https://blog.patrickcty.cc/2017/09/18/Flask%E5%B8%B8%E7%94%A8%E6%89%A9%E5%B1%95%E7%94%A8%E6%B3%95/</url>
      <content type="html"><![CDATA[<h2 id="Flask-SQLAlchemy"><a href="#Flask-SQLAlchemy" class="headerlink" title="Flask-SQLAlchemy"></a>Flask-SQLAlchemy</h2><p>强大的 ORM 工具，让对数据库的操作变得简单。</p>
<h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">from flask_sqlalchemy import SQLAlchemy</div><div class="line"></div><div class="line">db = SQLAlchemy()</div><div class="line">db.init_app(app)</div></pre></td></tr></table></figure>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># 根据实际的数据库类型来确定 URI</div><div class="line">SQLALCHEMY_DATABASE_URI = &apos;sqlite:///&apos; + os.path.join(basedir, &apos;dev.sqlite&apos;)</div><div class="line">SQLALCHEMT_ECHO = True  # 可选</div><div class="line">SQLALCHEMY_TRACK_MODIFICATIONS = True  # 需要显式指明</div></pre></td></tr></table></figure>
<h3 id="创建模型"><a href="#创建模型" class="headerlink" title="创建模型"></a>创建模型</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">class Role(db.Model):</div><div class="line">    id = db.Column(db.Integer, primary_key=True)</div><div class="line">    name = db.Column(db.String(80), unique=True)</div><div class="line">    description = db.Column(db.String(255))</div><div class="line"></div><div class="line">    def __init__(self, name=&apos;default&apos;):</div><div class="line">        self.name = name</div><div class="line"></div><div class="line">    def __repr__(self):</div><div class="line">        return &apos;&lt;Role &#123;&#125;&gt;&apos;.format(self.name)</div></pre></td></tr></table></figure>
<h3 id="操作数据库"><a href="#操作数据库" class="headerlink" title="操作数据库"></a>操作数据库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">db.create_all()</div><div class="line">db.session.query()</div><div class="line">db.session.add()</div><div class="line">db.session.commit()</div><div class="line">db.session.flush()</div><div class="line">db.drop_all()</div></pre></td></tr></table></figure>
<h2 id="Flask-Login"><a href="#Flask-Login" class="headerlink" title="Flask-Login"></a>Flask-Login</h2><p>好用的登录控制扩展，功能全面并且强大。</p>
<h3 id="初始化-1"><a href="#初始化-1" class="headerlink" title="初始化"></a>初始化</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">from flask-login import LoginManger</div><div class="line"></div><div class="line">login_manger.login_view = &apos;main.login&apos;</div><div class="line">login_manger.session_protection = &apos;strong&apos;</div><div class="line">login_manger.login_message = &apos;请登录以访问该页面&apos;</div><div class="line">login_manger.login_message_category = &apos;info&apos;</div><div class="line"></div><div class="line">login_manger.init_app(app)</div></pre></td></tr></table></figure>
<h3 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h3><p>需要在用户类里面实现特定的方法，或直接继承 UserMixin，注意如果用户的主键不是 id 则要自己实现 user_loader() 方法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">from flask_login import UserMixin, AnonymousUserMixin</div><div class="line"></div><div class="line">class User(db.Model, UserMixin):</div><div class="line">    id = db.Column(db.Integer, primary_key=True)</div><div class="line">    username = db.Column(db.String(255))</div><div class="line">    password = db.Column(db.String(255))</div><div class="line">    </div><div class="line"></div><div class="line">class AnonymousUser(AnonymousUserMixin):</div><div class="line">    pass</div></pre></td></tr></table></figure></p>
<h3 id="作为函数的装饰器"><a href="#作为函数的装饰器" class="headerlink" title="作为函数的装饰器"></a>作为函数的装饰器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">@main_blueprint.route(&apos;/logout&apos;, methods=[&apos;GET&apos;, &apos;POST&apos;])</div><div class="line">@login_required</div><div class="line">def logout():</div><div class="line">    logout_user()</div><div class="line">    flash(&apos;登出成功！&apos;, category=&apos;success&apos;)</div><div class="line">    return redirect(url_for(&apos;blog.home&apos;))</div></pre></td></tr></table></figure>
<h3 id="登入登出"><a href="#登入登出" class="headerlink" title="登入登出"></a>登入登出</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">login_user(user, remember=form.remember_me.data)</div><div class="line">logout_user()</div></pre></td></tr></table></figure>
<h3 id="获得当前用户对象"><a href="#获得当前用户对象" class="headerlink" title="获得当前用户对象"></a>获得当前用户对象</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">from flask-login import current_user</div></pre></td></tr></table></figure>
<p>在 Jinja2 模板中可以直接调用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;&#123; current_user.name &#125;&#125;</div></pre></td></tr></table></figure>
<h2 id="Flask-Bcrypt"><a href="#Flask-Bcrypt" class="headerlink" title="Flask-Bcrypt"></a>Flask-Bcrypt</h2><p>用来生成和检查加密字符串，常用作密码管理。</p>
<h3 id="初始化-2"><a href="#初始化-2" class="headerlink" title="初始化"></a>初始化</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">from flask-bcrypt import Bcrypt</div><div class="line"></div><div class="line">bcrypt = Bcrypt()</div><div class="line">bcrypt.init_app(app)</div></pre></td></tr></table></figure>
<h3 id="生成与检验密码"><a href="#生成与检验密码" class="headerlink" title="生成与检验密码"></a>生成与检验密码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"># property 装饰器将方法封装成了属性</div><div class="line">@property</div><div class="line">def passwd(self):</div><div class="line">    raise AttributeError(&apos;密码不可读！&apos;)</div><div class="line"></div><div class="line"># 通过下面的方法来实现直接对“属性”赋值</div><div class="line"># self.passwd = &apos;aaa&apos;</div><div class="line">@passwd.setter</div><div class="line">def passwd(self, password):</div><div class="line">    # 生成密码</div><div class="line">    self.password = bcrypt.generate_password_hash(password)</div><div class="line"></div><div class="line">def verify_password(self, password):</div><div class="line">    # 检验密码</div><div class="line">    return bcrypt.check_password_hash(self.password, password)</div></pre></td></tr></table></figure>
<h2 id="Flask-Principal"><a href="#Flask-Principal" class="headerlink" title="Flask-Principal"></a>Flask-Principal</h2><p>权限管理扩展。</p>
<h3 id="基本概念介绍"><a href="#基本概念介绍" class="headerlink" title="基本概念介绍"></a>基本概念介绍</h3><h4 id="Identity"><a href="#Identity" class="headerlink" title="Identity"></a>Identity</h4><p>Identity 用来表示身份，而 Need 是 Identity 的一部分，用来表示具体的权限。</p>
<p>Identity 一般在身份状态改变的时候创建，此时也会发出 identity_loaded 的信号，例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">identity_changed.send(current_app._get_current_object(),</div><div class="line">                      identity=Identity(user.id))</div></pre></td></tr></table></figure>
<p>Identity 使用用户的 id 来表示用户以及创建对象。</p>
<h4 id="Need"><a href="#Need" class="headerlink" title="Need"></a>Need</h4><p>Need 如上面所说是用来表示具体的权限，是用 namedtuple 来实现的。</p>
<p>namedtuple 是 Python collections 模块中的一个数据结构，实现类似 C 语言中 struct 的作用。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; from collections import namedtuple</div><div class="line">&gt;&gt;&gt; MyNT = namedtuple(&apos;tuple_name&apos;, [&apos;attr1&apos;, &apos;attr2&apos;])</div><div class="line">&gt;&gt;&gt; MyNT.__name__</div><div class="line">&apos;tuple_name&apos;</div><div class="line">&gt;&gt;&gt; nt = MyNT(&apos;this is the first attr&apos;, &apos;hello&apos;)</div><div class="line">&gt;&gt;&gt; nt.attr1</div><div class="line">&apos;this is the first attr&apos;</div></pre></td></tr></table></figure>
<p>Need 的定义如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Need = namedtuple(&apos;Need&apos;, [&apos;method&apos;, &apos;value&apos;])</div></pre></td></tr></table></figure>
<p>Need 一般是 tuple，之后在 Permission 初始化的时候会被转换为 set，set 的基本元素是 Need。</p>
<p>UserNeed 和 RoleNeed 是 Need 的两种典型的表现形式，前者用 user id 来表示 method（个人感觉和 Identity 有些重叠），后者用 role 表示 method 作为权限。它们使用 Python 的 functools 中的 partial 来固定了 Need 的 method。</p>
<p>partial 一般用来固定函数的某个参数的值，产生一个偏函数，例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; pow(2, 3)</div><div class="line">8</div><div class="line">&gt;&gt;&gt; from functools import partial</div><div class="line">&gt;&gt;&gt; my_pow = partial(pow, 2)  # 固定了 2 作为了 pow 的第一个参数</div><div class="line">&gt;&gt;&gt; my_pow(5)</div><div class="line">32</div></pre></td></tr></table></figure>
<p>RoleNeed 和 UserNeed 就是这样产生的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">RoleNeed = partial(Need, &apos;role&apos;)</div><div class="line">UserNeed = partial(Need, &apos;id&apos;)</div></pre></td></tr></table></figure>
<h4 id="Permission"><a href="#Permission" class="headerlink" title="Permission"></a>Permission</h4><p>Permission 用来表示权限，和具体的 Identity 无关，但是可以用来判断当前的 Identity 是否具有相应的权限。</p>
<p>Permission 使用 Need 来初始化：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">admin_permission = Permission(RoleNeed(&apos;admin&apos;))</div><div class="line">poster_permission = Permission(RoleNeed(&apos;poster&apos;))</div><div class="line">default_permission = Permission(RoleNeed(&apos;default&apos;))</div></pre></td></tr></table></figure></p>
<p>使用 can() 方法来检测当前用户是否具有相应的权限。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">if not admin_permission.can():</div><div class="line">    abort(403)</div></pre></td></tr></table></figure></p>
<h4 id="关联"><a href="#关联" class="headerlink" title="关联"></a>关联</h4><p>使用 Permission 表示权限，Identity 表示用户，用户所拥有的权限用 Need 来表示，通过 Permission 来检测 Identity 里面是否具有相应的 Need 来判断这个用户是否有相应的权限。</p>
<h3 id="初始化-3"><a href="#初始化-3" class="headerlink" title="初始化"></a>初始化</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">from flask_principal import Principal, Permission, RoleNeed, identity_loaded()</div><div class="line"></div><div class="line">principals = Principal()</div><div class="line"># 定义了三种权限</div><div class="line">admin_permission = Permission(RoleNeed(&apos;admin&apos;))</div><div class="line">poster_permission = Permission(RoleNeed(&apos;poster&apos;))</div><div class="line">default_permission = Permission(RoleNeed(&apos;default&apos;))</div><div class="line"></div><div class="line">principals.init_app(app)</div><div class="line"></div><div class="line"># 当接收到 identity_loaded 信号时会被调用</div><div class="line"># 此时会将 Need 添加到相应的身份对象中</div><div class="line">@identity_loaded.connect_via(app)</div><div class="line">def on_identity_loaded(sender, identity):</div><div class="line">    identity.user = current_user</div><div class="line"></div><div class="line">    if hasattr(current_user, &apos;id&apos;):</div><div class="line">        identity.provides.add(UserNeed(current_user.id))</div><div class="line"></div><div class="line">    if hasattr(current_user, &apos;roles&apos;):</div><div class="line">        for role in current_user.roles:</div><div class="line">            identity.provides.add(RoleNeed(role.name))</div></pre></td></tr></table></figure>
<h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><p>作为装饰器或者直接调用 can() 方法来判断。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">@blog_print.route(&apos;/edit/&lt;int:post_id&gt;&apos;, methods=[&apos;GET&apos;, &apos;POST&apos;])</div><div class="line"># 没有 poster 权限无法访问</div><div class="line">@poster_permission.require(http_exception=403) </div><div class="line">@login_required</div><div class="line">def edit_post(post_id):</div><div class="line"></div><div class="line">    post = Post.query.get_or_404(post_id)</div><div class="line">    # 这个权限表示只有创建者才能访问</div><div class="line">    permission = Permission(UserNeed(post.user_id))</div><div class="line">    # 如果不是作者而是管理员则也可以访问</div><div class="line">    if not (permission.can() or admin_permission.can()):</div><div class="line">        abort(403)</div><div class="line"></div><div class="line">    ...</div></pre></td></tr></table></figure></p>
<h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><h4 id="Identity-1"><a href="#Identity-1" class="headerlink" title="Identity"></a>Identity</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">class Identity(object):</div><div class="line">    &quot;&quot;&quot;Represent the user&apos;s identity.</div><div class="line"></div><div class="line">    :param id: The user id</div><div class="line">    :param auth_type: The authentication type used to confirm the user&apos;s</div><div class="line">                      identity.</div><div class="line"></div><div class="line">    The identity is used to represent the user&apos;s identity in the system. This</div><div class="line">    object is created on login, or on the start of the request as loaded from</div><div class="line">    the user&apos;s session.</div><div class="line"></div><div class="line">    Once loaded it is sent using the `identity-loaded` signal, and should be</div><div class="line">    populated with additional required information.</div><div class="line"></div><div class="line">    Needs that are provided by this identity should be added to the `provides`</div><div class="line">    set after loading.</div><div class="line">    &quot;&quot;&quot;</div><div class="line">    def __init__(self, id, auth_type=None):</div><div class="line">        self.id = id</div><div class="line">        self.auth_type = auth_type</div><div class="line">        self.provides = set()</div><div class="line"></div><div class="line">    def can(self, permission):</div><div class="line">        &quot;&quot;&quot;Whether the identity has access to the permission.</div><div class="line"></div><div class="line">        :param permission: The permission to test provision for.</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        return permission.allows(self)</div><div class="line"></div><div class="line"></div><div class="line">class AnonymousIdentity(Identity):</div><div class="line">    &quot;&quot;&quot;An anonymous identity&quot;&quot;&quot;</div><div class="line"></div><div class="line">    def __init__(self):</div><div class="line">        Identity.__init__(self, None)</div></pre></td></tr></table></figure>
<p>Identity 接受 user id 作为参数，provides 属性是和 Permission 类似都是一个用来储存 Need 的 set，其中 provides 的内容在切换身份的时候添加。</p>
<p>Identity 可以使用 can() 方法来判断该 Identity 是否具有相应的权限，这个方法接受一个 Permission 来作为参数，实际上直接调用 Permission 的方法来检查权限。</p>
<p>而匿名 Identity 则是 id 为空的特殊 Identity。</p>
<h4 id="IdentityContext"><a href="#IdentityContext" class="headerlink" title="IdentityContext"></a>IdentityContext</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">class IdentityContext(object):</div><div class="line">    &quot;&quot;&quot;The context of an identity for a permission.</div><div class="line"></div><div class="line">    .. note:: The principal is usually created by the flaskext.Permission.require method</div><div class="line">              call for normal use-cases.</div><div class="line"></div><div class="line">    The principal behaves as either a context manager or a decorator. The</div><div class="line">    permission is checked for provision in the identity, and if available the</div><div class="line">    flow is continued (context manager) or the function is executed (decorator).</div><div class="line">    &quot;&quot;&quot;</div><div class="line"></div><div class="line">    def __init__(self, permission, http_exception=None):</div><div class="line">        self.permission = permission</div><div class="line">        self.http_exception = http_exception</div><div class="line">        &quot;&quot;&quot;The permission of this principal</div><div class="line">        &quot;&quot;&quot;</div><div class="line"></div><div class="line">    @property</div><div class="line">    def identity(self):</div><div class="line">        &quot;&quot;&quot;The identity of this principal</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        return g.identity</div><div class="line"></div><div class="line">    def can(self):</div><div class="line">        &quot;&quot;&quot;Whether the identity has access to the permission</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        return self.identity.can(self.permission)</div></pre></td></tr></table></figure>
<p>IdentityContext 通常通过 Permission.require() 方法来创建，它接受 Permission 作为参数，绑定的 Identity 是当前用户的 Identity（通过 g 来实现）。</p>
<h4 id="Permission-1"><a href="#Permission-1" class="headerlink" title="Permission"></a>Permission</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">class Permission(object):</div><div class="line">    &quot;&quot;&quot;Represents needs, any of which must be present to access a resource</div><div class="line"></div><div class="line">    :param needs: The needs for this permission</div><div class="line">    &quot;&quot;&quot;</div><div class="line">    def __init__(self, *needs):</div><div class="line">        &quot;&quot;&quot;A set of needs, any of which must be present in an identity to have</div><div class="line">        access.</div><div class="line">        &quot;&quot;&quot;</div><div class="line"></div><div class="line">        self.needs = set(needs)</div><div class="line">        self.excludes = set()</div><div class="line"></div><div class="line">    def require(self, http_exception=None):</div><div class="line">        &quot;&quot;&quot;Create a principal for this permission.</div><div class="line"></div><div class="line">        The principal may be used as a context manager, or a decroator.</div><div class="line"></div><div class="line">        If ``http_exception`` is passed then ``abort()`` will be called</div><div class="line">        with the HTTP exception code. Otherwise a ``PermissionDenied``</div><div class="line">        exception will be raised if the identity does not meet the</div><div class="line">        requirements.</div><div class="line"></div><div class="line">        :param http_exception: the HTTP exception code (403, 401 etc)</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        return IdentityContext(self, http_exception)</div><div class="line"></div><div class="line">    def allows(self, identity):</div><div class="line">        &quot;&quot;&quot;Whether the identity can access this permission.</div><div class="line"></div><div class="line">        :param identity: The identity</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        if self.needs and not self.needs.intersection(identity.provides):</div><div class="line">            return False</div><div class="line"></div><div class="line">        if self.excludes and self.excludes.intersection(identity.provides):</div><div class="line">            return False</div><div class="line"></div><div class="line">        return True</div><div class="line"></div><div class="line">    def can(self):</div><div class="line">        &quot;&quot;&quot;Whether the required context for this permission has access</div><div class="line"></div><div class="line">        This creates an identity context and tests whether it can access this</div><div class="line">        permission</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        return self.require().can()</div></pre></td></tr></table></figure>
<p>Permission 可以说是最关键的部分了，它接受 Need 的 list 作为参数，并将其转换为 set 来储存所有的权限。为什么是 set 呢？因为 set 不可重复，并且做集合运算很容易直到是否存在某个 Need。</p>
<p>它的 require() 方法是使用得最多的方法之一，在调用这个方法的时候会创建一个 IdentityContext 实例，它会调用 IdentityContext.__enter__() 方法来检查权限，而这个方法里面又要调用 IdentityContext.can() 方法，这个方法又调用了相应的 Identity 对应的 Identity.can() 方法，并且传入当前 Identity 含有的权限作为参数。Identity 又调用 Permission.allows() 方法来检查权限，而这个方法则把 Permission 所具有的 Need 的 set 和 Identity.provides 这个 set 来做集合交运算来判断是否有相应的权限。（调用了一大圈，汗）</p>
<p>而 Permission.can() 的用法和上面的几乎一样。不过不同的是 require() 方法一般被用作装饰器，而 can() 方法一般用来直接进行判断。</p>
<h3 id="Principal-总结"><a href="#Principal-总结" class="headerlink" title="Principal 总结"></a>Principal 总结</h3><p>不得不说整个扩展设计得还是非常不错的，各个模块的逻辑性很强，只是太难理解了……我前前后后看了两遍……这次才终于搞清楚前前后后的逻辑了……</p>
<p>果然还是要看源代码，话说源代码写得还真不错，不仅文档详实，代码真的超级规范！</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[《爆漫王》]]></title>
      <url>https://blog.patrickcty.cc/2017/09/17/%E3%80%8A%E7%88%86%E6%BC%AB%E7%8E%8B%E3%80%8B/</url>
      <content type="html"><![CDATA[<p>梦想，多么熟悉又陌生的一个词。对我来说，这个词似乎从来都没有存在过。</p>
<p>小学时候的“梦想”是成为天文学家，但这只是一个听起来很厉害的职业，而同期的小伙伴们很多选择的是同样炫酷的科学家、医生……这个所谓的梦想的作用也只是在亲戚和老师问到之后的一个回答而已。</p>
<p>而天文学家最接近梦想的一次是爸爸给我买天文望远镜，但是因为我没有太大的兴趣，所以天文望远镜也只用过一次就永远躺在老屋黑暗的顶楼中了。之后这个“梦想”就像那个崭新的天文望远镜一样湮没在尘埃之中了。</p>
<p>初中和高中本应该是大谈理想与未来的时刻，但是在深井中哪看得到什么理想，更何况背上还压着重担。在这样的情况下，大家都是一样，所谓的梦想，被简化成了目标，而目标，则被固化成了取得好成绩。</p>
<p>而我就在大流中漂着，偶尔也有人问过梦想，但是我的回答是不存在。</p>
<p>也不知道什么时候开始，整个社会，特别是青年一代，都开始追逐财富。“最大的梦想是一夜暴富”这种话也多次从我口中说出，但是真正暴富又怎样呢？这个我也从未认真想过，或许也只是因为欲望吧。</p>
<p>追求财富其实也是一个好梦想，但是好的梦想背后总有一个意义，而财富的意义确是那么空虚。所以这与其来说是一个梦想，倒不如说是一种焦虑，一种因为内心空虚缺乏梦想的焦虑。</p>
<p>高中毕业之后，背上的重担终于解除，离开井底也就是理所应当的了。其实很多时候人们一直待在井底并不是因为背上的重担，就像大象会被拴在木桩上并不是因为绳子。真正让我一直待在井底的原因在于我不知道外面有更广阔的世界，也没有机会能接触到。而上大学，让我被动着离开井底，虽然这之前我从来不知道我一直待在井底。</p>
<p>正是在这个过程中我才知道原来生活不仅仅只有成绩，兴趣不仅仅只有篮球动漫。虽然视野拓宽了，但是梦想似乎还是没有萌生，不过走着走着，总算是有了目标，而目标之后的梦想，却宛若缥缈云烟一般，仍然不可触及。</p>
<p>海贼王是一部有梦想的动漫，也是陪我从高中走到现在的动漫。路飞的梦想是成为海贼王，索隆的梦想是成为世界第一的大剑豪，娜美的梦想是画出整个世界的航海图，乌索普的梦想是成为勇敢的海上勇士，山治的梦想是找到 All Blue，罗宾的梦想是追寻历史的真相，乔巴的梦想是成为万能药，弗兰奇的梦想是看到自己造的船达到世界的尽头，而布鲁克的梦想则是再次与拉布见面。</p>
<p>每个人都有梦想，他们也在实现梦想的途中努着力，接受着嘲笑，但也是因为海贼的世界设计的太过精妙，反而没能激励我去现实世界寻找、实现梦想。而我最近看的《爆漫王》却是这种能让人充满干劲，甚至开始思考梦想的一部极其优秀的作品。</p>
<p>曾经男主真诚最高也是一名没有梦想的中学生，每天回家靠打游戏来挥霍时间，在学校里面有不高不低的成绩，暗恋一个从未说过话的女生。但是一个已经拥有并且准备追求梦想的人——高木秋人的出现改变了他的一生。<br>他们和女主一起确定了梦想：两人合作画出漫画，等到作品动画化之后最高就和女主亚豆结婚。</p>
<p>动画的第一季主要是讲述主角确定梦想并且开始向梦想奋斗的故事，其中不仅有欢笑，更多是对梦想的万分执着。两个年仅十四岁的少年，就已经有了人生奋斗的目标，并且和平常人不同的是，他们在这之后就全力追求目标了，连一秒钟都不浪费。真诚练习画画，高木写原作 NAME，很多人都会戏称《爆漫王》为《爆肝王》，因为他们真的太努力了。他们就这样一直奋斗着，接近着目标，从提名到刊载到这一季最后的连载，他们一步步在向那个梦想靠近。</p>
<p>个人认为第一季是整部剧最燃的一季，在这里我们和主角他们一起从零开始一起奋斗一起提心吊胆、分享喜悦，真的让人有一种马上去学习的欲望。</p>
<p>第二季同样精彩，但是这一季整体节奏没有第一步那么明快，颇有几分压抑的气息。那是因为梦想实现的过程总不总是一帆风顺，总是会有各种各样的挫折。</p>
<p>而主角他们遇到的第一个大的挫折就是首部连载作品因为真诚的“爆肝”而不得不长时间休刊，等到最后恢复的时候已经人气下降被腰斩。之后又因为责编的原因不得不去画他们所不喜欢且不擅长的搞笑漫画，也因此他们的作品的名次一直在一个很令人尴尬的位置。在这一季最后，他们勇敢地选择结束连载，并在重重困难之下完成了新的作品，通过了编辑部的挑战。</p>
<p>这一季看的时候感觉十分揪心，就像《牧羊少年》里面说的那样，梦想是以初行者的运气开始，而到了后面就成为了对旅行者的考验。这时候的真诚他们也是迈入了后一个阶段，其中令人印象深刻的是真诚在医院中挣扎着画画的场景，这种对梦想的执着真的是无人能及了。</p>
<p>除此之外，第二季中友谊这个概念也变得更加深入，除了真诚和高木的革命友谊之外，同为福田组的新妻英二、福田先生、中井先生、苍树红等这些人物与主角的友情也表现得淋漓尽致，虽然他们是对手，但同时也是伙伴，正是有了他们相互的支持，这一季才不会让人感觉过于压抑。</p>
<p>说到这些其他的角色，就不得不说这部动漫的另一个亮点了——人物刻画。主人公一行人就不用说了，一群志同道合又个性鲜明的作者，一群性格迥异却又敬业的编辑，全都是“圆形人物”，人物的个性都被表现得淋漓尽致。</p>
<p>其中最让人喜欢的莫过于直爽天真又天赋异禀的新妻英二，他虽然是天才但是并没有天才的架子，反而是一个非常让人亲近的人，也正是抱着超过他的态度，主角他们才能一次一次奋斗，画出更好的作品。而编辑的角色中服部先生最让人喜爱，不仅是因为他直爽的性格与笑声，更是因为他的敬业与真性情，他会为了作者而开心与难受，和他们一起奋斗，正是有了他才让亚城木梦叶他们能走在正确的道路上接近梦想。</p>
<p>而第三季的剧情就比第二季明快不少，但是少了第一季的跌宕起伏，不过剧情的精彩程度还是无可挑剔的。这一季主人公终于走出低谷，大放异彩，最终实现了梦想。</p>
<p>看到最后的时候不禁让人感到落寞，短短的一段时间，就见证了主角他们十年的努力。看的时候希望他们能早日实现梦想，但是当真正实现了梦想的时候却也是不得不说再见的时候了。虽然剧情到这里就结束了，但是这部动漫让我陷入了思考——我的梦想到底是什么？</p>
<p>想来想去，虽然我没有真诚那样明确的梦想，动画化，结婚。但是我也有一个阶段一个阶段的目标，从最近的跟着导师搞科研，到之后的考研上中山大学。和主角相比，我对梦想的执着程度还是太低，这也是我一直以来最大的问题。我无法像主角那样一直专注于梦想，但是看过这部动漫之后我也有了行动，我放弃掉了一些占用很多时间的无意义的内容，比如花大量时间看对我没什么用的手机评测以及肝得很累的崩坏 3。</p>
<p>我想，等我以后觉得很累想放弃的时候我就会再次拾起这部动漫重新找回向前奋斗的勇气吧！</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[再次理解 Flask 中 Celery 的用法（二）]]></title>
      <url>https://blog.patrickcty.cc/2017/09/03/%E5%86%8D%E6%AC%A1%E7%90%86%E8%A7%A3Flask%E4%B8%ADCelery%E7%9A%84%E7%94%A8%E6%B3%95%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      <content type="html"><![CDATA[<h1 id="再次理解-Flask-中-Celery-的用法（二）"><a href="#再次理解-Flask-中-Celery-的用法（二）" class="headerlink" title="再次理解 Flask 中 Celery 的用法（二）"></a>再次理解 Flask 中 Celery 的用法（二）</h1><h2 id="运行-Celery-task"><a href="#运行-Celery-task" class="headerlink" title="运行 Celery task"></a>运行 Celery task</h2><p>我们之前都是用 Celery task 的 delay() 方法来运行任务，但是这只是 apply_async 方法的简略版本，后者的使用方法如下：</p>
<p>使用方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">task.apply_async(</div><div class="line">    args=[1, 2],  # 可选，表示参数列表，是一个 list</div><div class="line">    kwargs=&#123;&apos;kwarg1&apos;: &apos;1&apos;, &apos;kwarg2&apos;: &apos;2&apos;&#125;,</div><div class="line">    # countdown 表示指定秒数后后开始处理这个任务</div><div class="line">    # 不是一定在那个时候执行，要根据其他任务来定</div><div class="line">    countdown=600,</div><div class="line">    # eta 表示指定时间开始处理这个任务</div><div class="line">    # 执行时间和 countdown 一样不完全可靠</div><div class="line">    # 我用这个参数来发邮件结果第二天才发出去……</div><div class="line">    eta=datetime.datime.now() + datetime.timedelta(hours=1)</div><div class="line">)</div></pre></td></tr></table></figure>
<h2 id="Celery-签名-子任务"><a href="#Celery-签名-子任务" class="headerlink" title="Celery 签名/子任务"></a>Celery 签名/子任务</h2><p>签名可以把 task 生成函数来便于其他的函数进行调用。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; from celery import signature</div><div class="line">&gt;&gt;&gt; from webapp.tasks import multiply</div><div class="line"># signature 的第一个参数要写全</div><div class="line">&gt;&gt;&gt; signature(&apos;webapp.tasks.multiply&apos;, args=[4, 4], countdown=10)</div><div class="line">webapp.tasks.multiply(4, 4)  # 返回的是一个函数</div><div class="line"># 和上面相同的功能</div><div class="line">&gt;&gt;&gt; multiply.subtask((4, 4), countdown=10)</div><div class="line">webapp.tasks.multiply(4, 4)</div><div class="line"># 上面的缩略版本，没有关键字参数</div><div class="line">&gt;&gt;&gt; multiply.s(4, 4)</div><div class="line">webapp.tasks.multiply(4, 4)</div><div class="line">&gt;&gt;&gt; multiply.s(4, 4)()  # 调用函数</div><div class="line">16</div><div class="line">&gt;&gt;&gt; multiply.s(4, 4).delay()  # 创建任务</div></pre></td></tr></table></figure>
<h2 id="偏函数"><a href="#偏函数" class="headerlink" title="偏函数"></a>偏函数</h2><p>Celery 任务签名的第一个应用是偏函数。偏函数来源于一个要接受很多参数的函数，这个函数被施加某种操作之后，生成了一个新的函数，在调用这个函数的时候，前 n 个参数永远是一样的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; partial = multiply.s(4)  # 第一个参数永远是 4</div><div class="line">&gt;&gt;&gt; partial(5)</div><div class="line">20</div><div class="line">&gt;&gt;&gt; partial.delay(5)</div></pre></td></tr></table></figure>
<h2 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h2><p>回调函数就是根据前一个任务执行的结果来执行的函数。在 apply_async() 中使用 link 参数来添加回调函数。</p>
<p>这个执行任务返回的值并不是回调函数的结果，而是前一个任务执行的结果。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># link 接受一个签名作为参数</div><div class="line"># log 接受 multiply 的结果作为参数</div><div class="line"># 这里是建立了两个 task，并且返回值都是 16</div><div class="line">&gt;&gt;&gt; multiply.apply_async((4, 4), link=log.s())</div><div class="line"># 如果回调函数不接受输入或者不需要上一个任务的结果</div><div class="line"># 那么签名必须使用 si 方法（设置为不可变类型）</div><div class="line"># 结果为 16 而不是 hello</div><div class="line">&gt;&gt;&gt; multiply.apply_async((4, 4), link=log.si(&apos;hello&apos;))</div></pre></td></tr></table></figure>
<p>回调函数常常用来做两个联系紧密的任务，比如每次创建用户的任务之后都发送一封欢迎 email。</p>
<p>偏函数也可以和回调函数一起用：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; multiply.apply_async((4, 4), link=multiply.s(4))</div></pre></td></tr></table></figure>
<h2 id="任务组"><a href="#任务组" class="headerlink" title="任务组"></a>任务组</h2><p>任务组函数接受一组任务签名的列表，并生成一个函数，调用该函数可并行执行所有的任务签名，并返回所有结果的列表。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; from celery import group</div><div class="line">&gt;&gt;&gt; sig = group(multiply.s(i, i + 5) for i in range(10))</div><div class="line">&gt;&gt;&gt; rst = sig.delay()</div><div class="line">&gt;&gt;&gt; rst.get()</div><div class="line">[0, 6, 14, 24, 36, 50, 66, 84, 104, 126]</div></pre></td></tr></table></figure>
<h2 id="任务链"><a href="#任务链" class="headerlink" title="任务链"></a>任务链</h2><p>任务链和回调函数有点相像，它接受一组任务签名，把每个签名的执行结果传给任务链的下一个，最后只会返回最后一个的结果。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; from celery import chain</div><div class="line"># 事实上也是创建了多个任务，但是只会返回最终的结果</div><div class="line">&gt;&gt;&gt; sig = chain(multiply.s(10, 10), multiply.s(10), multiply.s(10))</div><div class="line"># 另一种写法</div><div class="line">&gt;&gt;&gt; sig = (multiply.s(10, 10) | multiply.s(10) | multiply.s(10))</div></pre></td></tr></table></figure>
<p>任务链也可以用来组合偏函数生成新的偏函数，这样的话任务链也可以嵌套了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; func = (multiply.s(10) | multiply.s(10))</div><div class="line">&gt;&gt;&gt; rst = func.delay(16)</div><div class="line">&gt;&gt;&gt; rst.get()</div><div class="line">1600</div></pre></td></tr></table></figure></p>
<h2 id="复合任务"><a href="#复合任务" class="headerlink" title="复合任务"></a>复合任务</h2><p>复合任务是函数生成一个任务签名的时候，会先执行一个任务组，然后把最终结果传给回调函数，最后回调函数的结果就是最终的结果，这里和上面的回调函数部分有些不同。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; from celery import chord</div><div class="line">&gt;&gt;&gt; sig = chord(</div><div class="line">    group(multiply(i, i + 5) for i in range(10)),</div><div class="line">    # 整个任务组执行的结果，也就是回调函数的参数是 list</div><div class="line">    multiply.s(2) </div><div class="line">)</div><div class="line">&gt;&gt;&gt; rst = sig.delay()</div><div class="line">&gt;&gt;&gt; rst.get()</div><div class="line">[0, 6, 14, 24, 36, 50, 66, 84, 104, 126, 0, 6, 14, 24, 36, 50, 66, 84, 104, 126]</div><div class="line"># 还有另一种写法</div><div class="line">&gt;&gt;&gt; sig = (group([0, 6, 14, 24, 36, 50, 66, 84, 104, 126]) | multiply.s(2))</div></pre></td></tr></table></figure>
<h2 id="定期执行任务"><a href="#定期执行任务" class="headerlink" title="定期执行任务"></a>定期执行任务</h2><p>和 Linux 的 cron 命令有点类似，不过这里完全是在 Flask 的上下文中来执行任务的。</p>
<p>要在 config 文件中配置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">CELERY_SCHEDULE = &#123;</div><div class="line">    &apos;log-every-30-seconds&apos;: &#123;</div><div class="line">        &apos;task&apos;: &apos;webapp.tasks.log&apos;,</div><div class="line">        &apos;schedule&apos;: datetime.timedelta(seconds=30),</div><div class="line">        &apos;args&apos;: [&apos;hello&apos;,]</div><div class="line">    &#125;,</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里是定义了 log 任务每隔 30s 执行一次</p>
<p>如果要运行定期任务，就要使用 Celery 的 beat 工作进程，当然任务也是在 worker 进程中执行的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">celery -A celery_runner beat</div></pre></td></tr></table></figure>
<p>如果要在一个精确的时间执行，那么就要用 crontab 对象了，具体的用法参考 Celery <a href="http://docs.celeryproject.org/en/latest/userguide/periodic-tasks.html#crontab-schedules" target="_blank" rel="external">官方文档</a>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">from celery.schedules import crontab</div><div class="line"># 每天凌晨</div><div class="line">&gt;&gt;&gt; crontab(minute=0, hour=0)</div><div class="line"># 早上五点，十点，下午三点，八点</div><div class="line">&gt;&gt;&gt; crontab(minute=0, hour=[5, 10, 15, 20])</div></pre></td></tr></table></figure>
<h2 id="在-Flower-中通过网页监控"><a href="#在-Flower-中通过网页监控" class="headerlink" title="在 Flower 中通过网页监控"></a>在 Flower 中通过网页监控</h2><p>Flower 是针对 Celery 的基于网页的试试管理工具。</p>
<p>安装 Flower：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install flower</div></pre></td></tr></table></figure></p>
<p>运行 Flower：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">celery flower -A celery_runner --loglevel=info</div></pre></td></tr></table></figure></p>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>说实话第一次看到上面这些的时候真的十分头大，一脸懵逼，不过现在回头整理了一遍之后明了了许多，不过要吐槽的是 eta 为什么这么坑啊！</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[再次理解 Flask 中 Celery 的用法（一）]]></title>
      <url>https://blog.patrickcty.cc/2017/09/01/%E5%86%8D%E6%AC%A1%E7%90%86%E8%A7%A3Flask%E4%B8%ADCelery%E7%9A%84%E7%94%A8%E6%B3%95%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      <content type="html"><![CDATA[<h1 id="再次理解-Flask-中-Celery-的用法（一）"><a href="#再次理解-Flask-中-Celery-的用法（一）" class="headerlink" title="再次理解 Flask 中 Celery 的用法（一）"></a>再次理解 Flask 中 Celery 的用法（一）</h1><h2 id="Celery-概览"><a href="#Celery-概览" class="headerlink" title="Celery 概览"></a>Celery 概览</h2><p>Celery 是用 Python 编写的任务队列工具，它使用 Python 的多任务库来并行地执行任务。</p>
<p>在下面我们用 Flask Server 来发送任务请求，由消息队列储存并转发给 Celery。Celery 运行的结果也同样由消息队列传递回去。</p>
<p>消息队列是一个队列，用来在生产者进程和消费者进程之间传递信息。不过消息队列在生产者接收到消息之后就立即把数据丢弃了，这时候可以用数据库来保存任务结果。</p>
<h2 id="配置-Celery-环境"><a href="#配置-Celery-环境" class="headerlink" title="配置 Celery 环境"></a>配置 Celery 环境</h2><p>安装 Celery<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install celery</div></pre></td></tr></table></figure></p>
<p>安装 Flask 扩展来辅助处理 Celery 的初始化(可选)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install flask-celery-helper</div></pre></td></tr></table></figure></p>
<p>安装 Redis 来作为消息队列以及储存最终的结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">brew install redis</div><div class="line">redis-server  # 使用 redis</div></pre></td></tr></table></figure></p>
<h2 id="在-Celery-中创建任务"><a href="#在-Celery-中创建任务" class="headerlink" title="在 Celery 中创建任务"></a>在 Celery 中创建任务</h2><p>在 Celery 中，broker 意思是中间人，指的就是消息队列本身，而 result backend 顾名思义就是存储得到的结果。</p>
<h3 id="单文件示例"><a href="#单文件示例" class="headerlink" title="单文件示例"></a>单文件示例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&quot;&quot;&quot;task.py&quot;&quot;&quot;</div><div class="line"></div><div class="line">from celery import Celery</div><div class="line">import time</div><div class="line"></div><div class="line">app = Celery(&apos;tasks&apos;, broker=&apos;redis://localhost:6379&apos;)</div><div class="line"></div><div class="line">@app.task</div><div class="line">def add(x, y):</div><div class="line">    print &apos;hello celery&apos;</div><div class="line">    time.sleep(10)</div><div class="line">    return x + y</div></pre></td></tr></table></figure>
<p>使用 task：</p>
<ul>
<li><p>新建一个 Python Shell，使用 delay 或 apply_async 来运行 add 方法，注意只有当 Celery 实例存在时运行结果才会被收到</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; from task import add</div><div class="line">&gt;&gt;&gt; add.delay(3, 5)</div><div class="line">&gt;&gt;&gt; add.apply_acync([7, 8])</div></pre></td></tr></table></figure>
</li>
<li><p>再在另一个终端中运行 Celery worker</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">celery worker -A task --loglevel=info</div></pre></td></tr></table></figure>
<p>  worker 表示使用 Celery worker<br>  -A 参数是一个含有 Celery 实例的模块名，Celery 通过它来运行</p>
</li>
</ul>
<p>运行 Celery worker 之后就可以看到任务信息了，如果要在 shell 中得到返回的结果则还要配置 backend</p>
<p>修改上面的 app 为如下即可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">app = Celery(</div><div class="line">    &apos;tasks&apos;,</div><div class="line">    broker=&apos;redis://localhost:6379&apos;，</div><div class="line">    backend=&apos;redis://localhost:6379&apos;</div><div class="line">)</div></pre></td></tr></table></figure></p>
<p>然后就可以在 Python Shell 查看 Celery 运行的结果和状态了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; rst = add.delay(8, 7)</div><div class="line">&gt;&gt;&gt; rst.state()  # 查看任务现在的状态</div><div class="line">&gt;&gt;&gt; rst.ready()  # 判断任务是否完成</div><div class="line">&gt;&gt;&gt; rst.get()    # 得到运行结果</div><div class="line">15</div></pre></td></tr></table></figure></p>
<h3 id="Flask-中使用示例"><a href="#Flask-中使用示例" class="headerlink" title="Flask 中使用示例"></a>Flask 中使用示例</h3><h4 id="使用扩展来配置"><a href="#使用扩展来配置" class="headerlink" title="使用扩展来配置"></a>使用扩展来配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">from flask import Flask</div><div class="line">from flask_celery import Celery()</div><div class="line"></div><div class="line">app = Flask(__name__)</div><div class="line">app.config.update(</div><div class="line">    CELERY_BROKER_URL=&apos;redis://localhost:6379&apos;,</div><div class="line">    CELERY_RESULT_BACKEND=&apos;redis://localhost:6379&apos;</div><div class="line">)</div><div class="line">celery = Celery(app)</div><div class="line"></div><div class="line"></div><div class="line">@celery.task()</div><div class="line">def add_together(a, b):</div><div class="line">    return a + b</div></pre></td></tr></table></figure>
<p>这里直接使用了上面安装的 flask-celery-helper 扩展，所以就直接接用扩展来初始化 Celery 实例即可。</p>
<h4 id="手动配置"><a href="#手动配置" class="headerlink" title="手动配置"></a>手动配置</h4><p>准备工作<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&quot;&quot;&quot;celery_maker.py&quot;&quot;&quot;</div><div class="line">from celery import Celery</div><div class="line"></div><div class="line">def make_celery(app):</div><div class="line">    celery = Celery(</div><div class="line">        app.import_name, </div><div class="line">        broker=app.config[&apos;CELERY_BROKER_URL&apos;]</div><div class="line">    )</div><div class="line">    celery.conf.update(app.config)</div><div class="line">    TaskBase = celery.Task</div><div class="line">    class ContextTask(TaskBase):</div><div class="line">        abstract = True</div><div class="line">        def __call__(self, *args, **kwargs):</div><div class="line">            with app.app_context():</div><div class="line">                return TaskBase.__call__(self, *args, **kwargs)</div><div class="line">    celery.Task = ContextTask</div><div class="line">    return celery</div></pre></td></tr></table></figure></p>
<p>使用 Celery<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">from flask import Flask</div><div class="line">from celery_maker import make_celery</div><div class="line"></div><div class="line">app = Flask(__name__)</div><div class="line">app.config.update(</div><div class="line">    CELERY_BROKER_URL=&apos;redis://localhost:6379&apos;,</div><div class="line">    CELERY_RESULT_BACKEND=&apos;redis://localhost:6379&apos;</div><div class="line">)</div><div class="line">celery = make_celery(app)</div><div class="line"></div><div class="line"></div><div class="line">@celery.task()</div><div class="line">def add_together(a, b):</div><div class="line">    return a + b</div></pre></td></tr></table></figure></p>
<p>make_celery 的作用就是把每个对 Celery 任务的调用都包含到 Python 的 with 代码中，这样 Celery 在 Flask 的应用上下文中，就可以确保 Flask 扩展的调用都能正常工作了。</p>
<p>使用方法和之前的也是一样，不过在调用 task 的时候也必须在 Flask 的应用上下文中，不然就达不到预料的结果。</p>
<h2 id="吐槽"><a href="#吐槽" class="headerlink" title="吐槽"></a>吐槽</h2><p>我之前就是因为把配置文件的名字写错了导致一直提示 backend 不存在……不要盲目相信书上的内容……还是官方文档靠谱……</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[《十万个冷笑话2》]]></title>
      <url>https://blog.patrickcty.cc/2017/08/26/%E3%80%8A%E5%8D%81%E4%B8%87%E4%B8%AA%E5%86%B7%E7%AC%91%E8%AF%9D2%E3%80%8B/</url>
      <content type="html"><![CDATA[<h1 id="《十万个冷笑话-2》"><a href="#《十万个冷笑话-2》" class="headerlink" title="《十万个冷笑话 2》"></a>《十万个冷笑话 2》</h1><p>《十万个冷笑话》是在 2014.12.31 上映，2017.8.24，一起看第一部的原班人马再度聚集。</p>
<p>说起来已经有两年多了，看《十冷》的时候正是学习最紧张的高三，每天的课程与作业压得人透不过起来，而最能让人放松的反而是每周一次的月考，因为有着难得的一整天以及一个晚上的休息时间。而趁着这个时间，荷花亭小分队就会聚首，去到菱角湖万达，那个最常去因为充满着回忆的地方，又或者是去到西园，去放松被学校所压抑的内心。而《十冷》我们就是一起到西园去看的。《十冷》电影的情节早已模糊，但是当时看电影的情景，反而浮现在了脑海中。</p>
<p>毕业也没有拆散我们的友情，不过毕业却会改变一些事情。</p>
<p>当改变还没有发生时，我们一起去了青岛，在海边，在街边，在桥上，在房间里……我们被友谊的快乐包围着，心里祈祷着这样的友谊一直到永远。</p>
<p>但是随着毕业越来越久，改变也变得越来越明显，菁搬到了遥远的汉阳，出行变得不方便，而晨晨和男神在假期也有了满满的安排，我呢，在当时也有了自己的幸福。这就导致荷花亭小分队的聚首变得愈发困难。</p>
<p>不过友谊 wins，去年暑假，我们找到了机会再度聚首，而这次是在李文菁家。依然是以吃吃吃为主题，这次吃到了李文菁亲手烘焙的饼干和泡芙。友谊依然是熟悉的味道。</p>
<p>而寒假则更难找到时间了，兜兜转转又是一年的暑假。这一年的暑假则又变得更加难以聚首，菁依旧在遥远的汉阳，男神则有学校工作以及旅游安排，晨晨也找到了实习，而我则在广州待了很久。就在我以为没办法再度见面之时，阴差阳错之间我把车票改到了后一天，男神也正好“没有安排”，而晨晨和菁也能抽出时间，于是聚会就这样定了下来，也真的可以说是缘分。于是欢乐与我们再次光临了荷花亭，也再次一起观看了《十冷 2》。</p>
<p>荷花亭的菜依旧好吃，但是《十冷 2》却没有那么好看了，不过这些都不重要，因为你们都来了，现在大家都有了自己的幸福，也都有了自己的爱好与目标，我们不再“相同”，但是那份快乐经过了这么多年的酝酿，没有变质，却是越发醇香。依然是荷花亭，依然是吃吃吃，依然是拍拍拍，依然是小分队。</p>
<p>不知道下次见面会是在哪里，不过拥有着彼此的这么多黑照，可不能随随便便玩消失呀！男神请我们去青岛吃吃喝喝，菁亲手给我们考饼干吃，晨晨也接我们去了华科吃饭，那什么时候我能接你们来广州吃早茶呢~希望真的有这一天呢~</p>
<p>《十冷 2》的剧情也不重要，但它的意义却包含了很多~以后的《十冷 3》，《百冷》，《千冷》我们也要一起笑！</p>
<p>不过我在最后还是要吐槽一下《十冷 2》的剧情，看样子导演和编剧确实想拍出好电影，但是在剧情的设计上还是有很多的槽点，在大场面的表现上也显得十分不自然，人物刻画也很草率，前期的铺垫也做得不够好……主要是剧情是硬伤……</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[《战狼2》]]></title>
      <url>https://blog.patrickcty.cc/2017/08/19/%E3%80%8A%E6%88%98%E7%8B%BC2%E3%80%8B/</url>
      <content type="html"><![CDATA[<h1 id="《战狼-2》"><a href="#《战狼-2》" class="headerlink" title="《战狼 2》"></a>《战狼 2》</h1><h2 id="开始之前"><a href="#开始之前" class="headerlink" title="开始之前"></a>开始之前</h2><p>这是我用 MacBook Pro 写的第一部影评~撒花撒花~</p>
<p>《战狼 2》作为一部现象级的国产电影，在很长时间之内刷爆了朋友圈，于是乎在女票回学校之后就第一时间和她一起出去看了。</p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>整部电影是以一个退伍兵为主角来讲述的，和《湄公河行动》有些相像，都是为了替被害的爱人报仇。还有一个最近比较流行的套路就是中外混血电影，《战狼 2》如此，《侠盗联盟》也如此，虽然感觉高大上了一些，但是总是感觉有慢慢的违和感……</p>
<p>不过和《湄公河行动》不同，这部电影中绝大部分都是吴京或者说是冷锋的个人英雄主义。这是整部电影最精彩的地方，但同时也是整部电影的逻辑败笔所在。</p>
<p>从刚开始的徒手潜水解决海盗，到之后枪林弹雨中带着身边的人去到中国大使馆，再到之后只身去医院解救医院的人，以及后来去解救工厂的人。这些场景中的打斗场面都十分精彩，对冷锋这个角色的表现也十分到位：有勇有谋，坚毅，技艺高超，重情……期间穿插的回忆也很妥当，不会显得拖时间。</p>
<p>但是！但是！你让一个人去解救医院里面的人还有工厂里面的人这是闹哪样！编剧恐怕真的是把冷锋当成了钢铁侠，美国队长一个人恐怕都完成不了任务……讲道理我觉得冷锋如果去美国真的可以加入复仇者联盟了，我感觉他甚至可以取代美国队长的位置了（虽然感觉打不过美国队长）。</p>
<p>整部电影后半段就纯粹变成爽片了，不过在爽的同时，电影刻画了一些小人物，比如在医院里面的医生，以及工厂里面为了保护女主两人而挺身而出面对子弹的工厂的工人们，还有就是工厂里面贪生怕死的厂长。这些人物虽然占的戏份比较少，但是都比较鲜活。</p>
<p>另外一个值得一提的人物就是张翰演的富二代卓亦凡（不知道这个名字是不是在暗指某吴姓小鲜肉），从一开始的挂着骚红的 beats 耳机登场，到后来的一些明显是没有经历过真实战争的言行。张翰的本色出演，将这样一个叛逆的公子的形象表现的淋漓尽致，和人物的定位十分贴合。而后面的人物的转变也刻画得很不错，虽然还是很坑，不过为主角战队增加了重要的战力，还有一些小小的笑点。</p>
<p>至于爱国情怀？我感觉打得有点过了，诚然祖国如今已经是十分强大，撤侨工作每次也做得十分到位及时，但是在这一部电影里面却有一种刻意地渲染以至于有些矫情了……还有就是中国的舰队在这次事情中提供的帮助真的太有限了……不过最后所有舰队的导弹的轰鸣还是十分让人热血沸腾的。</p>
<p>总之这是一部比较成功的商业大片，演员演技全程在线，作为一部爽片还是让人感觉很不错的，只是剧情还有一些硬伤，作为一个非魔幻的片还是应该“真”一点，还有就是不知道这个反派是不是在《战狼 1》中出现过，感觉他的行为全程都令人莫名奇妙……</p>
<h2 id="评分"><a href="#评分" class="headerlink" title="评分"></a>评分</h2><p>8/10.</p>
<p>特效动作都十分到位，整体也很激动人心，去电影院一起狂欢一下也是极好的。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[《蝙蝠侠》黑暗骑士三部曲]]></title>
      <url>https://blog.patrickcty.cc/2017/08/11/%E3%80%8A%E8%9D%99%E8%9D%A0%E4%BE%A0%E3%80%8B%E9%BB%91%E6%9A%97%E9%AA%91%E5%A3%AB%E4%B8%89%E9%83%A8%E6%9B%B2/</url>
      <content type="html"><![CDATA[<h1 id="《蝙蝠侠》黑暗骑士三部曲"><a href="#《蝙蝠侠》黑暗骑士三部曲" class="headerlink" title="《蝙蝠侠》黑暗骑士三部曲"></a>《蝙蝠侠》黑暗骑士三部曲</h1><p>在看完黑暗骑士之后，我又决定把剩下的两部看完，在看完整个三部之后，我少有的有了一种意犹未尽想看下一部的感觉。</p>
<p>大家觉得黑暗骑士三部曲经典，多是因为诺兰刻画出了一个真正的蝙蝠侠——一个一心想拯救自己父母曾全力保护的高谭市的人。而不仅仅是一个无所不能，令犯罪分子闻风丧胆的超级英雄。作为一个活生生的人，蝙蝠侠也拥有迷茫，也会害怕，也会愤怒，也正是通过这些情绪的表达，让电影不再那么模式化，让电影有了新的活力。</p>
<p>第一部《蝙蝠侠：侠影之谜》是蝙蝠侠找到自我的过程，从一个无忧无虑的富二代公子，到目睹自己父母被枪杀之后被愤怒蒙蔽双眼，再到谋杀父母的仇人被更加有后台的人枪杀之后对犯罪的迷茫，再到跟着忍者大师找回自我，于是蝙蝠侠就此产生。</p>
<p>小时候掉进蝙蝠洞的经历让他拥有了深入内心的恐惧，而这恐惧在间接中促进了他父母的死亡，于是仇恨的种子也在内心中植下。但是当仇人死亡以及被黑帮老大嘲讽之后，仇恨悄然消失，取而代之的是迷茫，这时的韦恩选择了流浪，亲身去经历犯罪，亲身感受犯罪。</p>
<p>而忍者大师的指点，帮助了他去直面自己的恐惧并且控制自己的愤怒。这部分的描绘比较写意，不过这样和意境确实契合得十分好。</p>
<p>尽管忍者大师能帮他控制情绪，但是自己的路还是要靠自己去开创，在学会控制情绪之后，韦恩也找到了自己的路，但是这条路和影武者联盟所信奉的道路产生了冲突。为了坚持自己的道路——不杀人，他让影武者联盟的房子陷入了火海，“忍者大师”也因此死亡，韦恩的师傅杜卡也陷入昏迷。</p>
<p>这部分我感觉处理的不是很好，韦恩的原则是不杀人，但是在这里他间接杀死了和自己理念不同的“忍者大师”，这难道就不违背他的原则么？而且因为这次的事情，影武者联盟的房子都被毁于一旦，成员也有死伤。从后面的剧情来看，在这里即使“忍者大师”不死，对后面的剧情也没有什么很大的影响，这个地方我觉得是败笔。</p>
<p>不过也因为有了这一段的经历，韦恩终于找到了自己要走的路，他也有了实现自己理想所需要的品质，于是蝙蝠侠就这样诞生了。</p>
<p>电影的节奏把握得极好，感觉我们在跟着韦恩一起，见证着他的成长，这种感觉让观众对蝙蝠侠有了更深的感触，电影的代入感也更强。</p>
<p>第一部讲的是蝙蝠侠的成长，而第二部则是蝙蝠侠和精通犯罪小丑的比赛中输掉了，并“元气大伤”，失去了目标，陷入了谷底，此时高谭市已经情况好转，但这也意味着蝙蝠侠复出的可能性更小了。在这样的情况下，他遇到了“最可怕的敌人”，和他一样师出忍者大师的贝恩。贝恩的强不仅仅在于他的武艺，更是因为他出身黑暗与绝望并适应黑暗与绝望，并且有着一群忠心耿耿的手下。在这样的情况下，蝙蝠侠又怎么会是他的对手？于是蝙蝠侠也被送入了他曾待过的绝望的监狱中，其实在被送进来之前，蝙蝠侠就已经身处谷底，而这个监狱，反而再次给了他崛起的契机——重新找回存在的意义，唤醒起恐惧，因为就像医生所说：“恐惧会祝你一臂之力”。而正是这样的考验下，蝙蝠侠终于找回自我，完成了崛起。</p>
<p>而另一方面在布莱克警探和戈登局长的带领下，被贝恩支配的高谭市内的人也没有放弃，但是蝙蝠侠的缺席总是让他们群龙无首，而蝙蝠侠的出现也终于将他们凝聚了起来，高潮时那一群只有普通手枪的警察面对装备精良的贝恩一群人不畏惧而毅然冲上去的场景让我感觉很震撼，在危急时刻即使是害怕死亡的人也会完成觉醒。</p>
<p>这黑暗骑士三部曲中，充分探讨了人性，从蝙蝠侠的角度——一切都是为了高谭市；从最关心蝙蝠侠人的角度——成为蝙蝠侠并不是拯救城市的唯一方法；从普通人的角度——人们可能会因为恐惧成为罪恶的爪牙，但是当真正被逼入绝境，即使是普通人也会觉醒；从反派的角度——为了贯彻自己的理念，为了纯粹的犯罪，为了复仇以及完成父亲/师傅未完成的目标。</p>
<p>三部电影，既有深度，也保持了商业片应该具有的震撼的大场面，精彩的故事情节，以及蝙蝠侠的个人英雄主义。尽管每一部都差不多有两个半小时，但是每一部的节奏都把握得很好，完全不会觉得过于冗长。真的值得一看！</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[再次理解Flask中RESTfulAPI]]></title>
      <url>https://blog.patrickcty.cc/2017/08/10/%E5%86%8D%E6%AC%A1%E7%90%86%E8%A7%A3Flask%E4%B8%ADRESTfulAPI/</url>
      <content type="html"><![CDATA[<h1 id="再次理解-Flask-中-RESTful-API"><a href="#再次理解-Flask-中-RESTful-API" class="headerlink" title="再次理解 Flask 中 RESTful API"></a>再次理解 Flask 中 RESTful API</h1><p>用 Flask 构建 RESTful 有两种方法，一种是狗书中用到的方法，把视图“包装”成 API —— 视图函数完成 API 所需要的功能，但最后返回的不再是一个 HTML 文件，而是由所需要的数据构成的 JSON。</p>
<p>而另一种方法就是使用 flask-restful 扩展来构建 API 了，利用专有的类来作为 REST 的资源部分，通过资源类的不同方法来处理不同的 http 请求，最后以 JSON 格式返回数据，具体步骤如下：</p>
<ul>
<li><p>初始化扩展</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">from flask_restful import Api</div><div class="line"></div><div class="line">rest_api = Api()</div></pre></td></tr></table></figure>
</li>
<li><p>自定义资源类以及相应的请求方法（对应了一个路由）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">from flask_restful import Resource</div><div class="line"></div><div class="line">class PostApi(Resource):</div><div class="line">    # 如果用没有定义的请求方法访问则会返回 405 错误</div><div class="line">    def get(self):</div><div class="line">        pass</div><div class="line">    def post(self):</div><div class="line">        pass</div><div class="line">    def put(self):</div><div class="line">        pass</div></pre></td></tr></table></figure>
</li>
<li><p>初始化 API 对象路由</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">from .extensions import rest_api</div><div class="line">from .controller.rest.post import PostApi</div><div class="line"></div><div class="line">def create_app(object_name):</div><div class="line">    ...</div><div class="line">    # 如果是多个路由则要分别绑定</div><div class="line">    rest_api.add_resource(PostApi, &apos;/api/post&apos;, &apos;/api/post/&lt;int:post_id&gt;&apos;)</div><div class="line">    rest_api.add_resource(AnotherApi, &apos;/api/another&apos;)</div><div class="line">    rest_api.init_app(app)</div></pre></td></tr></table></figure>
</li>
<li><p>JSON 化输出格式</p>
</li>
</ul>
<p>JSON 化也同样有两种方法：</p>
<ul>
<li>第一种是使用 flask.jsonify() 把数据手动转换成 JSON 对象再返回。</li>
<li><p>第二种则是使用 field 对象和 mashal_with 函数来进行转换，返回直接返回原来的对象即可。这种方法通过一个由 field 定义的 dict 来说明要转化输出的内容，并且把它传递给 mashal_with 装饰器，最后在返回之前自动转换成相应的 JSON 对象。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">from flask_restful import Resource, fields, mashal_with</div><div class="line"></div><div class="line">nested_tag_fields = &#123;</div><div class="line">    &apos;id&apos;: fields.Integer(),</div><div class="line">    &apos;title&apos;: fields.String()</div><div class="line">&#125;</div><div class="line"></div><div class="line">post_fields = &#123;</div><div class="line">    # 字符串 field，从对象的 .user.username 中取出值作为值</div><div class="line">    &apos;author&apos;: fields.String(attribute=lambda x: x.user.username), </div><div class="line">    &apos;title&apos;: fields.String(),</div><div class="line">    &apos;text&apos;: HTMLField(),  # 自定义 field</div><div class="line">    # list field，转换后成为 JSON list</div><div class="line">    # 内层为一个特殊的 field，是另外一个 JSON 对象，它是用另一个字段对象构成的</div><div class="line">    &apos;tags&apos;: fields.List(fields.Nested(nested_tag_fields)),</div><div class="line">    &apos;publish_time&apos;: fields.DateTime(dt_format=&apos;iso8601&apos;)</div><div class="line">&#125;</div><div class="line"></div><div class="line">class PostApi(Resource):</div><div class="line">    @marshal_with(post_fields)  # 对象的属性会根据这个 dict 来转换</div><div class="line">    def get(self, post_id=None):</div><div class="line">        if post_id:</div><div class="line">            post = Post.query.get(post_id)</div><div class="line">            if not post:</div><div class="line">                abort(404)</div><div class="line">            return post  # 返回的 post 的内容已经被转换格式了</div><div class="line">        ...</div></pre></td></tr></table></figure>
</li>
<li><p>接收请求参数</p>
</li>
</ul>
<p>定义 parser<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">post_get_parser = reqparse.RequestParser()  # 初始化 parser</div><div class="line">post_get_parser.add_argument(  # 在 parser 中添加参数以及相应规则</div><div class="line">    &apos;page&apos;,</div><div class="line">    type=int,</div><div class="line">    location=[&apos;args&apos;, &apos;header&apos;],</div><div class="line">    required=False</div><div class="line">)</div><div class="line">post_get_parser.add_argument(</div><div class="line">    &apos;user&apos;,</div><div class="line">    type=str,</div><div class="line">    location=[&apos;json&apos;, &apos;args&apos;, &apos;headers&apos;]</div><div class="line">)</div></pre></td></tr></table></figure></p>
<p>使用 parser<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">from .parsers import post_get_parser</div><div class="line"></div><div class="line">class PostApi(Resource):</div><div class="line">    def get(self, post_id=None):</div><div class="line">        ...</div><div class="line">        # 使用 parser 解析参数</div><div class="line">        # 解析出来的可以像 dict 引用</div><div class="line">        # 例如 args[&apos;user&apos;]</div><div class="line">        args = post_get_parser.parse_args()</div></pre></td></tr></table></figure></p>
<ul>
<li>身份验证</li>
</ul>
<p>使用 access token 来进行身份认证，要完成身份认证要先通过一个 API 来进行登录验证，如果通过就返回 token，之后就根据 token 来进行相应的权限操作。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"># parser 也是要定义的</div><div class="line">class AuthApi(Resource):</div><div class="line">    def post(self):</div><div class="line">        args = user_post_parser.parse_args()</div><div class="line">        user = User.query.filter_by(</div><div class="line">            username=args[&apos;username&apos;]</div><div class="line">        ).one()</div><div class="line"></div><div class="line">        # 检验密码</div><div class="line">        if user.verify_password(args[&apos;password&apos;]):</div><div class="line">            # 通过了才生成令牌</div><div class="line">            s = Serializer(</div><div class="line">                current_app.config[&apos;SECRET_KEY&apos;],</div><div class="line">                expires_in=600</div><div class="line">            )</div><div class="line">            # 返回令牌，注意 dumps 出来的数据是 byte 类型的，要根据编码改成 utf-8 才能成为 JSON 内容</div><div class="line">            return &#123;&quot;token&quot;: s.dumps(&#123;&apos;id&apos;: user.id&#125;).decode(&apos;utf-8&apos;)&#125;</div><div class="line"></div><div class="line">        else:</div><div class="line">            abort(401)</div></pre></td></tr></table></figure>
<p>验证令牌的话在 User 类中添加一个类方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">class User(db.Model, UserMixin):</div><div class="line">    ...</div><div class="line"></div><div class="line">    @staticmethod</div><div class="line">    def verify_auth_token(token):</div><div class="line">        s = Serializer(current_app.config[&apos;SECRET_KEY&apos;])</div><div class="line"></div><div class="line">        try:</div><div class="line">            data = s.loads(token)</div><div class="line">        except SignatureExpired:</div><div class="line">            return None</div><div class="line">        except BadSignature:</div><div class="line">            return None</div><div class="line">        user = User.query.get(data[&apos;id&apos;])</div><div class="line">        return user</div></pre></td></tr></table></figure></p>
<p>要使用的话就在资源类的方法中调用这个类方法来返回 user 对象。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[再次理解Flask中登录与用户角色]]></title>
      <url>https://blog.patrickcty.cc/2017/08/08/%E5%86%8D%E6%AC%A1%E7%90%86%E8%A7%A3Flask%E4%B8%AD%E7%99%BB%E5%BD%95%E4%B8%8E%E7%94%A8%E6%88%B7%E8%A7%92%E8%89%B2/</url>
      <content type="html"><![CDATA[<h1 id="再次理解-Flask-中登录与用户角色"><a href="#再次理解-Flask-中登录与用户角色" class="headerlink" title="再次理解 Flask 中登录与用户角色"></a>再次理解 Flask 中登录与用户角色</h1><h2 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h2><p>登录由以下几个部分构成：</p>
<ul>
<li>填写表单</li>
<li>验证用户信息是否正确</li>
<li>保存登录状态</li>
</ul>
<h3 id="填写表单"><a href="#填写表单" class="headerlink" title="填写表单"></a>填写表单</h3><p>填写表单这个应该没什么好说的，但是可以让表单更高级——加入验证码。</p>
<p>在这里我是用的 GeeTest。</p>
<p>接入方法：</p>
<ul>
<li>在其官网下载对应语言的 SDK，其中 Python 的 SDK 包括一个 geetest 的包以及一个用来注入到 HTML 中的 js 文件</li>
<li><p>在 HTML 中给验证码留出相应的位置，第一个控标签除就是验证码所在标签</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;col s12&quot; id=&quot;embed-captcha&quot;&gt;&lt;/div&gt;</div><div class="line">&lt;div class=&quot;col s12&quot;&gt;</div><div class="line">    &lt;p id=&quot;wait&quot; class=&quot;show&quot; style=&quot;color: #ee6e73&quot;&gt;正在加载验证码......&lt;/p&gt;</div><div class="line">    &lt;p id=&quot;notice&quot; class=&quot;hide&quot; style=&quot;color: red&quot;&gt;请先拖动验证码到相应位置&lt;/p&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>引入所给 js 文件，并且进行初始化，这部分只用复制下面的结构然后稍微改动即可</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">&lt;script src=&quot;&#123;&#123; url_for(&apos;static&apos;, filename=&apos;js/gt.js&apos;) &#125;&#125;&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;script&gt;</div><div class="line">        var handlerEmbed = function (captchaObj) &#123;</div><div class="line">            $(&quot;#embed-submit&quot;).click(function (e) &#123;</div><div class="line">                var validate = captchaObj.getValidate();</div><div class="line">                if (!validate) &#123;</div><div class="line">                    $(&quot;#notice&quot;)[0].className = &quot;show&quot;;</div><div class="line">                    setTimeout(function () &#123;</div><div class="line">                        $(&quot;#notice&quot;)[0].className = &quot;hide&quot;;</div><div class="line">                    &#125;, 2000);</div><div class="line">                    e.preventDefault();</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">            // 将验证码加到id为captcha的元素里，同时会有三个input的值：geetest_challenge, geetest_validate, geetest_seccode</div><div class="line">            captchaObj.appendTo(&quot;#embed-captcha&quot;);</div><div class="line">            captchaObj.onReady(function () &#123;</div><div class="line">                $(&quot;#wait&quot;)[0].className = &quot;hide&quot;;</div><div class="line">            &#125;);</div><div class="line">            // 更多接口参考：http://www.geetest.com/install/sections/idx-client-sdk.html</div><div class="line">        &#125;;</div><div class="line">        $.ajax(&#123;</div><div class="line">            // 获取id，challenge，success（是否启用failback）</div><div class="line">            url: &quot;/pc-geetest/register?t=&quot; + (new Date()).getTime(), // 加随机数防止缓存</div><div class="line">            type: &quot;get&quot;,</div><div class="line">            dataType: &quot;json&quot;,</div><div class="line">            success: function (data) &#123;</div><div class="line">                // 使用initGeetest接口</div><div class="line">                // 参数1：配置参数</div><div class="line">                // 参数2：回调，回调的第一个参数验证码对象，之后可以使用它做appendTo之类的事件</div><div class="line">                initGeetest(&#123;</div><div class="line">                    gt: data.gt,</div><div class="line">                    challenge: data.challenge,</div><div class="line">                    product: &quot;embed&quot;, // 产品形式，包括：float，embed，popup。注意只对PC版验证码有效</div><div class="line">                    offline: !data.success, // 表示用户后台检测极验服务器是否宕机，一般不需要关注</div><div class="line">                    width: &apos;25%&apos;</div><div class="line">                    // 更多配置参数请参见：http://www.geetest.com/install/sections/idx-client-sdk.html#config</div><div class="line">                &#125;, handlerEmbed);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &lt;/script&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>验证验证码状态（其实这部分也不用添加，不过添加了能更进一步提升可靠性，具体参阅官方文档）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"># 这个视图函数必须添加</div><div class="line">@main_blueprint.route(&apos;/pc-geetest/register&apos;, methods=[&apos;GET&apos;])</div><div class="line">def get_pc_captcha():</div><div class="line">    gt = GeetestLib(Config.pc_id, Config.pc_key)</div><div class="line">    status = gt.pre_process()</div><div class="line">    session[gt.GT_STATUS_SESSION_KEY] = status</div><div class="line">    response_str = gt.get_response_str()</div><div class="line">    return response_str</div><div class="line"></div><div class="line"></div><div class="line">@main_blueprint.route(&apos;/login&apos;, methods=[&apos;GET&apos;, &apos;POST&apos;])</div><div class="line">def login():</div><div class="line">    form = LoginForm()</div><div class="line">    if form.validate_on_submit():</div><div class="line">        # 这下面添加了能提升可靠性，也可以不添加</div><div class="line">        gt = GeetestLib(Config.pc_id, Config.pc_key)</div><div class="line">        challenge = request.form[gt.FN_CHALLENGE]</div><div class="line">        validate = request.form[gt.FN_VALIDATE]</div><div class="line">        seccode = request.form[gt.FN_SECCODE]</div><div class="line">        status = session[gt.GT_STATUS_SESSION_KEY]</div><div class="line">        if status:</div><div class="line">            result = gt.success_validate(challenge, validate, seccode)</div><div class="line">        else:</div><div class="line">            result = gt.failback_validate(challenge, validate, seccode)</div><div class="line">        ...</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="验证用户信息"><a href="#验证用户信息" class="headerlink" title="验证用户信息"></a>验证用户信息</h3><p>平常我们都是在视图函数中来检验密码是否是正确，但实际上和验证表单内容是否合法一样，这个工作也可以在表单类中完成。</p>
<p>我们在视图函数中通过 form.validate_on_submit 来检查表单是否被成功提交，实际上在返回结果之前我们要先调用 form.validate 函数，也正是在这里面，我们完成对表单内容合法性和密码正确性的检查。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">class LoginForm(FlaskForm):</div><div class="line">    username = StringField(&apos;用户名&apos;, [DataRequired(), Length(max=255)])</div><div class="line">    password = PasswordField(&apos;密码&apos;, [DataRequired()])</div><div class="line">    remember_me = BooleanField(&apos;记住登录状态&apos;)</div><div class="line"></div><div class="line">    def validate(self):  # 在 validate_on_submit 的时候会检查</div><div class="line">        check_validate = super(LoginForm, self).validate()</div><div class="line"></div><div class="line">        if not check_validate:</div><div class="line">            return False</div><div class="line"></div><div class="line">        user = User.query.filter_by(username=self.username.data).first()</div><div class="line">        if not user:</div><div class="line">            self.username.errors.append(&apos;用户名或密码错误&apos;)</div><div class="line">            return False</div><div class="line"></div><div class="line">        if not user.verify_password(self.password.data):</div><div class="line">            self.username.errors.append(&apos;用户名或密码错误&apos;)</div><div class="line">            return False</div><div class="line"></div><div class="line">        return True</div></pre></td></tr></table></figure>
<p>如果出现了错误则只用把它添加到相应表单的 errors 中去，然后就可以在 HTML 中显示出来。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;input-field col s12&quot;&gt;</div><div class="line">    &#123;&#123; form.password.label &#125;&#125;</div><div class="line">    &#123;&#123; form.password(class_=&apos;validate&apos;) &#125;&#125;</div><div class="line">    &#123;% if form.password.errors %&#125;</div><div class="line">        &#123;% for e in form.password.errors %&#125;</div><div class="line">            &lt;p class=&quot;help-block alert-danger&quot;&gt;&#123;&#123; e &#125;&#125;&lt;/p&gt;</div><div class="line">        &#123;% endfor %&#125;</div><div class="line">    &#123;% endif %&#125;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<h3 id="保存登录状态"><a href="#保存登录状态" class="headerlink" title="保存登录状态"></a>保存登录状态</h3><p>最基本的方法当然是使用 session 来保存，然后通过判断 session 是否有相应的信息来检查是否登录处于状态。</p>
<p>比较常用也是进阶的就是使用 flask-login 了。</p>
<p>使用 flask-login 需要根据模块来进行一定的配置：</p>
<ul>
<li>对 User 类实现特定的方法，这里可以通过继承 UserMixin 来简化，但是要注意如果用户 id 的格式和默认的不同则还是要重写 get_id 方法</li>
<li>定义登陆的视图，load_user 函数等<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">login_manger = LoginManager()</div><div class="line">login_manger.login_view = &apos;main.login&apos;</div><div class="line">login_manger.session_protection = &apos;strong&apos;</div><div class="line">login_manger.login_message = &apos;请登录以访问该页面&apos;</div><div class="line">login_manger.login_message_category = &apos;info&apos;</div><div class="line"></div><div class="line"></div><div class="line">@login_manger.user_loader</div><div class="line">def load_user(userid):</div><div class="line">    from .models import User</div><div class="line">    return User.query.get(userid)</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="用户角色"><a href="#用户角色" class="headerlink" title="用户角色"></a>用户角色</h2><p>要使用用户权限，则要进行用户角色的相应配置，在这里可以使用 flask-principal 模块来对用户权限进行管理。</p>
<p>当然我们要先建立一张表来控制用户和用户角色的多对多关系，在建立数据库之后不要忘记初始化角色表。</p>
<p>flask-principal 的关键名词主要有 Identity，Permission，Need。其中 Identity 和 Permission 都是通过 Need 来实现功能。Need 则是一些 namedtuple（相当于 C 语言中的结构体），包括 method 和 value 两个属性，定义了每种身份可以干什么。</p>
<p>例如 UserNeed 的 method 默认则是 id，key 则应该传入对应用户的 id 值，而 RoleNeed 的 method 的默认值则是 role，key 的默认值应该是 role 的名称。其中 UserNeed 和 RoleNeed 是通过 partical 固定了 Need 的一个参数。点击查看 <a href="http://www.jb51.net/article/87059.htm" target="_blank" rel="external">nametuple</a> 和 <a href="http://www.wklken.me/posts/2013/08/18/python-extra-functools.html" target="_blank" rel="external">partical</a> 用法。</p>
<p>Identity 是通过 user.id 来进行初始化的，然后此时会自动调用自己定义的初始化函数把需要添加的 Need 添加进这个 Identity 中。</p>
<p>在 __init__.py 中定义这个函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">@identity_loaded.connect_via(app)</div><div class="line">def on_identity_loaded(sender, identity):</div><div class="line">    identity.user = current_user</div><div class="line"></div><div class="line">    if hasattr(current_user, &apos;id&apos;):</div><div class="line">        identity.provides.add(UserNeed(current_user.id))</div><div class="line"></div><div class="line">    if hasattr(current_user, &apos;roles&apos;):</div><div class="line">        for role in current_user.roles:</div><div class="line">            identity.provides.add(RoleNeed(role.name))</div></pre></td></tr></table></figure></p>
<p>而当用户登录登出时 Identity 应该发生改变，此时应该调用 identity_changed 方法来发送信号，此时就会调用 on_identity_loaded 函数来进行新 Identity 的初始化</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">identity_changed.send(</div><div class="line">    current_app._get_current_object(),</div><div class="line">    identity=Identity(user.id)</div><div class="line">)</div></pre></td></tr></table></figure>
<p>而 Permission 则是通过 Need 来进行初始化，这些 Need 就表示当前权限所需的角色，只有满足了相应的角色才能达到相应权限。</p>
<p>初始化 Permission<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">admin_permission = Permission(RoleNeed(&apos;admin&apos;))</div><div class="line">poster_permission = Permission(RoleNeed(&apos;poster&apos;))</div><div class="line">default_permission = Permission(RoleNeed(&apos;default&apos;))</div></pre></td></tr></table></figure></p>
<p>使用 Permission 的方法：</p>
<ul>
<li><p>使用初始化权限的装饰器</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">@login_required</div><div class="line">@poster_permission.require(http_exception=403)</div><div class="line">def edit(id):</div><div class="line">    ...</div></pre></td></tr></table></figure>
</li>
<li><p>使用 Permission.can() 来判断是否符合权限</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">permission = Permission(UserNeed(post.user.id))</div><div class="line"></div><div class="line"># 发布者和管理员都有权限</div><div class="line">if permission.can() or admin_permission.can():</div><div class="line">    ...</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[《卑鄙的我3》]]></title>
      <url>https://blog.patrickcty.cc/2017/08/06/%E3%80%8A%E5%8D%91%E9%84%99%E7%9A%84%E6%88%913%E3%80%8B/</url>
      <content type="html"><![CDATA[<h1 id="《卑鄙的我-3》"><a href="#《卑鄙的我-3》" class="headerlink" title="《卑鄙的我 3》"></a>《卑鄙的我 3》</h1><h2 id="开始之前"><a href="#开始之前" class="headerlink" title="开始之前"></a>开始之前</h2><p>又是一部新的卑鄙的我，当它上映的时候我就决定去看看，一是因为小黄人，再者则是格鲁在前作中给人的印象太深刻。</p>
<p>虽然在国内这部电影的名字被翻译成了神偷奶爸，但是我还是更愿意称它为卑鄙的我，但是当卑鄙的我不再卑鄙，这部电影又是否保留着原来的惊喜呢？</p>
<p>在刚开始看电影的时候我就有一种强烈的看过的感觉，原来是很久之前看的预告片，但回想起来看了预告片之后，正片反而没什么惊喜可言了……</p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>关于上面的问题，答案是没有惊喜。在这一部里，格鲁已经从良，并因为任务失败被赶出了反恶人联盟。而此时格鲁则像一个遭遇了失业危机的中年男人，完全没有了作为一个反派的那种个性十足的感觉。</p>
<p>因为家庭元素的发展，特别是露西的出现，使得格鲁失去了重新成为坏人的可能，所以这一部的发展，也完全被这样的条件所限制住。但编剧为了冲破这样的限制，又让格鲁在他孪生弟弟面前演了一次坏人，不过这也无力回天，因为已经没有了坏人的灵魂，所以这部分注定不会那么精彩。</p>
<p>而作为本片的一大看点，小黄人的戏份却着实的少，甚至都没能出现在主线中。而小黄人的出走，似乎是编剧自己在吐槽格鲁从良这一设定。不过小黄人出现的地方还是保持了之前萌萌的风格，也算是本片为数不多的亮点了吧。</p>
<p>而露西和格鲁的女儿们的戏份简直可有可无，格鲁的女儿也没有把第一二部时的的萌萌的感觉再表现出来，它们的出场，似乎只是为了把时间给拖住，不然片长恐怕就不够了。</p>
<p>至于德鲁，不得不说人和人之间总是有差距 233。他的出场是一个亮点，然而这部分在预告片里面已经播出了，这就进一步减小了戏剧性……不过他的耍宝的风格还是带来了不少的欢乐，也正是有了他，才让格鲁的行动不那么轻松无趣，也让剧情不那么沉闷。我倒是很期待他在后作中和小黄人们一起四处做坏事，只是不知道他的技巧会不会有所长进 233，不然就 GG 了 233。至于德鲁的话，还是让他在家享受天伦之乐吧 233。</p>
<p>卑鄙的我系列其实到第二部就应该算作结束了，不过只要小黄人在，就不用担心没有故事可讲，期待小黄人大眼萌的续作～</p>
<h2 id="评分"><a href="#评分" class="headerlink" title="评分"></a>评分</h2><p>7/10.</p>
<p>小黄人依旧精彩，但是德鲁已经失去了之前的魅力。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[《蝙蝠侠：黑暗骑士》]]></title>
      <url>https://blog.patrickcty.cc/2017/08/05/%E3%80%8A%E8%9D%99%E8%9D%A0%E4%BE%A0%EF%BC%9A%E9%BB%91%E6%9A%97%E9%AA%91%E5%A3%AB%E3%80%8B/</url>
      <content type="html"><![CDATA[<h1 id="《蝙蝠侠：黑暗骑士》"><a href="#《蝙蝠侠：黑暗骑士》" class="headerlink" title="《蝙蝠侠：黑暗骑士》"></a>《蝙蝠侠：黑暗骑士》</h1><h2 id="开始之前"><a href="#开始之前" class="headerlink" title="开始之前"></a>开始之前</h2><p>都说诺兰是鬼才导演，这话真的不夸张。从我最早看的《蝙蝠侠：黑暗骑士的崛起》（那时候看的还是枪版，虽然画面模模糊糊，不过剧情真的感觉很不错，特别是蝙蝠侠在谷底挣扎的情景。不过因为年代久远，影片剧情都记不太清了，因此决定以后再刷一遍～），到之后看的《致命魔术》（当时真的感觉剧情碉堡了，不过因为是在学校看的，所以剧情可能有的地方错过了，同样决定再刷一遍～），再到之后看的《星际穿越》（这部充满物理知识的科幻片对于我这个理科男真的十分有吸引力，剧情也一如既往的神～），再就是之后看的《记忆碎片》（也是一部神片，拍摄手法真的是无敌，看完之后还是一脸懵逼，最终还是根据影评才梳理清楚了剧情 233），他的每一部电影都有不同的魔力，却又都有共同点，那就是剧情精彩，令人回味。</p>
<p>这晚我又十分想看电影，但又苦于近期没什么好看的电影，于是在豆瓣 Top 250 上寻找，看到了这一部之后我就知道我想看的是什么了。同时这一部是小丑加持，人们都说小丑塑造了反派的巅峰，之前小丑扮演者去世周年的时候还引发了一阵朋友圈悼念狂潮，这样的电影，当然要好好看一看～</p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>蝙蝠侠电影历来都是比较黑暗的，蝙蝠侠所在的城市高谭市给人的印象也总是充满了犯罪，即使有了蝙蝠侠的存在。而在本部电影中充满正义感的检察官哈维·登特的登场，使得蝙蝠侠的任务变得轻松起来。但是这个时候小丑出现了，小丑和蝙蝠侠就好像是正义和邪恶的两个极端。蝙蝠侠在现实生活中是一个亿万富翁，因此他成为蝙蝠侠的目的不是为了金钱和名誉，而是为了自己贯彻的理念，而类似的是，小丑嫌弃犯罪狂潮，也不是为了金钱地位，而是纯粹为了报复社会，让社会陷入混乱。也正是因为有了蝙蝠侠的映衬，小丑的形象才会这么丰满，但小丑也正是抓住了蝙蝠侠的弱点，才能如此肆无忌惮。</p>
<p>小丑是一个精通犯罪学的人，他能在一次次的行动中把所有人都戏耍得团团转，无论是各个黑帮大佬，还是警察局的各位，甚至连民众舆论以及蝙蝠侠都被他戏耍。从他第一次登场抢劫银行的情景就能察觉到，他抓住了同伙贪婪的心理，让他们除掉会分走自己钱的同伙，从而使受益者只有他一个。</p>
<p>小丑强就强大在他强大的威慑能力，他通过蝙蝠侠威慑了那一群黑帮大佬，使他们能与自己合作。而他通过同样的手段威慑了法官，警察局长他们身边的人，又用法官和局长的死亡进一步威慑了正义和群众。而他又通过“不交出蝙蝠侠则每天杀一个人”成功地把矛盾引向了蝙蝠侠，一瞬间保卫城市的黑暗骑士变成了威胁他们生存的存在。</p>
<p>此时还有两个关键，一个是哈维，一个是瑞秋。哈维是新上任到高谭市的白色骑士，是光明中的正义的象征，他为了正义不惧死亡，但这样的他实际上也并不是绝对正义，而“双面人”的称号也正是因为他的一些和正面形象完全不同的动作而形成的，这从他用私刑来逼供刺杀市长的犯人可以窥见——尽管硬币的两面都是正面，也就是说他并不会真的杀掉犯人。只是在这时他的另一面在外部环境的影响下控制得很好。</p>
<p>而小丑说过：“疯狂与混乱本身拥有着强大的引力。有时需要的只是轻轻一推。”，小丑要做的，就是轻轻地推动，让正义的象征哈维和蝙蝠侠堕入黑暗，那么他的目的就完美达到了。</p>
<p>故事真正的高潮是在刺杀市长事件之后蝙蝠侠被逼到了绝境，此时因为小丑的威慑，人民的矛盾都指向了蝙蝠侠，蝙蝠侠只得显出真身来平息民众的恐惧，而崇拜蝙蝠侠的哈维则决定以自己为诱饵，让蝙蝠侠抓住小丑。当蝙蝠侠就要抓到小丑的时候，小丑却利用了蝙蝠侠的底线——不杀人成功让蝙蝠侠没有撞向他而是偏离了方向。</p>
<p>而另一个关键瑞秋则是小丑用来操控蝙蝠侠和哈维的重要工具，因为两人都很爱她，她成为了两人的软肋。小丑就利用了这一点先让蝙蝠侠在哈维和瑞秋之间做出选择，只能拯救一个，而之后故意告诉错误地点的他则让蝙蝠侠没能救出所爱瑞秋而陷入了深深的自责，也让哈维精神崩溃。在这场事故中哈维的半边脸也被烧毁，成为了真正的“双面人”。</p>
<p>尽管小丑很想除掉蝙蝠侠，但是当真正想公布蝙蝠侠身份的人出现后他却要人们杀掉他，否则炸掉医院。当然从小丑的作风来不管结果如何，医院一定会被炸掉，因为他追求的是混乱和黑暗。哈维的黑暗，在和小丑的交谈中被真正触发了，他没有杀掉始作俑者小丑，却向间接害死瑞秋的人寻仇。最终哈维在处决戈登的时候被蝙蝠侠推下楼死亡，蝙蝠侠则背上了罪名，消失了……</p>
<p>小丑成功的地方就是他的疯狂，他用他疯狂却又实际上抓住弱点的行为来操控了其他人，达到自己的目的。而他的伎俩让蝙蝠侠陷入迷茫，让哈维堕入黑暗。虽然他最后败在了蝙蝠侠手上，但是实际上是他赢了。因为他所在意的，从在都不是他的性命，也正是这让他如此疯狂又可怕。而蝙蝠侠最后选择背负罪名，则让小丑胜利的影响降到了最低——民众没有失去战胜黑暗的信心。</p>
<p>而小丑也不是次次都胜利，在炸掉逃生船的社会实验中，最终两艘船都选择了不去按起爆按钮，这次人们没有被小丑威慑住，因为有更深的东西威慑到了他们——人性，按下了按钮则表示你要对另一条船的所有生命负责。因此即使是一开始吵着要按下按钮的秃头大叔，到最后真正有执行权的时候却也不敢下手。而更令我惊讶的是黑帮大佬在拿到起爆器之后居然直接将其丢向了窗外，这里真的值得深思。或许善恶之间真的没有那么多界限，所谓的善人，不也吵吵嚷嚷要按照小丑要求处决他人，而所谓的恶人，在最考验人性的地方却又安静了下来做出了令人意想不到的选择。</p>
<p>这部电影对人性的思考是十分深刻的，其中刻画的小丑，蝙蝠侠，哈维都十分成功，而网上的口碑也真的不是吹出来的。不过整体电影有点偏长，也有点过于神化小丑，但这些无伤大雅的小毛病也不应该被过多计较。</p>
<h2 id="评分"><a href="#评分" class="headerlink" title="评分"></a>评分</h2><p>9/10.</p>
<p>是一部值得思考的不一样的商业片。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[再次理解 Flask 中视图函数的用法]]></title>
      <url>https://blog.patrickcty.cc/2017/08/02/%E5%86%8D%E6%AC%A1%E7%90%86%E8%A7%A3Flask%E4%B8%AD%E8%A7%86%E5%9B%BE%E5%87%BD%E6%95%B0%E7%9A%84%E7%94%A8%E6%B3%95/</url>
      <content type="html"><![CDATA[<h1 id="再次理解-Flask-中视图函数的用法"><a href="#再次理解-Flask-中视图函数的用法" class="headerlink" title="再次理解 Flask 中视图函数的用法"></a>再次理解 Flask 中视图函数的用法</h1><h2 id="使用类描述视图"><a href="#使用类描述视图" class="headerlink" title="使用类描述视图"></a>使用类描述视图</h2><p>在 Flask 应用中，通常是用函数来描述视图的，但是如果多个函数都用到某些通用功能则用类实现视图就非常方便。</p>
<p>多个视图函数都要渲染模板<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">from flask.views import View</div><div class="line"></div><div class="line">class GenericView(View):  # 定义视图类，减少重复</div><div class="line">    def __init__(self, template):</div><div class="line">        self.template = template</div><div class="line">        super(GenericView, self).__init__()</div><div class="line"></div><div class="line">    # 作用和普通视图函数相同</div><div class="line">    def dispatch_request(self):</div><div class="line">        page = 1</div><div class="line">        posts = Post.query.order_by(</div><div class="line">            Post.publish_time.desc()</div><div class="line">        ).paginate(page, 10)</div><div class="line">        recent, top_tags = sidebar_data()</div><div class="line"></div><div class="line">        return render_template(</div><div class="line">            self.template,</div><div class="line">            posts=posts,</div><div class="line">            recent=recent,</div><div class="line">            top_tags=top_tags</div><div class="line">        )</div><div class="line"></div><div class="line"></div><div class="line">app.add_url_rule(</div><div class="line">    # 第一个参数是 url</div><div class="line">    &apos;/test&apos;,</div><div class="line">    view_func=GenericView.as_view(</div><div class="line">        &apos;test&apos;,  # 指定 endpoint</div><div class="line">        template=&apos;home.html&apos;</div><div class="line">    )</div><div class="line">)</div><div class="line"></div><div class="line">app.add_url_rule(</div><div class="line">    # 第一个参数是 url</div><div class="line">    &apos;/test2&apos;,</div><div class="line">    view_func=GenericView.as_view(</div><div class="line">        &apos;test&apos;,  # 指定 endpoint</div><div class="line">        template=&apos;index.html&apos;</div><div class="line">    )</div><div class="line">)</div></pre></td></tr></table></figure></p>
<p>如果要使用多种 HTTP 方法，则定义类属性 methods<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">class GenericView(View):  # 定义视图类，减少重复</div><div class="line">    methods = [&apos;GET&apos;, &apos;POST&apos;]  # 定义为类属性</div><div class="line">    </div><div class="line">    def __init__(self, template):</div><div class="line">        ...</div><div class="line"></div><div class="line">    # 作用和普通视图函数相同</div><div class="line">    def dispatch_request(self):</div><div class="line">        if request.method == &apos;GET&apos;:</div><div class="line">            ...</div><div class="line">        elif request.method == &apos;POST&apos;:</div><div class="line">            ...</div></pre></td></tr></table></figure></p>
<h2 id="使用方法视图"><a href="#使用方法视图" class="headerlink" title="使用方法视图"></a>使用方法视图</h2><p>方法视图允许把每种 HTTP 请求的处理函数写成一个同名的类方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">from flask.views import MethodView</div><div class="line"></div><div class="line">class UserView(MethodView):</div><div class="line">    def get(self):</div><div class="line">        ...</div><div class="line">    def post(self):</div><div class="line">        ...</div><div class="line">    def put(self):</div><div class="line">        ...</div><div class="line">        </div><div class="line">app.add_url_rule(&apos;/user&apos;, view_func=UserView.as_view(&apos;user&apos;))</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[再次理解 Flask-SQLAlchemy 中数据模型之间的关联]]></title>
      <url>https://blog.patrickcty.cc/2017/07/29/%E5%86%8D%E6%AC%A1%E7%90%86%E8%A7%A3Flask-SQLAlchemy%E4%B8%AD%E6%95%B0%E6%8D%AE%E6%A8%A1%E5%9E%8B%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E8%81%94/</url>
      <content type="html"><![CDATA[<h1 id="再次理解-Flask-SQLAlchemy-中数据模型之间的关联"><a href="#再次理解-Flask-SQLAlchemy-中数据模型之间的关联" class="headerlink" title="再次理解 Flask-SQLAlchemy 中数据模型之间的关联"></a>再次理解 Flask-SQLAlchemy 中数据模型之间的关联</h1><h2 id="一对多"><a href="#一对多" class="headerlink" title="一对多"></a>一对多</h2><p>Post 表示博客的文章<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">class Post(db.Model):</div><div class="line">    id = db.Column(db.Integer(), primary_key=True)</div><div class="line">    title = db.Column(db.String(255))</div><div class="line">    text = db.Column(db.Text())</div><div class="line">    publish_date = db.Column(db.Datetime())</div><div class="line">    # 外键的参数是&apos;表名.主键&apos;</div><div class="line">    # 也可以是类名.主键（不是字符串）</div><div class="line">    user_id = db.Column(db.Integer(), db.ForeignKey(&apos;user.id&apos;))  </div><div class="line"></div><div class="line">    def __init__(self, title):</div><div class="line">        self.title = title</div></pre></td></tr></table></figure></p>
<p>User 表示用户<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">class User(db.Model):</div><div class="line">    id = db.Column(db.Integer(), primary_key=True)</div><div class="line">    username = db.Column(db.String(255))</div><div class="line">    password = db.Column(db.String(255))</div><div class="line">    posts = db.relationship(  # 是一个 list，内容是该作者的所有 post 的对象</div><div class="line">        &apos;Post&apos;,  # Post 此时可能还没定义，所以用字符串作为参数传递</div><div class="line">        backref=&apos;user&apos;,</div><div class="line">        # 查询方式，dynamic 表示动态加载</div><div class="line">        # 这样在加载完 Post 的时候并不立刻加载与其关联的 User</div><div class="line">        # 而是在被使用时才加载</div><div class="line">        lazy=&apos;dynamic&apos; </div><div class="line">    )</div></pre></td></tr></table></figure></p>
<p>在一个典型的博客系统中，一篇文章的作者只有一个，而一个作者可能有多篇文章，因此 Post 通过外键与 User 建立了联系，User.id 作为了 Post 表的一列存在了表中。而 User 则使用 db.relationship 来和 ForeignKey 来建立联系。注意 db.relationship 定义的内容并不真的存在于数据库表中，只是存在于 SQLAlchemy 中。</p>
<h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><p>通过在 Post 中指定 user_id 来影响 User.posts<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; user = User.query.get(1)</div><div class="line">&gt;&gt;&gt; new_post = Post(&apos;Post Title&apos;)</div><div class="line">&gt;&gt;&gt; new_post.user_id = user.id</div><div class="line">&gt;&gt;&gt; db.session.add(new_post)</div><div class="line">&gt;&gt;&gt; db.session.commit()</div><div class="line">&gt;&gt;&gt; user.posts  # 此时新的 post 会被自动添加到 User 表中</div><div class="line">[&lt;Post &apos;Post Title&apos;&gt;]</div></pre></td></tr></table></figure></p>
<p>通过反向引用来影响 User.posts<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; second_post = Post(&apos;Second Title&apos;)</div><div class="line">&gt;&gt;&gt; second_post.user = user</div><div class="line">&gt;&gt;&gt; db.session.add(second_post)</div><div class="line">&gt;&gt;&gt; db.session.commit()</div><div class="line">&gt;&gt;&gt; user.posts  # 此时新的 post 也会被自动添加到 User 表中</div><div class="line">[&lt;Post &apos;Post Title&apos;&gt;, &lt;Post &apos;Second Title&apos;&gt;]</div></pre></td></tr></table></figure></p>
<p>在 relationship 中通过 backref 参数来指定了反向引用，因此在 Post 中只要通过 Post.user 就可以引用对应的 User 内容了，在这里就是通过反向引用来改变了 User.posts 的内容（新绑定了一个 post）</p>
<h3 id="关于-User-posts"><a href="#关于-User-posts" class="headerlink" title="关于 User.posts"></a>关于 User.posts</h3><p>User 中的 posts 字段因为是 dynamic 方式，所以既可以看作列表，也可以看做查询对象（可以在后面使用 filter_by 等）</p>
<p>看作列表<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; user.posts</div><div class="line">[&lt;Post &apos;Post Title&apos;&gt;, &lt;Post &apos;Second Title&apos;&gt;]</div></pre></td></tr></table></figure></p>
<p>看做查询对象<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; user.posts.order_by(Post.publish_date.desc()).all()</div><div class="line">[&lt;Post &apos;Second Title&apos;&gt;, &lt;Post &apos;Post Title&apos;&gt;]</div></pre></td></tr></table></figure></p>
<h3 id="一对多的最后"><a href="#一对多的最后" class="headerlink" title="一对多的最后"></a>一对多的最后</h3><p>因为二者进行了绑定，因此对一个的内容（一般是‘多’的那边）进行更改，另一个就可以马上同步而不用自己手动修改</p>
<h2 id="一对一"><a href="#一对一" class="headerlink" title="一对一"></a>一对一</h2><p>一对一和一对多类似，不过在声明 relationship 的时候要传入参数 <code>uselist=False</code></p>
<p>Userinfo 表示没那么重要的数据，对 User 作为补充<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">class Userinfo(db.Model):</div><div class="line">    id = db.Column(db.Integer(), db.ForeignKey(&apos;user.id&apos;), primary_key=True)</div><div class="line">    age = db.Column(db.String(255))</div><div class="line">    introduction = db.Column(db.Text())</div><div class="line">    update_date = db.Column(db.Datetime())</div></pre></td></tr></table></figure></p>
<p>User 表示用户<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">class User(db.Model):</div><div class="line">    id = db.Column(db.Integer(), primary_key=True)</div><div class="line">    username = db.Column(db.String(255))</div><div class="line">    password = db.Column(db.String(255))</div><div class="line">    userinfo = db.relationship(  </div><div class="line">        &apos;Userinfo&apos;,</div><div class="line">        backref=&apos;user&apos;,</div><div class="line">        uselist=False</div><div class="line">    )</div></pre></td></tr></table></figure></p>
<p>一对一的作用主要是副表对主表进行扩展，主表中存放的是相对重要的内容，而副表中存放的是相对没那么重要的内容。副表访问主表数据的方法和一对多相同，但是主表访问附表的方式就多种多样了</p>
<p>通过外键来查询<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; userinfo = Userinfo.query.get(user.id)</div></pre></td></tr></table></figure></p>
<p>二者建立双向绑定，通过主表反向调用副表<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">class Userinfo(db.Model):</div><div class="line">    id = db.Column(db.Integer(), db.ForeignKey(&apos;user.id&apos;), primary_key=True)</div><div class="line">    age = db.Column(db.String(255))</div><div class="line">    introduction = db.Column(db.Text())</div><div class="line">    update_date = db.Column(db.Datetime())</div><div class="line">    user = db.relationship(  </div><div class="line">        &apos;Use&apos;,</div><div class="line">        back_populates=&apos;userinfo&apos;,</div><div class="line">        uselist=False</div><div class="line">    )</div><div class="line"></div><div class="line">class User(db.Model):</div><div class="line">    id = db.Column(db.Integer(), primary_key=True)</div><div class="line">    username = db.Column(db.String(255))</div><div class="line">    password = db.Column(db.String(255))</div><div class="line">    userinfo = db.relationship(  </div><div class="line">        &apos;Userinfo&apos;,</div><div class="line">        back_populates=&apos;user&apos;,</div><div class="line">        uselist=False</div><div class="line">    )</div></pre></td></tr></table></figure></p>
<p>这里 back_populates 和 backref 意义是相似的，但是 back_populates 必须要在两处都进行说明，这样同时也可以进行双向的反向引用了</p>
<p>因此主表访问附表就可以直接访问了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; userinfo = user.userinfo</div></pre></td></tr></table></figure></p>
<h2 id="多对多"><a href="#多对多" class="headerlink" title="多对多"></a>多对多</h2><p>数据库模型定义如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"># 直接用 db.Table 来建立表</div><div class="line">tags = db.Table(  # 辅助表，用来建立多对多关系</div><div class="line">    &apos;post_tags&apos;,  # 表名</div><div class="line">    db.Column(&apos;post_id&apos;, db.Integer, db.ForeignKey(&apos;post.id&apos;)),</div><div class="line">    db.Column(&apos;tag_id&apos;, db.Integer, db.ForeignKey(&apos;tag.id&apos;))</div><div class="line">)</div><div class="line"></div><div class="line"></div><div class="line">class Post(db.Model):</div><div class="line">    id = db.Column(db.Integer(), primary_key=True)</div><div class="line">    title = db.Column(db.String(255))</div><div class="line">    text = db.Column(db.Text())</div><div class="line">    publish_date = db.Column(db.Datetime())</div><div class="line">    user_id = db.Column(db.Integer(), db.ForeignKey(&apos;user.id&apos;))</div><div class="line">    tags = db.relationship(  # 声明关系</div><div class="line">        &apos;Tag&apos;,  # 主要是给 Tag 引用</div><div class="line">        secondary=tags,  # 通过 tags 作为中介</div><div class="line">        backref=backref(&apos;posts&apos;, lazy=&apos;dynamic&apos;)</div><div class="line">    )</div><div class="line"></div><div class="line">    def __init__(self, title):</div><div class="line">        self.title = title</div><div class="line"></div><div class="line"></div><div class="line">class Tag(db.Model):</div><div class="line">    id = db.Column(db.Integer(), primary_key=True)</div><div class="line">    title = db.Column(db.String(255))</div><div class="line"></div><div class="line">    def __init__(self, title):</div><div class="line">        self.title = title</div></pre></td></tr></table></figure></p>
<p>用法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; post_one = Post.query.all()[1]</div><div class="line">&gt;&gt;&gt; post_two = Post.query.all()[2]</div><div class="line">&gt;&gt;&gt; tag_one = Tag(&apos;Python&apos;)</div><div class="line">&gt;&gt;&gt; tag_two = Tag(&apos;SQLAlchemy&apos;)</div><div class="line">&gt;&gt;&gt; tag_three = Tag(&apos;Flask&apos;)</div><div class="line">&gt;&gt;&gt; post_one.tags = [tag_two]  # 手动创建对应关系</div><div class="line">&gt;&gt;&gt; post_two.tags = [tag_one, tag_two, tag_three]</div><div class="line">&gt;&gt;&gt; tag_two.posts  # 反向引用</div><div class="line">[tag_one, tag_two, tag_three]</div><div class="line">&gt;&gt;&gt; db.session.add(post_one)  # 似乎并没有 add tag 到 session</div><div class="line">&gt;&gt;&gt; db.session.add(post_two)  # 因为通过回话自动保存了标签</div><div class="line">&gt;&gt;&gt; db.session.commit()</div></pre></td></tr></table></figure></p>
<p>在所对多关系中，backref 也变成了 list，可以通过 list 的 append 方法来添加文章到标签<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; tag_one.posts.append(post_one)</div><div class="line">[&lt;Post &apos;Post Title&apos;&gt;, &lt;Post &apos;Second Title&apos;&gt;] </div><div class="line">&gt;&gt; post_one.tags</div><div class="line">[&lt;Tag &apos;SQLAlchemy&apos;&gt;, &lt;Tag &apos;Python&apos;&gt;]</div><div class="line">&gt;&gt;&gt; db.session.add(tag)</div><div class="line">&gt;&gt;&gt; db.session.commit()</div></pre></td></tr></table></figure></p>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>如果要重写 <strong>init</strong> 方法的话则要注意使用的变量是否已经初始化了，没有初始化的话可能变量值为 None，此时调用就会报错。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Docker学习（一）]]></title>
      <url>https://blog.patrickcty.cc/2017/07/20/Docker%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      <content type="html"><![CDATA[<h1 id="Docker-学习（一）"><a href="#Docker-学习（一）" class="headerlink" title="Docker 学习（一）"></a>Docker 学习（一）</h1><h2 id="理解-Docker"><a href="#理解-Docker" class="headerlink" title="理解 Docker"></a>理解 Docker</h2><p>基本概念：</p>
<ul>
<li>镜像</li>
<li>容器</li>
</ul>
<h3 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h3><p>是一个特殊的文件系统，包含了容器运行时的依赖。</p>
<p>镜像是一层层构建的，前一层是后一层的基础。每一层构建完就不会再改变，后一层删除前一层文件的操作会保留文件，只是该文件会标记为已删除。</p>
<p>因为上面所说的特性，镜像是只读的。</p>
<h3 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h3><p>容器是镜像的实例，容器运行时在镜像层上创建一个存储层，该存储层会在容器消亡时消亡，该层中的数据也不会保留。</p>
<p>按照 Docker 最佳实践的要求，容器不应该向其存储层内写入任何数据，容器存储层要保持无状态化。所有的文件写入操作，都应该使用 数据卷（Volume）、或者绑定宿主目录，在这些位置的读写会跳过容器存储层，直接对宿主(或网络存储)发生读写，其性能和稳定性更高。</p>
<h2 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h2><h3 id="不使用-sudo-命令执行-Docker"><a href="#不使用-sudo-命令执行-Docker" class="headerlink" title="不使用 sudo 命令执行 Docker"></a>不使用 sudo 命令执行 Docker</h3><p>因为 Docker 运行时需要特殊权限，所以默认执行命令都必须在前面加上 sudo。</p>
<p>不使用 sudo 命令执行 Docker 方法：把用户放进 docker 用户组里面（等同于赋予它 root 权限）。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo useradd -aG docker $USER  # 还要注销重新登录</div><div class="line">sudo service docker restart  # 重启服务</div></pre></td></tr></table></figure>
<h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><p>获取某个容器的信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker inspect 容器名/容器 ID</div></pre></td></tr></table></figure></p>
<p>查看容器文件改变情况<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker diff 容器名/容器 ID</div></pre></td></tr></table></figure></p>
<p>查看容器日志<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker logs 容器名/容器 ID</div></pre></td></tr></table></figure></p>
<p>删除容器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker rm 容器名/容器 ID</div></pre></td></tr></table></figure></p>
<p>列出容器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">docker ps        # 查看运行中的容器</div><div class="line">docker ps -a     # 查看所有容器</div><div class="line">docker ps -aq    # 查看所有容器，只显示容器 ID</div></pre></td></tr></table></figure></p>
<p>删除镜像<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker rmi 镜像名/镜像 ID</div></pre></td></tr></table></figure></p>
<p>下载/上传镜像<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker pull/push 镜像名[:TAG|@DIGEST]</div></pre></td></tr></table></figure></p>
<p>创建容器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run</div></pre></td></tr></table></figure></p>
<h2 id="通过-Dockerfile-定制镜像"><a href="#通过-Dockerfile-定制镜像" class="headerlink" title="通过 Dockerfile 定制镜像"></a>通过 Dockerfile 定制镜像</h2><p><code>docker commit</code> 命令可以通过容器产生镜像，但是要重复操作产生多个相同镜像却不方便，此时使用 Dockerfile 能解决这个问题。</p>
<p>Dockerfile 是一个文本文件，其内包含了一条条的指令(Instruction)，每一条指令构建一层，因此每一条指令的内容，就是描述该层应当如何构建。</p>
<h3 id="使用-docker-build-来构建镜像"><a href="#使用-docker-build-来构建镜像" class="headerlink" title="使用 docker build 来构建镜像"></a>使用 <code>docker build</code> 来构建镜像</h3><p>格式为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker build [选项] &lt;上下文路径/URL/-&gt;</div></pre></td></tr></table></figure></p>
<p>其中常用到 -t 选项来指定构建出的镜像的名称。</p>
<p>当构建的时候，用户会指定构建镜像上下文的路径，docker build 命令得知这个路径后，会将路径下的所有内容打包，然后上传给 Docker 引擎。这样 Docker 引擎收到这个上下文包后，展开就会获得构建镜像所需的一切文件。</p>
<p>一般新建一个空文件夹并以该文件夹作为上下文路径来构建镜像。</p>
<p>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker build -t myimage .</div></pre></td></tr></table></figure></p>
<p>这里的“.“就是上下文路径，表示当前文件夹。</p>
<h3 id="FROM-指定基础镜像"><a href="#FROM-指定基础镜像" class="headerlink" title="FROM 指定基础镜像"></a>FROM 指定基础镜像</h3><p>定制镜像一定要以一个镜像为基础，而 FROM 指令就是指定基础镜像，并且这是最基本的指令，并且必须是第一条指令。</p>
<h3 id="RUN-执行命令"><a href="#RUN-执行命令" class="headerlink" title="RUN 执行命令"></a>RUN 执行命令</h3><ul>
<li>shell 格式：<code>RUN &lt;命令&gt;</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">RUN echo &apos;&lt;h1&gt;Hello, Docker!&lt;/h1&gt;&apos; &gt; /usr/share/nginx/html/index.html</div></pre></td></tr></table></figure>
<ul>
<li>exec 格式：<code>RUN [&quot;可执行文件&quot;, &quot;参数1&quot;, &quot;参数2&quot;]</code></li>
</ul>
<p>注：因为每个 Dockerfile 的指令都会新建一层，而层数多并不是一件有意义的事情，因此应该用 &amp;&amp; 连接多个命令在一条 RUN 指令里面执行，并且在每一层构建的最后删除掉无关文件。</p>
<p>例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">FROM debian:jessie</div><div class="line"></div><div class="line">RUN buildDeps=&apos;gcc libc6-dev make&apos; \</div><div class="line">    &amp;&amp; apt-get update \</div><div class="line">    &amp;&amp; apt-get install -y $buildDeps \</div><div class="line">    &amp;&amp; wget -O redis.tar.gz &quot;http://download.redis.io/releases/redis-3.2.5.tar.gz&quot; \</div><div class="line">    &amp;&amp; mkdir -p /usr/src/redis \</div><div class="line">    &amp;&amp; tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1 \</div><div class="line">    &amp;&amp; make -C /usr/src/redis \</div><div class="line">    &amp;&amp; make -C /usr/src/redis install \</div><div class="line">    &amp;&amp; rm -rf /var/lib/apt/lists/* \</div><div class="line">    &amp;&amp; rm redis.tar.gz \</div><div class="line">    &amp;&amp; rm -r /usr/src/redis \</div><div class="line">    &amp;&amp; apt-get purge -y --auto-remove $buildDeps</div></pre></td></tr></table></figure></p>
<h3 id="COPY-复制文件"><a href="#COPY-复制文件" class="headerlink" title="COPY 复制文件"></a>COPY 复制文件</h3><p>COPY 指令将从构建上下文目录中 &lt;源路径&gt; 的文件/目录复制到新的一层的镜像内的 &lt;目标路径&gt; 位置。</p>
<p>格式：</p>
<ul>
<li><code>COPY &lt;源路径&gt;... &lt;目标路径&gt;</code></li>
<li><code>COPY [&quot;&lt;源路径1&gt;&quot;,... &quot;&lt;目标路径&gt;&quot;]</code></li>
</ul>
<h3 id="ADD-更高级的复制文件"><a href="#ADD-更高级的复制文件" class="headerlink" title="ADD 更高级的复制文件"></a>ADD 更高级的复制文件</h3><p>ADD 指令和 COPY 的格式和性质基本一致。但是在 COPY 基础上增加了一些功能。</p>
<p>比如 &lt;源路径&gt; 可以是一个 URL。</p>
<p>在 COPY 和 ADD 指令中选择的时候，可以遵循这样的原则，所有的文件复制均使用 COPY 指令，仅在需要自动解压缩的场合使用 ADD。</p>
<h3 id="CMD-容器启动命令"><a href="#CMD-容器启动命令" class="headerlink" title="CMD 容器启动命令"></a>CMD 容器启动命令</h3><p>那么在启动容器的时候，需要指定所运行的程序及参数。CMD 指令就是用于指定默认的容器主进程的启动命令的。</p>
<p>例如 ubuntu 镜像默认的 CMD 就是 <code>/bin/bash</code>。</p>
<p>CMD 指令的格式和 RUN 相似，也是两种格式：</p>
<ul>
<li>shell 格式：<code>CMD &lt;命令&gt;</code></li>
<li>exec 格式：<code>CMD [&quot;可执行文件&quot;, &quot;参数1&quot;, &quot;参数2&quot;...]</code></li>
<li>参数列表格式：<code>CMD [&quot;参数1&quot;, &quot;参数2&quot;...]</code>（在指定了 ENTRYPOINT 指令后，用 CMD 指定具体的参数）</li>
</ul>
<h3 id="ENTRYPOINT-入口点"><a href="#ENTRYPOINT-入口点" class="headerlink" title="ENTRYPOINT 入口点"></a>ENTRYPOINT 入口点</h3><p>格式和 CMD 相同。</p>
<p>ENTRYPOINT 的目的和 CMD 一样，都是在指定容器启动程序及参数，但当指定了 ENTRYPOINT 后，CMD 的含义就发生了改变，不再是直接的运行其命令，而是将 CMD 的内容作为参数传给 ENTRYPOINT 指令。</p>
<h3 id="ENV-设置环境变量"><a href="#ENV-设置环境变量" class="headerlink" title="ENV 设置环境变量"></a>ENV 设置环境变量</h3><p>格式有两种：</p>
<ul>
<li><code>ENV &lt;key&gt; &lt;value&gt;</code></li>
<li><code>ENV &lt;key1&gt;=&lt;value1&gt; &lt;key2&gt;=&lt;value2&gt;...</code></li>
</ul>
<p>环境变量可以在其他的 Dockerfile 指令里面展开。</p>
<h3 id="VOLUME-定义匿名卷"><a href="#VOLUME-定义匿名卷" class="headerlink" title="VOLUME 定义匿名卷"></a>VOLUME 定义匿名卷</h3><p>格式为：</p>
<ul>
<li><code>VOLUME [&quot;&lt;路径1&gt;&quot;, &quot;&lt;路径2&gt;&quot;...]</code></li>
<li><code>VOLUME &lt;路径&gt;</code></li>
</ul>
<h3 id="EXPOSE-声明端口"><a href="#EXPOSE-声明端口" class="headerlink" title="EXPOSE 声明端口"></a>EXPOSE 声明端口</h3><p>格式为 <code>EXPOSE &lt;端口1&gt; [&lt;端口2&gt;...]</code>。</p>
<p>EXPOSE 指令是声明运行时容器提供服务端口，这只是一个声明，在运行时并不会因为这个声明应用就会开启这个端口的服务。</p>
<h3 id="WORKDIR-指定工作目录"><a href="#WORKDIR-指定工作目录" class="headerlink" title="WORKDIR 指定工作目录"></a>WORKDIR 指定工作目录</h3><p>格式为 <code>WORKDIR &lt;工作目录路径&gt;</code>。</p>
<p>使用 WORKDIR 指令可以来指定工作目录（或者称为当前目录），以后各层的当前目录就被改为指定的目录，如该目录不存在，WORKDIR 会帮你建立目录。</p>
<h3 id="USER-指定当前用户"><a href="#USER-指定当前用户" class="headerlink" title="USER 指定当前用户"></a>USER 指定当前用户</h3><p>格式：<code>USER &lt;用户名&gt;</code>。</p>
<p>USER 指令和 WORKDIR 相似，都是改变环境状态并影响以后的层。WORKDIR 是改变工作目录，USER 则是改变之后层的执行 RUN, CMD 以及 ENTRYPOINT 这类命令的身份。</p>
<p>当然，和 WORKDIR 一样，USER 只是帮助你切换到指定用户而已，这个用户必须是事先建立好的，否则无法切换。</p>
<h3 id="ONBUILD-为他人做嫁衣裳"><a href="#ONBUILD-为他人做嫁衣裳" class="headerlink" title="ONBUILD 为他人做嫁衣裳"></a>ONBUILD 为他人做嫁衣裳</h3><p>格式：<code>ONBUILD &lt;其它指令&gt;</code>。</p>
<p>ONBUILD 是一个特殊的指令，它后面跟的是其它指令，比如 RUN, COPY 等，而这些指令，在当前镜像构建时并不会被执行。只有当以当前镜像为基础镜像，去构建下一级镜像的时候才会被执行。</p>
<p>一般用于维护多个镜像，这样升级只用重新构建镜像即可，而不用修改每个的 Dockerfile</p>
<h2 id="参考教程"><a href="#参考教程" class="headerlink" title="参考教程"></a>参考教程</h2><p><a href="https://www.gitbook.com/book/yeasy/docker_practice/details" target="_blank" rel="external">Docker——从入门到实践</a><br>Docker 开发指南——O’REILLY</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[《第一行代码—— Android 休闲学习（一）]]></title>
      <url>https://blog.patrickcty.cc/2017/07/17/Android1/</url>
      <content type="html"><![CDATA[<h1 id="《第一行代码》——-Android-休闲学习（一）"><a href="#《第一行代码》——-Android-休闲学习（一）" class="headerlink" title="《第一行代码》—— Android 休闲学习（一）"></a>《第一行代码》—— Android 休闲学习（一）</h1><h2 id="日志工具使用"><a href="#日志工具使用" class="headerlink" title="日志工具使用"></a>日志工具使用</h2><p>先用<code>import android.util.Log;</code>来导入所需库函数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Log.v()  // verbose</div><div class="line">Log.d()  // debug</div><div class="line">Log.i()  // info</div><div class="line">Log.w()  // waring</div><div class="line">Log.e()  // error</div></pre></td></tr></table></figure>
<p>日志的等级从上到下依次增高。</p>
<p>日志样式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">07-16 19:37:03.494 15142-15142/com.example.patrick.activitytest D/FirstActivity: Hello FirstActivity</div></pre></td></tr></table></figure></p>
<p>其中<code>FirstActivity</code>是 tag，为了方便过滤日志，<code>Hello FirstActivity</code>是日志的内容</p>
<p>使用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// tag 一般传入当前的类名</div><div class="line">Log.d(tag, msg);</div></pre></td></tr></table></figure></p>
<p>小技巧</p>
<blockquote>
<p>在 onCreate() 方法的外面输入 logt，然后按下 Tab 键，这时候就会以当前的类名作为值自动生成一个 TAG 常量<br>例如：private static final String TAG = “HelloWorldActivity”;</p>
</blockquote>
<h2 id="活动"><a href="#活动" class="headerlink" title="活动"></a>活动</h2><p>活动是一种可以包含用户界面的组件，主要用于和用户进行交互。我们看到的页面就是活动。</p>
<h3 id="活动的基本用法"><a href="#活动的基本用法" class="headerlink" title="活动的基本用法"></a>活动的基本用法</h3><ul>
<li>创建活动：在 /ActivityTest/app/src/main/java/com.example.patrick.activitytest 下创建活动</li>
<li>创建和加载布局（可以自动完成）<ul>
<li>在app/src/main/res 下创建 layout 目录，再在这个目录下创建布局文件</li>
<li>可以在这个文件里面增添元素（要使用的话得在活动中定义动作）</li>
<li>在活动中重写 onCreate 来加载布局，使用 setContentView() </li>
</ul>
</li>
<li>在 AndroidMainfest 文件中注册（自动完成）</li>
<li>配置主活动（一个程序至少要有一个，不然就不能在启动器中看到和打开程序）</li>
</ul>
<h3 id="在活动中使用-Toast"><a href="#在活动中使用-Toast" class="headerlink" title="在活动中使用 Toast"></a>在活动中使用 Toast</h3><p>Toast 是在接近底部的地方弹出的提示</p>
<ul>
<li>触发 Toast（这里是点击按钮触发）</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">// 获取元素，返回值是 View 对象，要下转型成 Button 对象</div><div class="line">Button button1 = (Button) findViewById(R.id.button_1);  </div><div class="line">// 注册监视器，监视点击事件</div><div class="line">button1.setOnClickListener(new View.OnClickListener() &#123;  // 匿名类</div><div class="line">    @Override</div><div class="line">    public void OnClick(View v) &#123;</div><div class="line">        // 通过静态方法创建 Toast 对象并通过 .show() 来使用</div><div class="line">        // 第一个参数是 Toast 的上下文，直接传入活动就可以</div><div class="line">        // 第二个参数就是 Toast 显示的文本</div><div class="line">        // 第三个参数是 Toast 显示的时长</div><div class="line">        Toast.makeText(FirstActivity.this, &quot;You clicked Button 1&quot;,</div><div class="line">            Toast.LENGTH_SHORT).show();</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>小技巧</p>
<blockquote>
<p>按 Ctrl-O 可以方便地重写方法</p>
</blockquote>
<h3 id="在活动中使用-Menu"><a href="#在活动中使用-Menu" class="headerlink" title="在活动中使用 Menu"></a>在活动中使用 Menu</h3><p>Menu 是页面右上角的三个竖着的小点点。</p>
<p>使用 Menu</p>
<ul>
<li>在 res 目录下新建 menu 文件夹，并且在该目录下创建菜单文件<ul>
<li>在该文件通添加菜单项</li>
<li>android:id 是菜单项的标识符，在活动中用<code>R.id.标识符名</code>来引用</li>
<li>android:title 是菜单的名称（显示在菜单中）</li>
</ul>
</li>
<li>在活动中重写 onCreateOptionsMenu() 方法来初始菜单，可以使用 Ctrl + O 快捷键</li>
<li>定义菜单相应事件，通过重写 onOptionsItemSelected() 方法<ul>
<li>通过 <code>item.getItemId()</code> 来判断点击的是哪个菜单项</li>
</ul>
</li>
</ul>
<h3 id="销毁活动"><a href="#销毁活动" class="headerlink" title="销毁活动"></a>销毁活动</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">finish()  // 相当于按返回键</div></pre></td></tr></table></figure>
<h3 id="使用-Intent-切换活动"><a href="#使用-Intent-切换活动" class="headerlink" title="使用 Intent 切换活动"></a>使用 Intent 切换活动</h3><h4 id="显式-Intent"><a href="#显式-Intent" class="headerlink" title="显式 Intent"></a>显式 Intent</h4><p>直接指明了要切换的目的活动。</p>
<p>源活动<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// 第一个参数是启动活动的上下文</div><div class="line">// 第二个参数是要启动的目标活动的类</div><div class="line">Intent intent = new Intent(FirstAcitity.this, SecondActivity.class);</div><div class="line">// 用来启动活动</div><div class="line">startActivity(intent);</div></pre></td></tr></table></figure></p>
<h4 id="隐式-Intent"><a href="#隐式-Intent" class="headerlink" title="隐式 Intent"></a>隐式 Intent</h4><p>并不明确指明要启动的活动，而是指定了更为抽象的 action 和 category 等信息，然后交由系统来启动目的活动，可以是同一个应用的活动，也可以是其他应用的活动。</p>
<p>使用方法：</p>
<ul>
<li>在 AndroidManifest.xml 文件中指明 action 与 category</li>
<li>在活动中使用 Intent<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// 只有当二者的 action 和 category 完全匹配才能响应 Intent</div><div class="line">// 隐式 Intent 使用 action 来初始化实例的</div><div class="line">Intent intent = new Intent(&quot;和前面指明的 action 内容相同&quot;);</div><div class="line">intent.addCategory(&quot;和前面指明的 category 内容相同&quot;);</div><div class="line">startActivity(intent);</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="隐式-Intent-Plus"><a href="#隐式-Intent-Plus" class="headerlink" title="隐式 Intent Plus"></a>隐式 Intent Plus</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">// Intent.ACTION_VIEW 是一个 Android 内置的动作</div><div class="line">// 对应的 xml 文件中的值是 android.intent.category.VIEW</div><div class="line">Intent intent = new Intent(Intent.ACTION_VIEW);</div><div class="line">// setData() 接受一个 Uri 对象，指定操作的数据（注意不是 Url）</div><div class="line">intent.setData(Uri.parse(&quot;https://blog.patrickcty.cc&quot;));</div><div class="line">startActivity(intent);</div></pre></td></tr></table></figure>
<h4 id="用-Intent-向下一个活动传递信息"><a href="#用-Intent-向下一个活动传递信息" class="headerlink" title="用 Intent 向下一个活动传递信息"></a>用 Intent 向下一个活动传递信息</h4><p>使用 putExtra() 发送数据，在目的活动中使用 getStringExtra() 取出数据</p>
<p>源活动<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">String data = &quot;Hello SecondActivity&quot;;</div><div class="line">Intent intent = new Intent(FirstActivity.this, SecondActivity.class);</div><div class="line">// putExtra 接受两个参数，第一个参数是 key，用来在目的活动取出数据</div><div class="line">// 第二个参数是数据</div><div class="line">intent.putExtra(&quot;extra_data&quot;, data);</div><div class="line">startActivity(intent);</div></pre></td></tr></table></figure></p>
<p>目的操作<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Intent intent = getIntent();</div><div class="line">// 通过 key 来取出数据并保存在 data 里面</div><div class="line">String data = intent.getStringExtra(&quot;extra_data&quot;);</div></pre></td></tr></table></figure></p>
<h4 id="用-Intent-返回数据给上一个活动"><a href="#用-Intent-返回数据给上一个活动" class="headerlink" title="用 Intent 返回数据给上一个活动"></a>用 Intent 返回数据给上一个活动</h4><p>startActivityForResult() 启动活动并且在活动销毁的时候能够返回结果给上一个活动。</p>
<p>源活动按钮的点击事件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Intent intent = new Intent(FirstActivity.this, SecondActivity.class);</div><div class="line">// 第二个参数是请求码，唯一，用来区分不同请求</div><div class="line">startActivityForResult(intent, 1);</div></pre></td></tr></table></figure></p>
<p>目的活动<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Intent intent = new Intent();</div><div class="line">intent.putExtra(&quot;data_return&quot;, &quot;Hello FirstActivity&quot;);</div><div class="line">// 专门用来向上一个活动返回数据</div><div class="line">// 第一个参数是处理结果，第二个参数是 Intent</div><div class="line">setResult(RESULT_OK, intent);</div><div class="line">finish();</div></pre></td></tr></table></figure></p>
<p>源活动接受数据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">// requestCode 就是上面唯一的请求码</div><div class="line">// resultCode 就是处理结果</div><div class="line">@Override</div><div class="line">protected void onActivityResult(int requestCode, int resultCode, Intent data) &#123;</div><div class="line">    switch (requestCode) &#123;</div><div class="line">        case 1:</div><div class="line">            if (resultCode == RESULT_OK) &#123;</div><div class="line">                String returnedData = data.getStringExtra(&quot;data_return&quot;);</div><div class="line">            &#125;</div><div class="line">            break;</div><div class="line">        default:</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[《一条狗的使命》]]></title>
      <url>https://blog.patrickcty.cc/2017/07/10/%E3%80%8A%E4%B8%80%E6%9D%A1%E7%8B%97%E7%9A%84%E4%BD%BF%E5%91%BD%E3%80%8B/</url>
      <content type="html"><![CDATA[<h1 id="《一条狗的使命》"><a href="#《一条狗的使命》" class="headerlink" title="《一条狗的使命》"></a>《一条狗的使命》</h1><h2 id="开始之前"><a href="#开始之前" class="headerlink" title="开始之前"></a>开始之前</h2><p>不得不说这学期的课程太过凶残了，平常两周的复习周就可以把要复习的都复习完了，然后考试周就可以休闲一点了。但是今年的两周复习周基本上都用在复习计组和操作系统上面去了，所以即使是考试周每天考完了也还是要继续留在图书馆“抢救”，所以在看这部电影之前考试周这么久我都没有看过一部电影。</p>
<p>不过因为只剩最后一门了，所以提前了不少时间回寝室了，之后便打开了这部电影～</p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>影片是以狗为第一人称视角来写的，这个视角给不少地方都增添了笑点，算是一个比较成功的 idea。影片中的狗狗经历了五次转世。其实一开始我是没有意识到是转世的，因为从一开始狗狗被捕，到后来是一只大狗狗在笼子里面，感觉并没有什么不对 233（虽然两次毛的颜色不同）。后来我才意识到了原来是经过了转世。</p>
<p>其中最重要的也是最着力刻画的是第二次转世和地五次转世，但是第二次转世在网上引起的争议也是最大的。</p>
<p>小男孩伊森和妈妈救助了一只被关在车里因为灼热气温而濒死的狗狗并带回了家，而养狗的第一个关键就是获得爸爸的同意。影片似乎是有意把爸爸作为一个大反派来刻画的，从刚进家开始爸爸就不怎么喜欢这只狗，而且爸爸这个人也比较消极，每天因为政治和工作而苦恼，总是一副不高兴的样子。直到领导来家里吃饭的尴尬遭遇，狗毁掉了爸爸升职的机会，爸爸对狗的愤怒升到了顶峰并彻底爆发。</p>
<p>但在这之前，伊森和贝利的接球配合已经很好了，那个贝利找到的橄榄球也在后面成为了重要的线索，Boss Dog 的名号也叫起来了。有人说这个 Boss Dog 叫得不合适，不能让狗形成自己是老大的念头，不过我对狗是否能理解这个称呼的意思表示怀疑，而且昵称这种东西嘛，只要不是那种侮辱性的，大家都开心就好嘛。</p>
<p>在爸爸升职的机会被毁掉后，伊森进入了高中，成为了橄榄球对的核心成员，而爸爸却显现出了颓废之态，成为了酒鬼，直到一次推搡妈妈被赶出了家门。但在这次冲突之前其实爸爸就有一次也是怒气冲冲地离开了家，口里还怪罪着妈妈花了他的很多钱。其实我个人感觉这个地方表现的很不好，很多人觉得是狗让爸爸变成了这样，但我觉得这样的一次打击应该不至于毁掉一个男人，更何况他是顶级销售员，即使被炒了去其他的公司也未必混不开。从网上的评论可以猜到应该是由于时代原因，推销被逐渐取代，爸爸的工作也因此越来越难做甚至没了，而这样的打击使得原本就比较消极的他彻底堕落，沦为了一个酒鬼。再加上妈妈总是用他很多钱，这样的小事情就引起了夫妻之间的矛盾，使得夫妻之间难以好好沟通，造成了被赶出家门的前因。</p>
<p>对我觉得爸爸这条支线描写得真的是不是很好，内容太过简略，又有一种把人往狗狗毁掉了爸爸的人生这方向带的感觉，另外对于妈妈用很多钱这个地方也很模糊，所以当最后爸爸被赶出家这时候我是真的感觉莫名其妙。不过这部分关于狗狗的描写真的是比较到位，慢慢建立羁绊，并因为狗狗结识了女朋友，过上了幸福快乐的生活。这部分比较偏日常，不过狗狗的作用还是不可忽视的。</p>
<p>直到赢得至关重要的橄榄球决赛之后，伊森成功获得了密歇根大学的全额奖学金。这场比赛爸爸也前来观看了，并在赛后向他“表示祝贺”，只不过说话的语气有些阴阳怪气，与其说是祝贺，不如说是酸溜溜的表达内心的嫉妒。而男主的表现很正常，并不是其他人所说的嫌弃他的酒鬼老爸。而后面男主揍陶德这一部分我觉得也很正常，面对一而再再而三的挑衅，男主选择了反击，只不过对于这种垃圾人最妥当的办法还是不理会，直接离开。不过男主的行为也没有什么过错，至于又拿嫌弃爸爸来说事的，这里嫌弃男主爸爸的是陶德，并不是伊森，而自己爸爸是酒鬼这件事本来就不是什么很光荣应该让所有人都知道的事情，因此说嫌弃爸爸还是有点太过了。</p>
<p>没想到陶德这家伙为了报复半夜来丢烟花到伊森家，烟花烧到了地毯最后点燃了整个家，此时贝利出场叫醒了伊森，伊森又叫醒了妈妈，但是最后火势已经太凶了，他们只能从窗户逃脱。妈妈和狗狗被救了下来，但是伊森却被困在了房子里，最后只好跳下来，却摔断了腿。这个地方我想吐槽的是房子外面不是有很多人么，为什么没人去接住他或者搭把手……这个摔断腿真的感觉是强行的剧情需要了。</p>
<p>我一开始还以为这个腿伤并不严重，应该只要好好养伤还是可以恢复到原来的水平的，没想到这个伤直接葬送了他的职业生涯，他只得去家附近的农业大学就读，继承农场。而在养伤的时候他和他女朋友提出了分手，当时我对这个地方的理解是他和她一起上大学的梦想破灭了，而他觉得现在这样会拖累她，于是为了她好就选择了分手。这个从是他之后的想念推测的，但是没想到最后一部分居然说是因为当时受到的打击太大太颓废才分手的……这个其实也可以理解，毕竟密歇根大学和农业大学的差别还不是一般的大，更关键的是职业生涯的葬送，这是未来被毁灭，从一个可能成为体育明星的未来到只能做一个农场主的未来的落差确实十分巨大，不过这样总感觉有些奇怪……最遗憾的是女主就这样离开了，不过生活其实就是这样的，很多时候冲动会造成终生的遗憾，其实男主并不是真的不爱女主了，只是一是冲动。</p>
<p>之后男主去上大学的时候就上演了一幕感人了狗狗万里追车情节，这部分拍得还是很赞的。但是从这之后狗狗就开始快速衰老起来了，再也没有精力四处跑动，甚至连吃饭都没有力气，在去世之前，他也终于见到了伊森。</p>
<p>第三次转世他是成为了一条警犬，不过连性别都转换了 233。这里的篇幅没有前面的多，不过对这短暂的一生的刻画是本片中争议最少的一部分。这一生的使命就和上一生的完全不同了，每天不再是无忧无虑地玩耍了，而要去做警犬应该做的事情。而在这方面，她把她的使命履行得很好。</p>
<p>除此之外，在晚上她也表现出了她的善解人意，她看出了主人内心的痛苦，她在用自己的方式给予主人慰藉，而主人也逐渐接收到了，对她的感情也越来越深厚。而好景不长，在一次追捕坏人的任务中，当她成功救起了被推下水库的女孩之后，她又冲了出来阻止了坏人的射击，却被子弹击中，不幸身亡。</p>
<p>这一生虽然短暂，但使命感却十足，她也很好完成了自己的使命。</p>
<p>接着第四次转世成为了一只柯基，被一个宅女所收养。而正是通过他对另一只狗的喜爱，促使了一段姻缘。这部分狗与主人的默契非常让人印象深刻。比较虐心的是他所爱先一步离他去，而她一直以来活着的意义就是为了保护她。失去了所爱的他也在之后离去了。</p>
<p>而第五次转世就没那么好了，他被一个嬉皮士女士收留，而她老公不让狗狗进家，于是他每天都被锁在了院子里，直到女生再也养不了，他被抛弃。但是抛弃对他来说或许是一件更好的事情，他不仅获得了自由，也远离了令狗难受的城镇。机缘巧合之下，他又闻到了汉娜的味道，他又回到了伊森的身边，但此时的伊森年龄已经不年轻了。因为他已不再是贝利的样子，因此伊森一开始也不是很愿意收留他，但命运使然，伊森还是收留了他。</p>
<p>而机智的贝利又根据之前闻到的气味——汉娜女儿的气味，找到了汉娜。就这样多年之后两人重新相逢，此时汉娜丈夫已经去世，伊森没有让遗憾继续下去，在单身这么多年之后伊森终于又挽回了爱情，终止了遗憾～虽然这里很圆满，不过还是得为伊森感到遗憾……</p>
<p>之后贝利又在仓库里找到了那个充满回忆的球，并且用那个熟悉的接球姿势让伊森知道 Boss Dog 又回来了～这部分真的让人看得十分激动啊～</p>
<p>本来看到前面我就以为伊森这部分已经结束了，没想到最后居然是以这样的方式来给他们的故事画上了一个句号。我想最后伊森一定想说：“终于等到你，还好我没放弃。”。虽然有些刻意，不过结局还是让人感到温暖的，就像整部电影的旋律一样。</p>
<p>狗的使命是什么呢？这或许不重要，只要自己快乐，身边人快乐就好。</p>
<h2 id="评分"><a href="#评分" class="headerlink" title="评分"></a>评分</h2><p>8/10.</p>
<p>这部电影剧情还是不错的，不过有一些地方感觉有一些刻意。但是转世这个设定让人眼前一亮，特别是兜兜转转之后又回到了伊森的身边这里还是很让人惊喜的。总体还是一步让人感动并且欢乐的影片，在考试周也给予了我一些慰藉～还是值得推荐的～</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[《神奇女侠》]]></title>
      <url>https://blog.patrickcty.cc/2017/06/28/%E3%80%8A%E7%A5%9E%E5%A5%87%E5%A5%B3%E4%BE%A0%E3%80%8B/</url>
      <content type="html"><![CDATA[<h1 id="《神奇女侠》"><a href="#《神奇女侠》" class="headerlink" title="《神奇女侠》"></a>《神奇女侠》</h1><h2 id="开始之前"><a href="#开始之前" class="headerlink" title="开始之前"></a>开始之前</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这部电影也是在很久之前看的，因为种种原因也一直没能写点什么。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;第一次看到这个角色是在前两年的《蝙蝠侠大战超人》，在他们打得最激烈的时候，神奇女侠及时出现阻止了他们的内战，当时看到这个角色就觉得眼前一亮～</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;神奇女侠的扮演者是盖尔加朵，而盖尔加朵的话也不是一个生面孔了，她所出演的速度与激情的 Gisele 也让人觉得十分有灵性，当她离开主角小分队的时候我真的觉得十分遗憾。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;再加上这部电影在网上也收获了不少好评，于是找到时间之后我就和女票一起在吃 CHIZZA 之后顺便看了～</p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这部 DC 的电影和漫威的《美国队长 1》在不少方面都有相似的地方。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;二者的故事都是发生在战争时期，神奇女侠是在一战，美国队长是在二战，二人都是从“初出茅庐”的迷茫到最后的认清自我有所作为。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;因为神奇女侠是在一个平静安详的地方长大，没见识过战争，也没见识过各种各样的人，再加上她听着神话长大，因此她以为只要能打败阿瑞斯就能拯救人类平息战争，但当她打败“阿瑞斯”——鲁登道夫的时候，她发现一切并没有任何改变，这时候的她陷入了无尽的迷茫。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;看到这里，我觉得剧情还是很优秀的。在这之前尽管她的同伴都认为她的目标比较不切实际，但他们都没有完全地否定她的观念，而是用他们自己的行动展示给她看，让她自己感受这个世界。但是当之后所有人都认为是虚构的阿瑞斯真正的出现的时候，剧情就突然就变得神了。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;也正是在与这个正牌的阿瑞斯战斗的过程中，她慢慢找到了自我，也打败了阿瑞斯，而在场的人们在亲眼目睹这场浩大的战斗后也丧失了战斗的欲望，这也算是“实现目标”了吧。然而此时一直保护着她不受这个世界的伤害并且教给她爱的那个男人却在她搞懂爱情之前已经永远的离开了……</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;整部电影情节的把控还是很好的，看的时候完全不会觉得描写背景的时候太过无趣，也不会觉得打斗空洞，莫名其妙，整体的观影感觉十分舒服，让人意犹未尽。其实开头是承接着之前的《蝙蝠侠大战超人》，那张照片也是蝙蝠侠派人送过来的，这不得不让人期待后续的正义联盟了，当他们再次相遇，又会有什么有趣的事情发生呢？这么多年过去了，神奇女侠究竟又有什么不同呢？真的非常让人期待啊。</p>
<h2 id="评分"><a href="#评分" class="headerlink" title="评分"></a>评分</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;8.5/10.</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;剧情流畅，人物塑造很到位，女侠也很漂亮～</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[《加勒比海盗 5：死无对证》]]></title>
      <url>https://blog.patrickcty.cc/2017/06/20/%E3%80%8A%E5%8A%A0%E5%8B%92%E6%AF%94%E6%B5%B7%E7%9B%975%EF%BC%9A%E6%AD%BB%E6%97%A0%E5%AF%B9%E8%AF%81%E3%80%8B/</url>
      <content type="html"><![CDATA[<h1 id="《加勒比海盗-5：死无对证》"><a href="#《加勒比海盗-5：死无对证》" class="headerlink" title="《加勒比海盗 5：死无对证》"></a>《加勒比海盗 5：死无对证》</h1><h2 id="开始之前"><a href="#开始之前" class="headerlink" title="开始之前"></a>开始之前</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这部电影在好久之前就看了，然而一直拖着没有开始写。距离上一部加勒比海盗已经过去六年了，前面的几部我都没有去电影院看，因此当新的一部上映，当我终于可以去大屏幕观看的时候，怎么能不去看？</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;因为过去了这么久，前面几部内容都不记得了，因此在结束之后我还特意去看了看木鱼水心的相应的视频来回顾了一下。看的时候感觉这一部和前面几部关系并不大，但是因为一些地方忘记了，所以在看到有些地方的时候就有些不能理解了，不过现在回顾了之前的剧情，前面的疑惑就得到了解答。</p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这次的反派是杰克船长在他的成名之战中打败的萨拉查船长，萨拉查曾经是西班牙海军的神奇船长，以歼灭所有海军为目标。就当他以为击败了最后的海盗的时候却被初出茅庐的杰克使用了一个乾坤大飘逸引诱到了死亡三角区去了，受到了诅咒的他们被困在了其中，只有当杰克放弃了他的罗盘他们才能重见天日，因为罗盘的特性是当它的持有者抛弃掉它的时候，他最大的威胁就会被释放出来。在这段回忆中出现的年轻时候的杰克船长是用 CG 做出来的，效果十分逼真，连我的女票都发出了“他怎么能演这么久”的惊叹 233。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;而这次的主线是亨利为了救回他那因为诅咒被困在飞翔的荷兰人号的威尔特纳而出海寻找海神三叉戟。而此时的杰克船长呢，却待在一个小岛上，进行了一场可笑几乎分文未得到的抢劫。因为没有好船，没有收入，再加上经历了许多失败的冒险，他的船员也对他有些失望了。杰克那出名的黑珍珠号因为受到了黑胡子的诅咒，被禁锢在玻璃瓶里面，杰克仅有一条不知道能不能下海的小破船。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;杰克落魄到了什么程度呢？船员全都离开了他，海军四处追杀他，而他的赏金也在几次修改后逐渐降低，甚至他穷到了要用他的神奇的罗盘来换取酒喝。这个罗盘是他成名战胜利之前所得到，也陪伴着他经过了一次次的冒险，无数次带他去到了他最渴望的目标。但是在这里他放弃了它，一个没有船，没有船员的船长还叫什么船长呢？</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;但是放弃罗盘是一件严重的事，这就意味着萨拉查再度取得自由，而这次的萨拉查有了诅咒的加成，再次成为了海上无敌的存在，而他的目的是直取杰克的人头，以报多年前的一箭之仇。在买酒之后，杰克被海军抓入监狱，不过在行刑时的一片混乱中，主角终于聚到了一起。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在这里不得不提一提在小岛上发生的抢劫银行和刑场救人的事件，首先我要吐槽一下杰克究竟是怎么进到保险箱里面去的，而且行长的妻子也进到里面去了……总感觉惊天魔盗团悄悄来到了小岛 233。总之这个抢银行的过程很有海盗气息，他们也是选择直接抢走保险柜，这让我联想起了速度与激情的那一幕。然而因为墙壁太结实，他们抢走的不仅仅是保险柜，更是直接把整个银行拖着走了。看着到处鸡飞狗跳的情况，无论是戏里戏外都是十分欢乐的，当然最喜闻乐见的是到了最后保险柜里只剩下了一枚金币——都在沿路上撒光了。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;而刑场救人这一次呢，也十分有海盗特色，首先就是杰克和天文学家卡琳娜分别在断头台和绞刑架的嘴炮，特别是杰克的油嘴滑舌真的非常有杰克特色。当然也不能让他们白白打这么久的嘴炮，在准备行刑的时候，杰克的船员出现了，炸毁了断头台，留下杰克一直与断头台的刀子进行生命的旋转——这个地方真的十分搞笑又让人捏了一把汗，不过最后自然是杰克安全着地。而主角众人也终于凑齐，为了共同的目标海神三叉戟来开始航海。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;杰克这里先放一边，本部电影的亮点所在是巴博萨船长，在杰克遭遇到萨拉查之前，巴博萨先碰上了他和他的鬼船。尽管在萨拉查自由之前，干掉了黑胡子的巴博萨是海上最强的海盗，但是遇到了杀人不眨眼而且海上无敌手并拥有不死之身的萨拉查和他的船员，巴博萨选择了先示好认怂，带领萨拉查找到他的仇人杰克。这无疑是在刀尖上舔血，但是巴博萨奸诈归奸诈，却并不是胆小怕事之辈。他成功在日出之前找到了杰克，保住了他和不少船员的性命。之后当他们上岸追赶杰克的时候他又反水去寻找三叉戟准备向萨拉查发起挑战，从这些看来巴博萨真的是当之无愧的海上枭雄。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在巴博萨夺得的黑胡子的剑的助攻下，黑珍珠号再次出山，而没想到的是一直在找爸爸的卡特琳娜的爸爸居然正是巴博萨，巴博萨原来是因为自己给不了孩子幸福才“抛弃了她”，只留下了一本带有红宝石的笔记本来让她能过得好一些。虽然这出发点是好的，但是抛弃这事怎么说都是不对的。最后果不其然当大海将要闭合，一行拼命逃向船的危急时刻，巴博萨为了救刚刚相认女儿带着萨拉查一起进入海洋中了……</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;巴博萨和杰克相爱相杀，从开始的完全的敌人，到后来再次复活之后的惺惺相惜，亦敌亦友，到现在又再次死去。我想少了巴博萨的海上，杰克可能也会觉得没那么精彩了吧。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;中间的剧情没什么好说的，不过看得还是挺爽的，最后因为三叉戟被打破，海上的诅咒都被消除，特纳也终于可以从荷兰人号回到岸上和爱人相遇，特纳和亨利他们父子两对恩爱的夫妇在夕阳的土坡上撒狗粮之时，杰克已经先一步出航成功地躲开了双重暴击 233。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这部电影的话，杰克依然是绝对的男主，亨利的话感觉主要作用就是推动剧情的发展……</p>
<h2 id="评分"><a href="#评分" class="headerlink" title="评分"></a>评分</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;8/10.</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这是一部很有情怀的作品，剧情和前面关联得比较紧密，没有看前面的话虽然不影响观看，但是一些细节的地方就没有看过之后有感触了。不过在情怀的同时故事也讲得不错，整部电影看得非常爽快，连没看过这系列的女票都觉得很过瘾。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;比较遗憾的地方就是巴博萨领便当的这个情节比较套路，还有就是杰克什么时候才能找到女朋友啊 233，期待下一部，希望不要再等这么多年了……</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[嵌入式复习——第一章]]></title>
      <url>https://blog.patrickcty.cc/2017/06/19/%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%A4%8D%E4%B9%A0%E2%80%94%E2%80%94%E7%AC%AC%E4%B8%80%E7%AB%A0/</url>
      <content type="html"><![CDATA[<h1 id="嵌入式复习——第一章"><a href="#嵌入式复习——第一章" class="headerlink" title="嵌入式复习——第一章"></a>嵌入式复习——第一章</h1><h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><h2 id="嵌入式操作系统分类"><a href="#嵌入式操作系统分类" class="headerlink" title="嵌入式操作系统分类"></a>嵌入式操作系统分类</h2><h3 id="按收费模式划分"><a href="#按收费模式划分" class="headerlink" title="按收费模式划分"></a>按收费模式划分</h3><ul>
<li>商用型：VxWorks, Nucleux, PlamOS, Symbian, WinCE, QNX, pSOS, VRTX, Lynx OS, Hopen, Delta OS</li>
<li>免费型：Linux, μCLinux 等</li>
</ul>
<h3 id="按实时性划分"><a href="#按实时性划分" class="headerlink" title="按实时性划分"></a>按实时性划分</h3><ul>
<li>硬实时：VxWorks</li>
<li>软实时：WinCE, RTLinux</li>
<li>无实时：Embedded Linux</li>
</ul>
<h2 id="实时性概念"><a href="#实时性概念" class="headerlink" title="实时性概念"></a>实时性概念</h2><p>实时性的本质是任务处理花费时间的可预测性，即任务需要在规定的时限内完成。</p>
<p>软实时意味着如果没有满足制定的时间约束不会导致灾难性的后果，而对于影视是系统来说却是灾难性的</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[《Linux/Unix 使用》复习（二）]]></title>
      <url>https://blog.patrickcty.cc/2017/06/19/linux%E5%A4%8D%E4%B9%A02/</url>
      <content type="html"><![CDATA[<h1 id="《Linux-Unix-使用》复习（二）"><a href="#《Linux-Unix-使用》复习（二）" class="headerlink" title="《Linux/Unix 使用》复习（二）"></a>《Linux/Unix 使用》复习（二）</h1><h1 id="安装和卸载"><a href="#安装和卸载" class="headerlink" title="安装和卸载"></a>安装和卸载</h1><h2 id="硬盘的磁道与扇区"><a href="#硬盘的磁道与扇区" class="headerlink" title="硬盘的磁道与扇区"></a>硬盘的磁道与扇区</h2><ul>
<li>磁道：磁碟的每一面划分的大小不同的同心圆</li>
<li>柱面：全部磁碟面上有相同半径的磁道，也就是说每个磁碟的相同地方的磁道连起来就形成了柱面</li>
<li>扇区：磁道划成的若干小弧段</li>
<li>磁头：每个磁碟有两面对应两个磁头</li>
</ul>
<blockquote>
<p>访问一个具体的扇区需要的物理参数是 （柱面号/磁道号，磁头号，扇区号）</p>
<p>硬盘总容量 = 柱面数 × 磁头数 × 每个磁道的扇区数 × 512 KB</p>
</blockquote>
<h2 id="硬盘的分区"><a href="#硬盘的分区" class="headerlink" title="硬盘的分区"></a>硬盘的分区</h2><blockquote>
<p>柱面是分区的边界，即一个分区包含整数个连续编号的柱面</p>
</blockquote>
<h3 id="MBR-的分区"><a href="#MBR-的分区" class="headerlink" title="MBR 的分区"></a>MBR 的分区</h3><p>（0 柱面，0 磁头，1 扇区）是硬盘的主引导分区，里面存放了：</p>
<ul>
<li>硬盘的主引导程序</li>
<li>四个分区表记录</li>
<li>硬盘有效标志</li>
</ul>
<p>分区记录表里面用来存放分区的信息，且存放的一定是主分区，否则则是逻辑分区。</p>
<h4 id="主分区"><a href="#主分区" class="headerlink" title="主分区"></a>主分区</h4><p>也可称为“引导分区”，会被操作系统和主板认定为这个硬盘的第一个分区。其中的主引导程序是它的一部分，此段程序主要用于检测硬盘分区的正确性，并确定活动分区。</p>
<p>总之主分区和操作系统是密切相关的。</p>
<h4 id="扩展分区"><a href="#扩展分区" class="headerlink" title="扩展分区"></a>扩展分区</h4><p>也要占用分区表记录，用来创建逻辑分区。一个扩展分区对应着多个逻辑分区。</p>
<h4 id="逻辑分区"><a href="#逻辑分区" class="headerlink" title="逻辑分区"></a>逻辑分区</h4><p>仅仅只是存储介质，和操作系统以及主分区无关，作用类似于 U 盘。</p>
<h3 id="Linux-分区方法"><a href="#Linux-分区方法" class="headerlink" title="Linux 分区方法"></a>Linux 分区方法</h3><ul>
<li>创建根分区（主分区），挂载 / 目录</li>
<li>交换分区（主分区，可选），大小为物理内存两倍，但最大不超过 4GB</li>
</ul>
<h3 id="GPT-的分区"><a href="#GPT-的分区" class="headerlink" title="GPT 的分区"></a>GPT 的分区</h3><p>GPT 支持分区数可达 128 个，只有支持 UEFI 的主板才能从 GPT 分区硬盘启动操作系统。</p>
<h3 id="分区命名"><a href="#分区命名" class="headerlink" title="分区命名"></a>分区命名</h3><blockquote>
<p>/dev/设备代号和设备代号数（如果不包含代号数则是整块硬盘）</p>
</blockquote>
<p>例如 /dev/sdb5</p>
<ul>
<li>sdb 表示第二块硬盘</li>
<li>5 表示第五个分区，在这里是逻辑分区</li>
</ul>
<p>其中光盘命名为 /dev/cdrom<br>IDE 硬盘为 /dev/hd[a~z][1~16]</p>
<h2 id="卸载-Linux"><a href="#卸载-Linux" class="headerlink" title="卸载 Linux"></a>卸载 Linux</h2><p>所谓卸载，就是在分区表中删除掉 Linux 的分区并且修改主引导程序</p>
<p>删除分区方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo fdisk /dev/sda  # 假如要删除第一块硬盘的分区，然后再在里面进行相应的操作</div></pre></td></tr></table></figure></p>
<h2 id="初步管理"><a href="#初步管理" class="headerlink" title="初步管理"></a>初步管理</h2><pre><code>pass，如果习题里面出现再看
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[《Linux/Unix 使用》复习（一）]]></title>
      <url>https://blog.patrickcty.cc/2017/06/19/linux%E5%A4%8D%E4%B9%A01/</url>
      <content type="html"><![CDATA[<h1 id="《Linux-Unix-使用》复习（一）"><a href="#《Linux-Unix-使用》复习（一）" class="headerlink" title="《Linux/Unix 使用》复习（一）"></a>《Linux/Unix 使用》复习（一）</h1><h1 id="Linux-系统概况"><a href="#Linux-系统概况" class="headerlink" title="Linux 系统概况"></a>Linux 系统概况</h1><h2 id="内核版本"><a href="#内核版本" class="headerlink" title="内核版本"></a>内核版本</h2><blockquote>
<p>major.minor.patch-build.desc</p>
</blockquote>
<ul>
<li>major 主版本号</li>
<li>minor 次版本号——新增明显功能时递增<ul>
<li>奇数：开发板</li>
<li>偶数：稳定版</li>
</ul>
</li>
<li>patch 对 minor 的修订次数——修订或打补丁时递增</li>
<li>build 编译次数——对少量代码优化或者修改并重新编译则递增</li>
<li>desc 当前版本特殊信息——用英文单词或缩写表示，例如 generic 表示通用内核</li>
</ul>
<h2 id="开源协议"><a href="#开源协议" class="headerlink" title="开源协议"></a>开源协议</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">cond1=&gt;condition: 他人修改源代码</div><div class="line">是否可以闭源？</div><div class="line">cond2=&gt;condition: 新增源代码</div><div class="line">是否采用</div><div class="line">同样许可证？</div><div class="line">cond3=&gt;condition: 每一个修改过的</div><div class="line">文件是否都</div><div class="line">必须放入版权声明？</div><div class="line">cond4=&gt;condition: 是否需要对</div><div class="line">源代码的修改</div><div class="line">之处提供说明文档？</div><div class="line">cond5=&gt;condition: 衍生软件</div><div class="line">是否可以用</div><div class="line">你的名字促销？</div><div class="line">op1=&gt;operation: LGPL</div><div class="line">op2=&gt;operation: Mozilla</div><div class="line">op3=&gt;operation: GPL</div><div class="line">op4=&gt;operation: BSD</div><div class="line">op5=&gt;operation: MIT</div><div class="line">op6=&gt;operation: Apache</div><div class="line">e=&gt;end</div><div class="line"></div><div class="line">cond1</div><div class="line">cond1(yes)-&gt;cond3</div><div class="line">cond1(no)-&gt;cond2</div><div class="line">cond2(yes)-&gt;op3</div><div class="line">cond2(no)-&gt;cond4</div><div class="line">cond3(yes)-&gt;op6</div><div class="line">cond3(no)-&gt;cond5</div><div class="line">cond4(yes)-&gt;op2</div><div class="line">cond4(no)-&gt;op1</div><div class="line">cond5(yes)-&gt;op5</div><div class="line">cond5(no)-&gt;op4</div></pre></td></tr></table></figure>
<p><a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#7-流程图" target="_blank" rel="external">流程图</a>是按照这个的语法来写的，如果无法渲染就用 CMD MarkDown 来看。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ArduinoLearn2]]></title>
      <url>https://blog.patrickcty.cc/2017/06/17/ArduinoLearn2/</url>
      <content type="html"><![CDATA[<h1 id="Arduino-学习（二）：-高级输入输出"><a href="#Arduino-学习（二）：-高级输入输出" class="headerlink" title="Arduino 学习（二）： 高级输入输出"></a>Arduino 学习（二）： 高级输入输出</h1><h2 id="传感器型开关"><a href="#传感器型开关" class="headerlink" title="传感器型开关"></a>传感器型开关</h2><p>上一次的学习中使用的是瞬时按键来控制开关，其实瞬时按键只是传感器型开关的一种，它能检测它是否被按下。而类似的传感器型开关还有：</p>
<ul>
<li>拨动开关：类似于灯的开关</li>
<li>温控器：根据温度来调节</li>
<li>磁力开关：两个小金属片，靠近磁场的时候会吸在一起</li>
<li>压力开关：压力达到一定程度就会检测到</li>
<li>倾斜开关：由一些触点和小球构成，倾斜小球会离开触点</li>
<li>PIR 传感器：检测人是否在范围内移动</li>
</ul>
<h2 id="灯光逐渐点亮熄灭"><a href="#灯光逐渐点亮熄灭" class="headerlink" title="灯光逐渐点亮熄灭"></a>灯光逐渐点亮熄灭</h2><p>在之前控制亮灭的时候中间要有一定时间的延时，因为间隔太小的话人眼是无法捕捉相应的变化的。而间隔太小的时候虽然无法看出闪烁，但是能感觉到亮度比一直亮着的时候要暗，这种通过改变脉冲宽度来改变亮度的技术叫做脉宽调制，或 PWN。</p>
<p>而在 Arduino 中为了避免代码的长度给调节亮度造成的影响于是有了 analogWrite() 函数。</p>
<p>下面便是逐渐点亮和熄灭 LED 灯的代码，电路则只用把 LED 灯一边接在 9 端口，一边接在 GND，当然保护电阻也是不可少的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">const int LED = 9;</div><div class="line">int i = 0;</div><div class="line"></div><div class="line">void setup() &#123;</div><div class="line">    pinMode(LED, OUTPUT);</div><div class="line">&#125;</div><div class="line"></div><div class="line">void loop() &#123;</div><div class="line">    for (; i &lt; 255; ++i) &#123;</div><div class="line">        analogWrite(LED, i);</div><div class="line">        delay(10);  // 延时，否则看不到变化</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    for (; i &gt; 0; --i) &#123;</div><div class="line">        analogWrite(LED, i);</div><div class="line">        delay(10);  // 延时，否则看不到变化</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>analogWrite(引脚号, 亮度)<br>-&gt; 这里亮度是从 0~255，0 是全灭，255 是全亮，引脚号只能为3、5、6、9、10、11，因为这个功能需要硬件的支持。</p>
</blockquote>
<h2 id="通过按钮控制灯管亮度"><a href="#通过按钮控制灯管亮度" class="headerlink" title="通过按钮控制灯管亮度"></a>通过按钮控制灯管亮度</h2><p>如果想通过瞬时开关来进行亮度调节，则需要捕捉按下按键时间了，在下面的代码里面，按开关则改变灯的状态，而长按则调整亮度，亮度达到顶峰就变为零。</p>
<p>电路图为上面的电路图和上一次电路图的结合。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">const int LED = 9;</div><div class="line">const int BUTTON = 7;</div><div class="line"></div><div class="line">int val = 0;</div><div class="line">int old_val = 0;</div><div class="line">int state = 0;</div><div class="line">int brightness = 128;</div><div class="line">unsigned long startTime = 0;</div><div class="line"></div><div class="line">void setup() &#123;</div><div class="line">    pinMode(LED, OUTPUT);</div><div class="line">    pinMode(BUTTON, INPUT);</div><div class="line">&#125;</div><div class="line"></div><div class="line">void loop() &#123;</div><div class="line">    val = digitalRead(BUTTON);</div><div class="line"></div><div class="line">    if (val == HIGH &amp;&amp; old_val == LOW) &#123;  // 按下按钮则改变状态</div><div class="line">        state = 1 - state;</div><div class="line">        startTime = millis();  // millis 返回距离上次重置所用的毫秒数</div><div class="line">        delay(10);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    if (val == HIGH &amp;&amp; old_val == HIGH) &#123;  // 长按则调节亮度</div><div class="line">        if (state == 1 &amp;&amp; (millis() - startTime) &gt; 500) &#123;</div><div class="line">            brightness++;</div><div class="line">            delay(10);</div><div class="line"></div><div class="line">            if (brightness &gt; 255) &#123;</div><div class="line">                brightness = 0;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    old_val = val;</div><div class="line"></div><div class="line">    if (state == 1) &#123;</div><div class="line">        analogWrite(LED, brightness);</div><div class="line">    &#125;</div><div class="line">    else &#123;</div><div class="line">        analogWrite(LED, 0);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>millis()<br>-&gt; 获取距离上次重置所用的毫秒数，这里用来测量按下的时间</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[嵌入式复习——第二章]]></title>
      <url>https://blog.patrickcty.cc/2017/06/15/%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%A4%8D%E4%B9%A0%E2%80%94%E2%80%94%E7%AC%AC%E4%BA%8C%E7%AB%A0/</url>
      <content type="html"><![CDATA[<h1 id="嵌入式复习——第二章"><a href="#嵌入式复习——第二章" class="headerlink" title="嵌入式复习——第二章"></a>嵌入式复习——第二章</h1><h2 id="Linux-基础命令"><a href="#Linux-基础命令" class="headerlink" title="Linux 基础命令"></a>Linux 基础命令</h2><blockquote>
<p>useradd [选项] 用户名</p>
</blockquote>
<ul>
<li>创建用户</li>
<li>需要 root 权限</li>
</ul>
<blockquote>
<p>passwd [用户名]</p>
</blockquote>
<ul>
<li>修改密码</li>
<li>需要 root 权限</li>
</ul>
<blockquote>
<p>ps [选项]</p>
</blockquote>
<ul>
<li>查看进程</li>
<li>选项：<ul>
<li>-ef 查看所有进程的信息</li>
</ul>
</li>
</ul>
<blockquote>
<p>kill [选项] PID</p>
</blockquote>
<ul>
<li>杀死进程</li>
</ul>
<blockquote>
<p>fdisk [-l]</p>
</blockquote>
<ul>
<li>查看磁盘分区</li>
<li>需要 root 权限</li>
</ul>
<blockquote>
<p>mount [选项] [类型] 设备名 挂载目录</p>
</blockquote>
<ul>
<li>挂载磁盘</li>
<li>需要 root 权限</li>
<li>设备名可以通过 fdisk 查看</li>
<li>例<code>sudo mount /dev/sdb3 disk</code> 是将 /dev/sdb3 设备挂载到 ~/disk 目录上</li>
</ul>
<blockquote>
<p>umount 挂载目录</p>
</blockquote>
<ul>
<li>卸载磁盘</li>
<li>需要 root 权限</li>
</ul>
<blockquote>
<p>mkdir [选项] 路径</p>
</blockquote>
<ul>
<li>创建目录</li>
<li>选项<ul>
<li>-m 设置权限，用法类似于 chmod</li>
<li>-p 可以是一个路径名称，不存在的目录会自动创建</li>
</ul>
</li>
</ul>
<blockquote>
<p>cat [选项] 文件 1  文件 2 ……</p>
</blockquote>
<ul>
<li>查看文件，多个文件就合并在一起查看</li>
<li>选项<ul>
<li>-n 显示行号</li>
<li>-b 显示非空白行行号</li>
</ul>
</li>
</ul>
<blockquote>
<p>cp [选项] 源目录 目的目录</p>
</blockquote>
<ul>
<li>复制文件</li>
<li>选项<ul>
<li>-a 保留所有内容</li>
</ul>
</li>
</ul>
<blockquote>
<p>mv [选项] 源目录 目的目录</p>
</blockquote>
<ul>
<li>移动文件</li>
<li>选项<ul>
<li>-i 有覆盖就询问</li>
</ul>
</li>
</ul>
<blockquote>
<p>rm [选项] 文件目录名</p>
</blockquote>
<ul>
<li>删除文件或目录</li>
<li>选项<ul>
<li>-i 交互式删除，安全</li>
<li>-r 递归删除目录子目录</li>
<li>-f 忽略不存在的文件不给出提示</li>
</ul>
</li>
</ul>
<blockquote>
<p>chmod [选项] 符号权限 文件<br>或者 chmod [选项] 八进制权限 文件</p>
</blockquote>
<ul>
<li>设置权限</li>
<li>第一种方法<ul>
<li>a/u/g 表示对所有用户，所有者，用户组操作权限</li>
<li>+/-/= 表示添加删除设置权限</li>
<li>r/w/x 表示读写执行权限</li>
<li>例 <code>chmod +x a.py</code> 把该文件给当前用户增加执行权限</li>
</ul>
</li>
<li>第二种方法<ul>
<li>三个数是八进制数，八进制展开为三个二进制位分别表示表示读写执行，例如 5 就是 101 也就是只读和执行</li>
<li>例 <code>chmod 666 disk</code> 给 disk 目录对于所有用户、群组、所有者增加读写权限</li>
</ul>
</li>
<li>选项<ul>
<li>-R 递归操作，可以给文件夹的所有文件来修改权限 </li>
</ul>
</li>
</ul>
<h2 id="小练习"><a href="#小练习" class="headerlink" title="小练习"></a>小练习</h2><blockquote>
<p>在 Ubuntu home 目录创建两个文件夹 con1 与 con2，挂在 U 盘到 con1 中，把 con1 中的文件复制到 con2 中，并把 con2 中所有文件改为可读可写</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> ~</div><div class="line">mkdir con1 con2</div><div class="line">sudo fdisk <span class="_">-l</span>  <span class="comment"># 查看 U 盘设备名</span></div><div class="line">mount /dev/sdb1 con1</div><div class="line">cp <span class="_">-a</span> con con2</div><div class="line">chmod -R 666 con2  <span class="comment"># R 是递归操作，对里面的所有文件夹</span></div></pre></td></tr></table></figure>
<h2 id="C-编程基础"><a href="#C-编程基础" class="headerlink" title="C 编程基础"></a>C 编程基础</h2><h3 id="gcc-的编译流程"><a href="#gcc-的编译流程" class="headerlink" title="gcc 的编译流程"></a>gcc 的编译流程</h3><ul>
<li>预处理，处理头文件、宏，产生 .i 文件</li>
<li>编译，产生 .s 文件</li>
<li>汇编，产生 .o 文件</li>
<li>链接，产生可执行文件</li>
</ul>
<h3 id="makefile"><a href="#makefile" class="headerlink" title="makefile"></a>makefile</h3><p>规则<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">目标: 依赖</div><div class="line">    命令</div></pre></td></tr></table></figure></p>
<p>平凡的样例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">david: kang.o yul.o</div><div class="line">    gcc kang.o bar.o -o myprog</div><div class="line">kang.o: kang.c kang.h head.h</div><div class="line">    gcc -Wall -O -g -c kang.c -o kang.o</div><div class="line">yul.o: bar.c head.h</div><div class="line">    gcc -Wall -O -g -c yul.c -o yul.o</div><div class="line">    </div><div class="line">clean:</div><div class="line">    rm -f myprog</div></pre></td></tr></table></figure></p>
<p>其中从上到下是和编译的顺序相反，也就是一层层向内调用获得依赖</p>
<p>带有变量的样例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">OBJS = kang.o yul.o</div><div class="line">CC = gcc</div><div class="line">CFLAGS = -Wall -O -g</div><div class="line">david: $(OBJS)</div><div class="line">    $(CC) $(OBJS) -o myprog</div><div class="line">kang.o: kang.c kang.h head.h</div><div class="line">    $(CC) $(CFLAGS) -c kang.c -o kang.o</div><div class="line">yul.o: bar.c head.h</div><div class="line">    $(CC) $(CFLAGS) -c yul.c -o yul.o</div><div class="line">    </div><div class="line">clean:</div><div class="line">    rm -f myprog</div></pre></td></tr></table></figure></p>
<p>其中变量是 $(变量名) 的形式来使用的</p>
<h2 id="小练习-1"><a href="#小练习-1" class="headerlink" title="小练习"></a>小练习</h2><blockquote>
<p>在 home 目录下使用 vi 创建 sum.c 文件，比阿尼额代码，实现数字 1 累加到 100 的程序<br>（1）使用 gcc 编译器编译，生成目标文件 sum_gcc 并执行<br>（2）编写 makefile 文件，编译 sum.c 文件生成目标文件 sum_makefile 并执行</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">vi sum.c </div><div class="line">gcc -o sum.c sum_gcc</div><div class="line">./sum_gcc</div><div class="line"></div><div class="line">vi makefile</div></pre></td></tr></table></figure>
<p>makefile<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">sum: sum.o</div><div class="line">    gcc sum.o -o sum</div><div class="line">sum.o: sum.c</div><div class="line">    gcc -c sum.c -o sum.o</div><div class="line"></div><div class="line">clean:</div><div class="line">    rm -f sum</div></pre></td></tr></table></figure></p>
<h2 id="Bootloader"><a href="#Bootloader" class="headerlink" title="Bootloader"></a>Bootloader</h2><p>Bootloader 就是在操作系统的内核运行之前的一段程序，它类似于 PC 中的 BIOS 程序。通过这段程序，可以完成硬件设备的初始化，并建立内存空间的映射关系，从而将系统的软硬件环境带到一个合适的状态，为最终加载系统内核做好准备。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Arduino 学习（一）： 简单的 LED 程序]]></title>
      <url>https://blog.patrickcty.cc/2017/06/15/ArduinoLearn1/</url>
      <content type="html"><![CDATA[<h1 id="Arduino-学习（一）：-简单的-LED-程序"><a href="#Arduino-学习（一）：-简单的-LED-程序" class="headerlink" title="Arduino 学习（一）： 简单的 LED 程序"></a>Arduino 学习（一）： 简单的 LED 程序</h1><h2 id="LED-闪烁"><a href="#LED-闪烁" class="headerlink" title="LED 闪烁"></a>LED 闪烁</h2><p>Arduino 的 LED 闪烁和其他语言开始的 Hello, world! 类似，是开始 Arduino 之旅的第一段程序。</p>
<h3 id="电路接法"><a href="#电路接法" class="headerlink" title="电路接法"></a>电路接法</h3><p>LED 长脚(+)接在 13 号引脚，短脚(-)接在 GND。</p>
<h3 id="LED-闪烁代码"><a href="#LED-闪烁代码" class="headerlink" title="LED 闪烁代码"></a>LED 闪烁代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">const int LED = 13;  // Arduino 默认板上的 LED 就是连接 13 端口 </div><div class="line"></div><div class="line">void setup() &#123;</div><div class="line">  // 初始化，只有在程序开始的时候会执行</div><div class="line">  pinMode(LED, OUTPUT);  // 设置引脚，并且引脚用来输出</div><div class="line">&#125;</div><div class="line"></div><div class="line">void loop() &#123;</div><div class="line">  // 重复执行的主程序</div><div class="line">  // digitalWrite 打开或关闭任何设置为输出的引脚</div><div class="line">  digitalWrite(LED, HIGH);  // 将电位置为高电位</div><div class="line">  delay(1000);  // 单位为 ms</div><div class="line">  digitalWrite(LED, LOW);</div><div class="line">  delay(1000);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在这里用到了三个函数</p>
<p>用来控制特定引脚输入输出情况</p>
<blockquote>
<p>pinMode(引脚号, 输入/输出) </p>
</blockquote>
<p>用来改变特定引脚的电位高低</p>
<blockquote>
<p>digitalWrite(引脚号, 高/低电位)</p>
</blockquote>
<p>用来延时</p>
<blockquote>
<p>delay(毫秒数)</p>
</blockquote>
<h2 id="按钮控制-LED"><a href="#按钮控制-LED" class="headerlink" title="按钮控制 LED"></a>按钮控制 LED</h2><p>光闪烁当然没意思，这次用一个按钮来控制 LED。</p>
<h3 id="电路接法-1"><a href="#电路接法-1" class="headerlink" title="电路接法"></a>电路接法</h3><ul>
<li>LED 同上</li>
<li>按钮一边接到 7 号引脚另一边是 GND</li>
</ul>
<h3 id="长按亮代码"><a href="#长按亮代码" class="headerlink" title="长按亮代码"></a>长按亮代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">const int LED = 13;  </div><div class="line">const int BUTTOM = 7;</div><div class="line">int val = 0;</div><div class="line"></div><div class="line">void setup() &#123;</div><div class="line">    pinMode(LED, OUTPUT); </div><div class="line">    pinMode(BUTTOM, INPUT);  // 按钮作为输入部分接在 7 号引脚</div><div class="line">&#125;</div><div class="line"></div><div class="line">void loop() &#123;</div><div class="line">    val = digitalRead(BUTTOM);  // 按钮被按下的时候为高，否则为低</div><div class="line"></div><div class="line">    if (val == HIGH) &#123;</div><div class="line">        digitalWrite(LED, HIGH);</div><div class="line">    &#125;</div><div class="line">    else &#123;</div><div class="line">        digitalWrite(LED, LOW);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里用到了一个新函数</p>
<p>查看特定引脚处的电位状态，返回值为 HIGH 或 LOW</p>
<blockquote>
<p>digitalRead(引脚号)</p>
</blockquote>
<p>注意由于开关默认情况是按下之后立刻弹起，所以如果只按一下是看不到灯的变化的，只有一直按着灯才会亮起来。而由于 Arduino 运行得很快（相对于人手），因此 val 是一直在被重新赋值的。</p>
<p>一直按着显然不符合常理，正常操作应该是按下时点亮，再按熄灭。</p>
<h3 id="按下时点亮，再按熄灭"><a href="#按下时点亮，再按熄灭" class="headerlink" title="按下时点亮，再按熄灭"></a>按下时点亮，再按熄灭</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">const int LED = 13;  </div><div class="line">const int BUTTOM = 7;</div><div class="line">int val = 0;</div><div class="line">int state = 0;</div><div class="line"></div><div class="line">void setup() &#123;</div><div class="line">    pinMode(LED, OUTPUT); </div><div class="line">    pinMode(BUTTOM, INPUT);  // 按钮作为输入部分接在 7 号引脚</div><div class="line">&#125;</div><div class="line"></div><div class="line">void loop() &#123;</div><div class="line">    val = digitalRead(BUTTOM);  // 按钮被按下的时候为高，否则为低</div><div class="line"></div><div class="line">    if (val == HIGH) &#123;</div><div class="line">        state = !state;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    if (state) &#123;</div><div class="line">        digitalWrite(LED, HIGH);</div><div class="line">    &#125;</div><div class="line">    else &#123;</div><div class="line">        digitalWrite(LED, LOW);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里增加了一个状态位 state，只有当 val 变为 HIGH 的时候才会改变原来的状态，也就是按下时点亮，再按熄灭。</p>
<p>但是这样又有点问题，那就是因为程序运行得太快，因此在我们按下去的“一瞬间”，对 Arduino 已经循环了好多次了，state 的值在多次变化，最终的 state 的值是无法确定的，因此程序要继续改进。</p>
<p>改进的方法就是只有当 val 为 HIGH 且 val 前一次的值为 LOW 的时候才对 state 进行改变。</p>
<h3 id="改进后的按下时点亮，再按熄灭"><a href="#改进后的按下时点亮，再按熄灭" class="headerlink" title="改进后的按下时点亮，再按熄灭"></a>改进后的按下时点亮，再按熄灭</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">const int LED = 13;  </div><div class="line">const int BUTTOM = 7;</div><div class="line">int val = 0;</div><div class="line">int old_val = 0;</div><div class="line">int state = 0;</div><div class="line"></div><div class="line">void setup() &#123;</div><div class="line">    pinMode(LED, OUTPUT); </div><div class="line">    pinMode(BUTTOM, INPUT);  // 按钮作为输入部分接在 7 号引脚</div><div class="line">&#125;</div><div class="line"></div><div class="line">void loop() &#123;</div><div class="line">    val = digitalRead(BUTTOM);  // 按钮被按下的时候为高，否则为低</div><div class="line"></div><div class="line">    if (val == HIGH &amp;&amp; old_val == LOW) &#123;</div><div class="line">        state = !state;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    old_val = val;</div><div class="line"></div><div class="line">    if (state) &#123;</div><div class="line">        digitalWrite(LED, HIGH);</div><div class="line">    &#125;</div><div class="line">    else &#123;</div><div class="line">        digitalWrite(LED, LOW);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样一来理论上就可以比较好地运行程序了，但是因为按键开关的机械特性，在按下的时候触点之间会发生弹跳，也就是开关在一定时间会在开和关之间抖动，虽然时间很短，但是对于 Arduino 来说完全可以检测到了，这时候就要进行“去抖”——也就是在改变状态之后延时一段时间，通常这里只需要 10~15ms。</p>
<h3 id="去抖后的按下时点亮，再按熄灭"><a href="#去抖后的按下时点亮，再按熄灭" class="headerlink" title="去抖后的按下时点亮，再按熄灭"></a>去抖后的按下时点亮，再按熄灭</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">const int LED = 13;  </div><div class="line">const int BUTTOM = 7;</div><div class="line">int val = 0;</div><div class="line">int old_val = 0;</div><div class="line">int state = 0;</div><div class="line"></div><div class="line">void setup() &#123;</div><div class="line">    pinMode(LED, OUTPUT); </div><div class="line">    pinMode(BUTTOM, INPUT);  // 按钮作为输入部分接在 7 号引脚</div><div class="line">&#125;</div><div class="line"></div><div class="line">void loop() &#123;</div><div class="line">    val = digitalRead(BUTTOM);  // 按钮被按下的时候为高，否则为低</div><div class="line"></div><div class="line">    if (val == HIGH &amp;&amp; old_val == LOW) &#123;</div><div class="line">        state = !state;</div><div class="line">        delay(10);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    if (val == LOW &amp;&amp; old_val == HIGH) </div><div class="line">        delay(10);</div><div class="line"></div><div class="line">    old_val = val;</div><div class="line"></div><div class="line">    if (state) &#123;</div><div class="line">        digitalWrite(LED, HIGH);</div><div class="line">    &#125;</div><div class="line">    else &#123;</div><div class="line">        digitalWrite(LED, LOW);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>到这里，LED 程序就结束了。</p>
<p>Arduino 还是很有趣的，不过对于我这种手残党可能就要走一些弯路了 orz。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[运行 Vue.js 蠢萌的 Markdown 编辑器的时候遇到的坑]]></title>
      <url>https://blog.patrickcty.cc/2017/05/28/%E8%BF%90%E8%A1%8CVue%E7%9A%84%E7%A4%BA%E4%BE%8B%E4%BB%A3%E7%A0%81%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/</url>
      <content type="html"><![CDATA[<h1 id="运行-Vue-js-蠢萌的-Markdown-编辑器的时候遇到的坑"><a href="#运行-Vue-js-蠢萌的-Markdown-编辑器的时候遇到的坑" class="headerlink" title="运行 Vue.js 蠢萌的 Markdown 编辑器的时候遇到的坑"></a>运行 Vue.js 蠢萌的 Markdown 编辑器的时候遇到的坑</h1><p>在基本看了 Vue 的介绍之后我就准备运行 Vue.js 蠢萌的 Markdown 编辑器来看看效果，没想到遇到了不少坑…</p>
<h2 id="Vue-的实例并没有初始化"><a href="#Vue-的实例并没有初始化" class="headerlink" title="Vue 的实例并没有初始化"></a>Vue 的实例并没有初始化</h2><p>浏览器里报错 <code>_ is not defined</code></p>
<p>我 Google 了很久但是一直不得要点，最后放弃的时候 Google 了一下 <code>_.debounce</code> 这个函数。</p>
<blockquote>
<p>_.debounce(func, [wait=0], [options])</p>
<p>创建一个防抖动函数。 该函数会在 wait 毫秒后调用 func 方法。 该函数提供一个 cancel 方法取消延迟的函数调用以及 flush 方法立即调用。 可以提供一个 options 对象决定如何调用 func 方法， options.leading 与|或 options.trailing 决定延迟前后如何触发。 func 会传入最后一次传入的参数给防抖动函数。 随后调用的防抖动函数返回是最后一次 func 调用的结果。</p>
</blockquote>
<p>原来 _ 并不是一个变量，这个函数是来自于 <code>underscore.js</code> 这个模块的，于是接下来就引入这个模块就好了。</p>
<h2 id="mark-模块也要引入"><a href="#mark-模块也要引入" class="headerlink" title="mark 模块也要引入"></a>mark 模块也要引入</h2><p>这里之所以能用这么少的代码就完成 MarkDown 编辑器是因为用了解析 MarkDown 的库，而这个库是来自 <code>marked.js</code> ，也就是说这个模块也需要引入。</p>
<h2 id="注意引入的顺序"><a href="#注意引入的顺序" class="headerlink" title="注意引入的顺序"></a>注意引入的顺序</h2><p>这里一共用到了四个 js 文件，其中</p>
<ul>
<li>vue.js 是最重要的 js，也是最先被渲染的，因此应该放在第一个引入</li>
<li>md.js 这里初始化了 Vue 的实例，但是因为它用到了 Underscore.js 因此必须在它之后渲染，于是把它放在最后</li>
<li>underscore.js 这里是 _.debounce 的来源，没有这个函数页面不能正常显示，因此它要在第二个引入</li>
<li><p>marked.js 这是解析 MarkDown 的模块，在 _.debounce 之后才会调用，放在第三个引入</p>
<p>正常运行的代码片段   </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;script src=&quot;https://unpkg.com/vue@2.3.3/dist/vue.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/marked/0.3.6/marked.min.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;script src=&quot;https://cdn.bootcss.com/underscore.js/1.8.3/underscore-min.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;script src=&quot;md.js&quot;&gt;&lt;/script&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="完整代码及分析"><a href="#完整代码及分析" class="headerlink" title="完整代码及分析"></a>完整代码及分析</h2><p>md.html</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">    &lt;head&gt;</div><div class="line">        &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class="line">        &lt;title&gt;Vue Markdown Editor&lt;/title&gt;</div><div class="line">        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;md.css&quot;&gt;</div><div class="line">    &lt;/head&gt;</div><div class="line">        </div><div class="line">    &lt;body&gt;</div><div class="line">        &lt;div id=&quot;editor&quot;&gt;</div><div class="line">            &lt;textarea :value=&quot;input&quot; @input=&quot;update&quot;&gt;&lt;/textarea&gt;</div><div class="line">            &lt;div v-html=&quot;compiledMarkdown&quot;&gt;&lt;/div&gt;</div><div class="line">        &lt;/div&gt;     </div><div class="line">    &lt;/body&gt;</div><div class="line"></div><div class="line">    &lt;script src=&quot;https://unpkg.com/vue@2.3.3/dist/vue.js&quot;&gt;&lt;/script&gt;</div><div class="line">    &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/marked/0.3.6/marked.min.js&quot;&gt;&lt;/script&gt;</div><div class="line">    &lt;script src=&quot;https://cdn.bootcss.com/underscore.js/1.8.3/underscore-min.js&quot;&gt;&lt;/script&gt;</div><div class="line">    &lt;script src=&quot;md.js&quot;&gt;&lt;/script&gt;</div><div class="line"></div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p>其中第十一行 textarea 是 Vue 中的文本区域组件，构成了编辑器的左半部分，里面的内容是由 input 中的值来指定的。而 @input 则监视了 textarea 的内容，有变化则调用 update 的内容。</p>
<p>md.css</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">html, body, #editor &#123;</div><div class="line">  margin: 0;</div><div class="line">  height: 100%;</div><div class="line">  font-family: &apos;Helvetica Neue&apos;, Arial, sans-serif;</div><div class="line">  color: #333;</div><div class="line">&#125;</div><div class="line"></div><div class="line">textarea, #editor div &#123;</div><div class="line">  display: inline-block;</div><div class="line">  width: 49%;</div><div class="line">  height: 100%;</div><div class="line">  vertical-align: top;</div><div class="line">  box-sizing: border-box;</div><div class="line">  padding: 0 20px;</div><div class="line">&#125;</div><div class="line"></div><div class="line">textarea &#123;</div><div class="line">  border: none;</div><div class="line">  border-right: 1px solid #ccc;</div><div class="line">  resize: none;</div><div class="line">  outline: none;</div><div class="line">  background-color: #f6f6f6;</div><div class="line">  font-size: 14px;</div><div class="line">  font-family: &apos;Monaco&apos;, courier, monospace;</div><div class="line">  padding: 20px;</div><div class="line">&#125;</div><div class="line"></div><div class="line">code &#123;</div><div class="line">  color: #f66;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个没什么好说的。</p>
<p>md.js</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">var app = new Vue(&#123;</div><div class="line">  el: &apos;#editor&apos;,</div><div class="line">  data: &#123;</div><div class="line">    input: &apos;# hello&apos;</div><div class="line">  &#125;,</div><div class="line">  computed: &#123;</div><div class="line">    compiledMarkdown: function () &#123;</div><div class="line">      return marked(this.input, &#123; sanitize: true &#125;)</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  methods: &#123;</div><div class="line">    update: _.debounce(function (e) &#123;</div><div class="line">      this.input = e.target.value</div><div class="line">    &#125;, 300)</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>这里是初始化了一个 Vue 的实例，其中 input 存放 md 源文件的内容。</p>
<p>computed 是计算属性，它使得 input 一发生改变计算属性就重新求值。详情可以看<a href="https://cn.vuejs.org/v2/guide/computed.html#%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7" target="_blank" rel="external">官方文档</a>。</p>
<p>而 methods 里面的 update 就是当检测到 DOM 的变化之后得到事件对象被 e 接收，然后再把新的内容 e.target.value 赋值给 input。而为了防止抖动，使用了 _.debounce。</p>
<p>关于事件对象：</p>
<blockquote>
<p>而事件对象也有很多属性和方法，其中target属性是获取触发事件对象的目标，也就是绑定事件的元素，e.target表示该DOM元素，然后在获取其相应的属性值。<br>来源：<a href="http://www.imooc.com/qadetail/153498" target="_blank" rel="external">http://www.imooc.com/qadetail/153498</a></p>
</blockquote>
<p>在这里 _.debounce 接受了两个参数，第一个是要防抖的函数，第二个是需要延迟的毫秒数，也就是说刷新得不会太快。详情见<a href="http://lodash.think2011.net/debounce" target="_blank" rel="external">具体文档</a>。</p>
<p>因此综上，当输入了新的内容会触发 update 对 input 进行更新，然后根据 computed 的性质使得 v-html 也就是页面进行了更新，于是一个简单高效的编辑器就这样完成了。</p>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>这一切都归根结底与 js 没有学好…其实也没怎么系统地学习 js，只学过一些皮毛的内容…回头继续看 Vue 的语法…</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[配置Vue命令行环境]]></title>
      <url>https://blog.patrickcty.cc/2017/05/26/%E9%85%8D%E7%BD%AEVue%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%8E%AF%E5%A2%83/</url>
      <content type="html"><![CDATA[<h1 id="配置-Vue-命令行环境"><a href="#配置-Vue-命令行环境" class="headerlink" title="配置 Vue 命令行环境"></a>配置 Vue 命令行环境</h1><h2 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># 全局安装 vue-cli</div><div class="line">$ npm install --global vue-cli</div><div class="line"># 创建一个基于 webpack 模板的新项目</div><div class="line">$ vue init webpack my-project</div><div class="line"># 安装依赖，走你</div><div class="line">$ cd my-project</div><div class="line">$ npm install</div><div class="line">$ npm run dev</div></pre></td></tr></table></figure>
<p>但是在执行 <code>npm install</code> 的时候会报错</p>
<blockquote>
<p>Failed at the phantomjs-prebuilt@2.1.14 install script ‘node install.js’.</p>
</blockquote>
<p>解决方法</p>
<pre><code>npm install -g phantomjs-prebuilt@2.1.14 --ignore-scripts
</code></pre><p>现在就可以成功运行 Vue 项目了，注意上面这行命令的 -g 是指全局安装，不然只在安装目录下生效。上面的所有命令也都是在全局环境下安装的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&gt; vue-project@1.0.0 dev /home/patrick/音乐/vue-project</div><div class="line">&gt; node build/dev-server.js</div><div class="line"></div><div class="line">&gt; Starting dev server...</div><div class="line"></div><div class="line"></div><div class="line"> DONE  Compiled successfully in 2323ms                                  17:14:54</div><div class="line"></div><div class="line">&gt; Listening at http://localhost:8080</div></pre></td></tr></table></figure>
<h2 id="Next"><a href="#Next" class="headerlink" title="Next"></a>Next</h2><p>接下来就要慢慢学习 Vue 的各种语法了！</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[《摔跤吧，爸爸！》]]></title>
      <url>https://blog.patrickcty.cc/2017/05/21/%E3%80%8A%E6%91%94%E8%B7%A4%E5%90%A7%EF%BC%8C%E7%88%B8%E7%88%B8%EF%BC%81%E3%80%8B/</url>
      <content type="html"><![CDATA[<h1 id="《摔跤吧，爸爸！》"><a href="#《摔跤吧，爸爸！》" class="headerlink" title="《摔跤吧，爸爸！》"></a>《摔跤吧，爸爸！》</h1><h2 id="开始之前"><a href="#开始之前" class="headerlink" title="开始之前"></a>开始之前</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这部电影本来应该是吕方和歆培一起看的，然而因为种种原因，最后变成了吕方和一脸懵逼的我去看了 233 。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;其实在这之前我一直都很想去看，然而没有找到好的机会。第一次看到这个奇葩的名字的时候我还以为又是一个国产八线骗钱片子，结果后来在各种社交平台发现这是阿米尔汗主演的电影，没错就是《三傻大闹宝莱坞》以此《我滴个神呀》的那个印度国宝演员。他为了演这部电影硬生生地把身材吃到了电影中那个中年发福的爸爸的形象，因为他觉得只有这样才能真实体会主人公的情感，才能演得更到位，之后他又花费了很大的代价以及毅力才恢复到了原来的身材。看到这些之后我就更想去电影院观看了。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;不过之后在知乎上看到了关于这部电影的主题的争议，还知道这部电影在影院上映的是删减版，于是不禁担心起来观看的效果会打折扣，不过这次到电影院看了之后感觉之前的顾虑都是多余的，虽然有删减，但是并不影响观看。倒是晚了几分钟错过了片头有一点遗憾…</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;因为是周一看的电影，中途因为种种原因一直都没有真正下笔来写，现在终于找到时间来写了。说了这么多废话，下面就正式开始了。</p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这是一个实现爸爸梦想的故事。爸爸以前是一个很厉害的国内摔跤冠军，但是因为种种原因，一直没能在国际大赛获得金牌。于是他把希望寄托在了儿子身上，然而事与愿违，一连四次，生出的都是女儿，他也因此放弃了自己的梦想，但是一次女儿打架完胜男孩的事件中，他看到了两个女儿的摔跤天赋，也看到了自己实现梦想的希望。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;于是爸爸对两个女儿进行了摔跤的训练，而对于无忧无虑的儿童来说，这训练无疑是魔鬼般的训练，父亲也面临着全村人的质疑和嘲笑。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;刚开始的时候两个女儿自然是难以接受，甚至想去反抗，但是一次她们参加结婚典礼却被父亲破坏，过后她们在向新娘抱怨的时候新娘的话却让他们的态度发生了三百六十度的转变。众所周知，女性在印度的地位实在是不高，很多女性早早就要嫁入其他的人家里只为了减轻自己家的负担，从此一辈子只能与家务为伍，而她们爸爸的行为虽然专横独裁但是实际上是给他们一条改变自己命运的出路。她们也是懂事的人，知道了这点这之后她们也终于去主动接受训练了。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;而此时爸爸看到她们的反抗行为之后虽然内心不甘甚至十分愤怒但也无可奈何，如果她们实在不想去训练恐怕爸爸也会放弃他的梦想，这一点从爸爸在只打了他侄子一耳光而没有打他的两个女儿可以看出来。所以其实那个“自私”、“独裁”的爸爸其实并不是那么的不堪，他或许真的是想去改变女儿的命运。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;另外这个逗比的侄子承担起了全剧的大部分笑点，还是一个背锅侠 233 ，不过塑造的还是很成功的。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;而女儿在他的训练下也充分地发挥了她们摔跤的天赋，一路上过关斩将轻松杀进了全国赛，大女儿 Geeta 率先夺得全国冠军，进入了印度国家体育学院，离开了爸爸，而此时小女儿 Babita 依旧跟在父亲的身边继续训练。这时候冲突就产生了，因为见识到了更高的世界，于是 Geeta 就认为父亲的一套过时了，并且重新留起了长发，注重起了形象，而父亲的大男子主义(？)或者是作为曾经职业摔跤运动员的骄傲让他感觉十分不高兴。但是女儿用自己的摔跤技巧让父亲无话可说。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当年迈的父亲被女儿摔在地上，他最多的感觉应该就是不甘心了，因为身体的退化，自己的那一套技术的威力不能充分发挥，女儿也开始不听自己的话。和之两个女儿反抗的那次一样，虽然内心不甘心、无奈，但是他知道这时候说什么都没有用了，他能做的就只是默默地在阳台上目送 Geeta 的离去。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;而小女儿则是父亲的支持者，她认为父亲的技巧并没有过时，只是父亲的身体大不如前了，而正值风头的 Geeta 才不这样认为，于是父亲和 Geeta 的分歧演变成了 Geeta 和 Babita 的争执。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;之后 Babita 在父亲的训练下也顺利地拿到了全国冠军进入了同样的学校，但此时 Geeta 多次在国际大赛中失利，甚至快要迷失。还是 Babita 站了出来，让她去向爸爸寻找帮助，尽管 Geeta 感觉不好意思开口，但是“他毕竟是我们的爸爸，爸爸顶多把你骂一顿，他骂的话你就乖乖听着就好”让她终于踏出了那一步。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当 Geeta 最终向爸爸打了电话，当爸爸终于等到了 Geeta 的电话，当 Geeta 在电话里放声痛哭，这一瞬间便成了永恒，连局外人的我都差点留下了眼泪。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;父女重归于好，接下来的就是父亲和教练的冲突了，不得不说教练的形象真的塑造得有点过于坏了——死要面子、权威性强、嫉妒心强、使用下三滥的手段……不过这样为剧情增加了不少起伏。当教练不相信 Geeta 能参加 55 kg 比赛，父亲站出来力挺女儿，为她制定额外的饮食训练计划；当教练因为额外的训练和饮食想要开除她们，是父亲站了出来承认错误，他知道他这些年对女儿太严格甚至是专横，但是那些都是为了女儿的前途，为了女儿的前途他也愿意低下头认错；当女儿参加国际大赛不知所措，也是父亲站了出来制定战术；当决赛父亲“失踪”、Geeta 接近失败，也是父亲的那些话语带她走出了犹豫，赢得了比赛。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当父亲在地下室听到了印度国歌声，当父亲的梦想终于实现，当父女俩终于见面，当父亲眼中出现满足的眼神，当父亲终于说出女儿是他的骄傲。一切的一切，都变成了过往；一切的一切，也变成了永恒。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;显然这是一部很棒的电影，但同时也被一些人诟病，我觉得这应该是删减的锅，虽然看的时候没发现，但是回想起来，删减的片段使得前期父亲的形象不是那么的好，不过也不太影响观感。父亲并不是一个冷血专横的父亲，他也爱着他的女儿，只是他并不能那么顺利地表达出来，但他对女儿的爱，对女儿的体贴从那些微小动作中体现得淋漓尽致。很高兴最后父亲实现了他的梦想。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;摔跤的内容也让人看得很爽，同时也觉得紧张不已，尽管过程没那么顺利，但是当最后 Geeta 赢得了冠军，那种爽的感觉真的是一言难尽呀，哈哈。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;尽管小时候很恨父亲的残暴，但是当未来 Geeta 和 Babita 掌控着自己的命运的时候，她们一定会很感谢父亲曾经对她们的严格。父亲也会老，父亲也不总是对的，父亲也不是万能的，但是父亲产生的影响，却是让人受益终身的。</p>
<h2 id="评分"><a href="#评分" class="headerlink" title="评分"></a>评分</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;9/10.</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;音乐剧情都很不错，主演的演技也很到位，内心独白这些钥匙多一点就更好了。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[《喜欢你》]]></title>
      <url>https://blog.patrickcty.cc/2017/05/05/%E3%80%8A%E5%96%9C%E6%AC%A2%E4%BD%A0%E3%80%8B/</url>
      <content type="html"><![CDATA[<h1 id="《喜欢你》"><a href="#《喜欢你》" class="headerlink" title="《喜欢你》"></a>《喜欢你》</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;每个人都是一把锁，外向的人是一把活锁，用力就能打开；而有的人是死锁，只有遇到那把能解开的钥匙，才能看到内心所想。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;而没有人一开始就是一把死锁，也没有人会愿意一直紧锁，只是那把打开他的锁的钥匙还没出现。而在这部电影中，解开霸道总裁路晋的钥匙就是顾胜男以及她做的菜肴。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;必须要吐槽一下开场对路晋的描写，这尼玛哪像一个总裁，没有时间概念，随随便便开人，喜怒无常，就像一个纨绔子弟，富二代…不过还好后面对人物刻画还是不错的，前后的反差还是很有趣的。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;路晋是一个跨国经济体的掌管者，在这样的人身上，一般会有一些鲜明又不同寻常的特点。而他的特点就是对饮食挑剔、独自进餐、不近人情。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;而顾胜男的出现似乎就是为了打破他的不近人情，从开始的“巧合”到后来的用菜征服，渐渐地打开了这把死锁。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这部电影的笑点还是特别密集的时候，很多次我都忍不住笑出声来了，他们是两个性格完全不同的人，这样的反差使得剧情的有趣性更上一层楼。</p>
<blockquote>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;是你改变了我，让我找到了我作为厨师的价值，你是真正懂我的人。</p>
</blockquote>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;是你改变了我，让我明白一起吃饭的美好，让我能安稳地睡个好觉，让我能克服我的洁癖。</p>
<blockquote>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;但是啊，我古怪的性格让我不能主动说出爱你，我会嫉妒，我会控制不住自己，我会说出很重的伤害你的话。</p>
</blockquote>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;但是啊，我傲娇的性格让我难以开口说出我喜欢你，我一直极度不近人情让我都不明白我究竟对你是怎样怎样的想法。</p>
<blockquote>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;但是我就是爱你呀，但是我只是一个凡人，我只能在家里尽力不去想你，只是我的眼泪为什么一直不停地在流呢？</p>
</blockquote>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我极度理性，我极度冷静，我极度爱好美食，但是为什么小时候的和狗在一起的场景会挥之不去呢？为什么我连七年来最爱的食物都吃不下去了呢？为什么那个吃河豚出现幻觉的夜晚会那么印象深刻呢？</p>
<blockquote>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如果他能过来找我就好了。</p>
</blockquote>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;就算多十个小时，我也要去找她，也要去带她看最美的夕阳。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最后，在菜市场的调度室门的内外，感情终于浮现在了空气中，尽管路晋难以表达感情，但他还是说出来了。这部分既温馨，又搞笑，总之他们在一起了～即使遇到了钥匙，也需要锁和钥匙靠得足够近，才能解开死锁，而这次，是锁主动靠了过去。</p>
<blockquote>
<p>有没有人 依偎我身旁<br>听我倾诉 余生的漫长<br>在你的眼中 我似乎健忘<br>因为我脑海 已有最难忘 最难遗忘</p>
</blockquote>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;有你依偎在我身旁，和我一起度过余生的漫长。就这样就好，一直这样就好，《喜欢你》，喜欢你，五月五日第一次约会，北京路，越秀，广州，广东，珠三角，中国，亚洲，地球，太阳系，银河系，宇宙。May the 4th be with you, and May the 5th be with you, too.</p>
<p><img src="https://okdkbnczs.qnssl.com/image/movies/bwithu.jpg" alt="bwithu"></p>
<h2 id="评分"><a href="#评分" class="headerlink" title="评分"></a>评分</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;8/10.</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;电影整体还是不错的，剧情的“霸道总裁爱上我”这个设定比较尴尬，不过内容却出乎意料地轻松，有趣，整场电影都很开心。不足的话就是配音明显和嘴唇的动作对不上，还有就是男主的助手，女主的闺蜜定位比较鸡肋，“吕子乔”这么逗逼，增加一些笑点就好些了。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;同时这也是一起看的第一部电影～还是在情侣厅看的～</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[《爱乐之城》]]></title>
      <url>https://blog.patrickcty.cc/2017/05/01/%E3%80%8A%E7%88%B1%E4%B9%90%E4%B9%8B%E5%9F%8E%E3%80%8B/</url>
      <content type="html"><![CDATA[<h1 id="《La-La-Land》"><a href="#《La-La-Land》" class="headerlink" title="《La La Land》"></a>《La La Land》</h1><h2 id="开始之前"><a href="#开始之前" class="headerlink" title="开始之前"></a>开始之前</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;其实在爱乐之城刚开始上映的时候我就很想去电影院看看，不过这种电影嘛还是得两个人一起看才有感觉。于是乎虽然一直都很想看，但直到下映了都没来得及看…正好这个五一想完整看一部电影，无意中发现居然在网上可以看了，于是果断下载～</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;比较好玩的是因为电脑正在用 Linux 写程序，没办法进入 Windows 下载，于是拿出了久违的 Windows 10 虚拟机来下载，没想到下载速度还很快～再就是想把它导出来的时候发现并不能直接拖到本机上，还特意在 U 盘上倒腾了一圈才导入到本机中。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;现在当我写完了那个程序之后就准备静下心来看这部电影了～</p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;其实刚开始看的时候我看得不是太懂。电影一上来就是一大群人在堵车的公路上跳舞，这立马让我联想到了之前的不如跳舞的表情包，不过这样一来其实表明了自己歌舞剧的身份。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;也是在这个高速公路上，女主第一次“邂逅”了男主，虽然这第一印象并不是那么的好。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;第二次见面是在女主参加完 party 发现自己的车被拖走的时候，她无意中走进了一间饭店，被男主的钢琴声所打动。但是男主这时正好失去工作，在不愉快中，男主不等女主说完就粗暴地撞着女主离开，留下女主原地尴尬。值得一提的是男主的 boss 就是爆裂鼓手里面那个十分凶的 Fred，他真的适合黑脸的角色 233。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;第三次见面，也是好感产生的见面，是在一个 party 上，女主是参与者，而男主是演奏者。女主用一首流行歌曲报复钟情于 Jazz 的男主之前对她的忽视。就在这一来一去中，女主对男主的不好印象已经消除，之后的男主帮忙解围更是为两人营造了独处的空间。在一阵舞蹈中，两人产生了情感。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;之后两人的感情发展得并不顺利，女主此时已经有了交往对象，男主也是一个比较腼腆的人。但是男主主动出击成功约上了女主看电影，然而当晚女主要和她的交往对象共进晚餐，在内心挣扎中，女主还是选择了男主，在电影院中，他们彼此迈出了第一部，之后感情便如洪水般一发不可收拾。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;虽然两人感情很好，但是两人在生活上都面临着一定的困难，男主的梦想是开一个 Jazz 酒吧，阻止 Jazz 的消亡，但是梦想太过遥远，实际上男主连稳定的工作都没有。而女主则是一个多次试镜不成功的想成为演员的一个咖啡店职员。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;让这一切发生改变的则是男主选择加入乐队，一个和他的 Jazz 理想方向完全不相同但是有着丰厚酬金稳定工作的乐队。男主因此变得十分忙，而女主也因为男主的话选择辞去工作专心写剧本准备从舞台剧开始进行新的尝试。也是从这里开始剧情开始变得紧凑与精彩。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;之后女主觉得男主没有做自己喜欢的事情，而男主觉得女主是在怪罪他，而他是因为女主才选择暂时抛弃梦想去追寻一份稳定的工作。就在这样的两方的误解中争执爆发了。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;而让矛盾更加剧烈的则是因为在女主舞台剧演出的这一天男主因为乐队要拍照片没能去现场为女主打气。而不幸的是女主的演出并没有多少人捧场，甚至在下场后女主还听到下面有人议论她演得不好。在这样的多重打击下，女主的内心十分委屈，说出了 It’s all over. 这样的话并且回到了娘家。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;而男主的内心也十分消沉，她甚至以为爱情就这样结束了。然而峰回路转，男主接到了一个工作室的电话说要给女主试镜的机会，通过这个契机，女主参加了试镜，男女主的关系也重新回到正常。但是试镜成功就意味着女主要前往巴黎，也就是两个人将身处两地，未来怎样难以言说。而试镜失败则可能给女主带来毁灭性的打击。在这样的情况下，他们选择了一直相爱对方。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;虽然没有明说，但是从五年后的情况来看，女主成功了，她成为了著名影星，有了爱人，甚至孩子都会画画了，只是爱人并不是男主。而男主则实现了理想，开了名为 Seb’s 的 Jazz 吧，而 logo 则正是女主设计的那个。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;物是人非，“我”还是那个我，但是我爱的人已经不是爱我的人了，男主的一切感情，都包含在了最后的这首钢琴曲中了。而这首钢琴曲无疑是全剧的点睛之笔，这首钢琴曲“回忆”了二人从相识到相好到相濡以沫生下孩子来到 Jazz 吧观看表演的一系列场景。一切都和女主的现在相似，只是男主人公换成了男主。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;曲终，人走，多年的情感在男主与女主的点头相视一笑中结束。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;“我”能做的，只是用我最棒的音乐来回忆我们曾今拥有的一切，并且作为最美的告别来送给你，希望你能过上幸福的生活。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;“我”能做的，只是用我的心灵去感受你的音乐所讲述的一切，并且接受“我”已经不属于你的这个事实，再去继续过上我原有的生活。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最好的告别，就是现在，最好的未来，就是再也不见。</p>
<h2 id="评分"><a href="#评分" class="headerlink" title="评分"></a>评分</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;9/10.</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;和《死亡诗社》，《爆裂鼓手》类似，这部电影也是感情在最后迎来了大爆发。虽然有情人最后没有成为眷属，但是曾经拥有的那一切，已经足够了。这部电影对我来说是深有同感的，我之前的感情，也经历了类似的情况，在相爱中无疾而终，不过留下的回忆，也足以作为纪念。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[手机杂谈]]></title>
      <url>https://blog.patrickcty.cc/2017/04/23/%E6%89%8B%E6%9C%BA%E6%9D%82%E8%B0%88/</url>
      <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4.19 下午两点，小米科技发布了七年以来的旗舰产品小米 6。说实话，小米这家公司我一直都是比较喜欢的，不仅仅是因为性价比突出，而且从发布会就可以看不来小米公司骨子里的严谨。之前看锤子科技的发布会的时候，老罗就迟到了好久才现身，而这次在开始时间之前，现场就已经准备就绪。当然这些都是我个人的感觉，不过小米的一些产品，手机市场中的黑羊——小米 1、老当益壮——小米 2 系列、小米的各种高性价比周边，还有惊艳四座的小米 MIX，以及“我心澎湃”的澎湃 S1 都是十分优秀的。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;虽然之前小米一直在被唱衰，但是小米用自己的产品，小米 Note 2，小米 MIX，还有澎湃 S1，实力反驳了这个不切实际的观点。而这次小米 6 的发布会，更是让我期待不已。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在看小米发布会的时候，我还是很激动的，当骁龙 835，6G 内存，四曲面玻璃后盖，后置变焦双摄，四轴光学防抖一个个被宣布。甚至当亮银出场的时候那种闪闪发光的感觉都差点让我惊呼出来，但是当整场发布会结束之后，我却并没有以前的那种想换机的冲动。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;无疑，小米 6 是目前手机产品中最优秀的之一，但是现在手机市场较之前又有了一些改变。在功能机时代，智能机刚刚崭露头角，但是许多人都因为价格而望而却步的时候，小米 1 横空出世，以 1999 的爆炸性的价格，顶级的配置吸引了大量眼球。同时也成为了我的第一部智能手机。而那个时候小米手机还秉承“没有设计就是最好的设计”的理念，这其实也是市场的选择，在性能达不到的年代，外观只能是次要的考虑对象。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;而 OV 的崛起有一个原因就是因为手机性能的过剩，这使得大家的关注点从性能转化为另外的地方：外观，HiFi，拍照，宣传力度…于是有一些原来小米手机的使用者变成了 OV 的使用者。而小米的出货量也在被线下的厂商所蚕食。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;手机性能过剩带来的另一个变化就是手机使用周期变长，在以前，手机软硬件发展迅速，旧的手机甚至难以流畅地运行较新的软件。而现在手机随着系统大版本性能越来越好，加上厂商的优化，以及过剩的性能，在很长一段时间内手机都不会出现严重的卡顿的现象，即使发布了很久，使用体验依然可以保持在一个比较好的水平。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;现在的手机更多使用差异化来吸引消费者，比如我作为原生党更倾向一加、 Pixel，而也会有不少人会因为双曲面选择三星，iOS 选择苹果，明星代言选择 OV…而小米 6，虽然足够优秀，但是并没有很大的差异化来让我觉得有购买的欲望，如果我还在使用 Pro 5，那我会毫不犹豫换小米 6。不过我觉得小米的方向还是对的，在探索来创造差异化的基础上，保持着一贯的高性价比，这也是小米最值得人敬佩的地方吧。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;但是对于还在使用 2 + 16 的小米 4 的我老妈，小米 6 显然是有足够的吸引力的，希望到时候能抢到一个高配版的 233。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;不得不吐槽的是， MIUI 还是有点太臃肿了…至少在我用小米 4 的时候内存长期不足…不知道现在有没有好一些。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;自从弃坑球鞋之后，我的关注点就转向了数码产品，尤其是手机。之前入坑 Pro 5 就是因为被颜值 + 硬件 + Flyme 吸引。不过真正使用的时候却为后盖的脆弱而苦恼…上下的塑料真的太容易烂了… Flyme 虽然好用，但是总是让我感觉被束缚住了。而现在用氢 OS，虽然被其他人吐槽简陋，不过却正好对我的胃口，既可以体验原生的感觉，又不用折腾系统优化来压制国产毒瘤，实在是完美，不过要美化比如换字体还是要自己折腾，于是我选择不换字体 233。折腾的话还是留在 Linux 上吧 233。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;另外一加 3T 的外观手感也很不错，用习惯之后不能直视 Pro 5 的手感了 233，而且摔了这么多次还没有 Pro 5 那种让能忍受的裂缝，不过心疼我的一加，一直在被我摔 orz。还有就是自从刷入公测版之后，每次更新都多多少少会给我带来惊喜，这种惊喜也让我对手机的留恋一直保持～希望能一直接受系统更新～不然到时候就得让我折腾系统咯。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[《速度与激情8》]]></title>
      <url>https://blog.patrickcty.cc/2017/04/16/%E3%80%8A%E9%80%9F%E5%BA%A6%E4%B8%8E%E6%BF%80%E6%83%858%E3%80%8B/</url>
      <content type="html"><![CDATA[<h1 id="《速度与激情8》"><a href="#《速度与激情8》" class="headerlink" title="《速度与激情8》"></a>《速度与激情8》</h1><h2 id="开始之前"><a href="#开始之前" class="headerlink" title="开始之前"></a>开始之前</h2><blockquote>
<p>It’s been a long day, without you my friend. And I will tell you all about it when I see you again. </p>
</blockquote>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这首歌曾经深深地打动着我，速度与激情的那种浓厚的 family 的感情也让人感觉十分感动。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如今速 8 上映，我的内心是十分期待的，首先是因为每一部都有的那种肾上腺素狂飙的感觉，另外就是那种 family 的感觉了。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;本来是想上映那一天去看的，结果偏偏碰上一个满课的周五，而周六也没有想象中的那么忙，于是乎就决定在 ACM 结束后去享受这场视觉盛宴了～</p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;视觉效果真的无可挑剔，无论是飙车，还是炮火等特效都非常到位，只是剧情比较让人尴尬。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这部电影主要剧情就是多姆因为自己的前女友和儿子被作为人质囚禁，迫不得已叛变帮助塞弗夺取 EMP，核密码箱等，而夺取这些的原因居然是塞弗为了称霸世界…称霸世界…多么中二的想法…动漫中反派人手必备 233。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;现在就开始愉快地吐槽～</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;影片的开始当然要是一段飙车，应该是因为多姆在和莱蒂在度蜜月所以地点就在古巴。飙车的场面依旧是很帅的，多姆用一辆破车和当地最好的车进行比赛，然后居然逼得对方用下三滥的招数还损失了一辆摩托车 233，虽然对面最后还是输掉了。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;比较值得吐槽的就是为毛这个最好的车不喷氮气…明明可以轻松赢的…还有就是最后车起火那一部分感觉好扯…不过看得爽呀！</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这一部分车的比重感觉弱化了好多，真正飙车的部分就只有前面这个地方了。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;之后一群人去柏林偷 EMP，然后多姆“叛变”。不得不吐槽的是，为什么这么好偷…那个球是什么时候准备的…还有空在上面画那么大的一个笑脸…德国人的命就不是命了么…不过看得爽呀！</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;之后霍布斯就进入监狱，然后和同在监狱的肖被无名氏先生招过去了…为什么用电棍电一下整个监狱的门就开了…这个安全性真的…不过看得爽呀！</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;剧情真的没什么好说的…太多值得吐槽的了…还是看知乎的<a href="https://www.zhihu.com/question/47968883/answer/157309561" target="_blank" rel="external">这个回答</a>吧…</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;总之这是一部纯粹的爽片，我看的时候全程都在抖腿，其中远程操控汽车，汽车雨感觉都很震撼，后面的鱼雷那里也挺爽的，只是编剧似乎为了达到这个效果，强行做了很多有硬伤的事。主角阵容依旧强大，不过反而觉得并没有突出他们了，突出的人物就只有多姆，肖，还有霍布斯。不过逗比的罗曼还是撑起了全片中的不少笑点 233。也正是因为主角 Team 其他角色的不突出，感觉 family 的感情也没有之前的那么浓厚了，也许在第七部结局是最好的选择吧，把感动留在最后。</p>
<h2 id="评分"><a href="#评分" class="headerlink" title="评分"></a>评分</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;7/10。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;看得很爽，剧情槽点、硬伤太多。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[C语言文件操作]]></title>
      <url>https://blog.patrickcty.cc/2017/04/08/C%E8%AF%AD%E8%A8%80%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</url>
      <content type="html"><![CDATA[<h1 id="C语言文件操作"><a href="#C语言文件操作" class="headerlink" title="C语言文件操作"></a>C语言文件操作</h1><p>参考文章：<a href="http://blog.csdn.net/masefee/article/details/5341738" target="_blank" rel="external">【C/C++语言入门篇】– 文件操作</a><br>函数参考网站：<a href="http://c.biancheng.net/" target="_blank" rel="external">C语言中文网</a></p>
<h2 id="闲话"><a href="#闲话" class="headerlink" title="闲话"></a>闲话</h2><p>昨天那个操作系统实验课上因为文件流操作的失误和不理解，导致整节课都在调试还找不到方向…于是回来之后怒研究一波 C 的文件操作。</p>
<h2 id="理解文件操作"><a href="#理解文件操作" class="headerlink" title="理解文件操作"></a>理解文件操作</h2><p>C 的文件操作是以字节流或者二进制流来操作的。通过 C 的函数将数据送入内存缓冲区，然后从缓冲区把数据读入磁盘的文件或者程序。</p>
<p>所以我们用 fopen 来读取文件的时候相当于开辟了一个流来对文件进行读写。那么如何操纵文件呢？ C 的文件是用 FILE 结构体来描述的，于是我们要对文件进行操作，当然要用一个 FILE 指针， fopen 的返回值就是指向这个文件的 FILE 指针。</p>
<h3 id="fopen"><a href="#fopen" class="headerlink" title="fopen"></a>fopen</h3><blockquote>
<p> FILE <em> fopen(const char </em> path, const char * mode);</p>
</blockquote>
<p>第一个参数是文件的位置，第二个参数是文件打开方式，有只读 r，读写 r+ 等等。具体内容可以参考<a href="http://c.biancheng.net/cpp/html/250.html" target="_blank" rel="external">这里</a>。返回值就是 FILE 指针了，后面很多函数都会用到这个变量。</p>
<p>因为二进制底层的天然优势，读写二进制文件的速度是快于读写字节文件的速度的。</p>
<h3 id="fseek"><a href="#fseek" class="headerlink" title="fseek"></a>fseek</h3><blockquote>
<p>int fseek(FILE * stream, long offset, int whence);</p>
</blockquote>
<p>第一个参数是文件指针，第二个参数是偏移量（实际上是空间大小），是相对于第三个参数来说的。而第三个参数则是读写位置，它可以是：</p>
<ul>
<li>SEEK_SET 从文件头开始</li>
<li>SEEK_END 从文件尾开始</li>
</ul>
<p>其中这个文件头是绝对的，但是文件尾是相对的，会随着文件内容的改变而发生一些变化。昨天我就是因为很傻逼地把不应该被随便修改的数据写在了文件尾而导致运行结果一直有问题…</p>
<h3 id="fread"><a href="#fread" class="headerlink" title="fread"></a>fread</h3><blockquote>
<p>size_t fread(void <em>buffer, size_t size, size_t count, FILE </em> stream);</p>
</blockquote>
<p>buffer 为接收数据的地址（一般是一个变量）<br>size 为一个单元的大小<br>count 为单元的个数<br>stream 为文件流指针</p>
<h3 id="fflush"><a href="#fflush" class="headerlink" title="fflush"></a>fflush</h3><blockquote>
<p>int fflush(FILE* stream);</p>
</blockquote>
<p>fflush 可以用来清空文件缓冲区或标准输入输出缓冲区 stdin/stdout。</p>
<p>如果是要写的文件就把缓冲区的内容写入文件。最开始有提到，函数将数据写入缓冲区，而默认情况下只有缓冲区满了才会将缓冲区的数据写入文件中，这里就加速了这一个过程。可以防止因为断电损坏等原因而使得缓冲区的内容没有及时写入文件。</p>
<h3 id="fwrite"><a href="#fwrite" class="headerlink" title="fwrite"></a>fwrite</h3><blockquote>
<p>size_t fwrite(void <em> buffer, size_t size, size_t count, FILE </em> stream);</p>
</blockquote>
<p>参数和 fread 的相同，一般写入之后都会 fflush 一下，确保数据写入了文件。</p>
<h3 id="fclose"><a href="#fclose" class="headerlink" title="fclose"></a>fclose</h3><blockquote>
<p>int fclose(FILE * stream);</p>
</blockquote>
<p>不要忘了关闭文件流。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[基于 Selenium 的作业监视程序]]></title>
      <url>https://blog.patrickcty.cc/2017/04/04/%E5%9F%BA%E4%BA%8ESelenium%E7%9A%84%E4%BD%9C%E4%B8%9A%E7%9B%91%E8%A7%86%E7%A8%8B%E5%BA%8F/</url>
      <content type="html"><![CDATA[<h1 id="基于-Selenium-的作业监视程序"><a href="#基于-Selenium-的作业监视程序" class="headerlink" title="基于 Selenium 的作业监视程序"></a>基于 Selenium 的作业监视程序</h1><h2 id="闲话"><a href="#闲话" class="headerlink" title="闲话"></a>闲话</h2><p>每次计组的作业都是在下课之后在教学平台发布，很多时候都是急着想写作业然后查看结果发现一直没有消息，于是萌生了写一个爬虫自动检测更新，然而要么是因为一直没有写爬虫感觉写不出来于是没有尝试，要么是因为懒而不想去写。</p>
<p>有一次倒是下定决心要去写，不过被处理密码的 JS 卡住了就没有动手写了，这次终于下定了决心，对于最麻烦的登录，就直接用 Selenium 暴力解决了，因为毕竟是个人的小程序，不用考虑性能。总之虽然遇到了一些坑不过还是挺顺利地就搞定了。</p>
<h2 id="Selenium"><a href="#Selenium" class="headerlink" title="Selenium"></a>Selenium</h2><p>Selenium 的原理就是直接用代码来操纵浏览器，来完成自动化，我这次选择的是 Chrome，后来测试发现 PhantomJS 这个无头浏览器也可以顺利地运行。</p>
<p>Chrome 版的有些特殊，要安装一个 Chromedriver 的应用，这个所有平台都是有的，目前最新版的 2.28（还被这个版本号小小地坑了一下 233 ）。下载链接<a href="http://chromedriver.storage.googleapis.com/index.html" target="_blank" rel="external">在这里</a>。</p>
<p>接下来就是用 Selenium 的一些操作来模拟浏览器登陆了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">driver = webdriver.Chrome(&apos;/path/to/chromedriver&apos;)</div><div class="line">driver.get(&apos;http://study.jnu.edu.cn&apos;)</div><div class="line"></div><div class="line"># 总之找到登录框就好，然后就这样填充表单</div><div class="line">elem = driver.find_element_by_class(&apos;XXX&apos;)</div><div class="line"># 填充表单</div><div class="line">elem.send_keys(&apos;username&apos;)</div><div class="line"></div><div class="line"># 假设密码已经填好了</div><div class="line"># 找到登陆的按钮</div><div class="line">elem = driver.find_element_by_class(&apos;XXX&apos;)</div><div class="line"># 模拟按的操作，这样就可以了</div><div class="line">elem.click()</div></pre></td></tr></table></figure>
<p>相关教程可以<a href="http://cuiqingcai.com/2599.html" target="_blank" rel="external">看这里</a>。</p>
<h2 id="XPath"><a href="#XPath" class="headerlink" title="XPath"></a>XPath</h2><p>XPath介绍</p>
<blockquote>
<p>XPath 使用路径表达式来选取 XML 文档中的节点或节点集。节点是通过沿着路径 (path) 或者步 (steps) 来选取的。</p>
</blockquote>
<p>有些直接根据 Class 等很难定位，于是用 Xpath 可以很轻松愉快地解决。</p>
<p>语法的话可以参考<a href="http://www.w3school.com.cn/xpath/xpath_syntax.asp" target="_blank" rel="external">这个</a>。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>贴一个完整的代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line">#! /usr/bin/env python3</div><div class="line"></div><div class="line">from selenium import webdriver</div><div class="line">import time</div><div class="line">import os</div><div class="line">from mailalert import sendMail</div><div class="line"></div><div class="line"></div><div class="line">class HomeworkIndicator:</div><div class="line"></div><div class="line">    def __init__(self, urls, names):</div><div class="line"></div><div class="line">        self.driver = webdriver.Chrome(&apos;/home/patrick/Softwares/chromedriver&apos;)</div><div class="line">        self.urls = urls</div><div class="line">        self.hw_len = [0 for i in self.urls]</div><div class="line">        self.names = names</div><div class="line"></div><div class="line">    def login(self):</div><div class="line"></div><div class="line">        self.driver.get(&apos;http://study.jnu.edu.cn&apos;)</div><div class="line"></div><div class="line">        name = self.driver.find_element_by_name(&apos;user_id&apos;)</div><div class="line">        paswd = self.driver.find_element_by_name(&apos;password&apos;)</div><div class="line"></div><div class="line">        name.send_keys(os.environ.get(&apos;STUDY_NAME&apos;))</div><div class="line">        paswd.send_keys(os.environ.get(&apos;STUDY_PASS&apos;))</div><div class="line"></div><div class="line">        path = &apos;//tbody/tr[3]/td[2]/input&apos;</div><div class="line">        self.driver.find_element_by_xpath(path).click()</div><div class="line"></div><div class="line">    def start(self):</div><div class="line"></div><div class="line">        self.login()</div><div class="line"></div><div class="line">        path = &apos;//ul/li[@class=\&apos;clearfix read\&apos;]&apos;</div><div class="line">        i = 0</div><div class="line">        for url, hw, name in zip(self.urls, self.hw_len, self.names):</div><div class="line">            self.driver.get(url)</div><div class="line">            self.hw_len[i] = len(self.driver.find_elements_by_xpath(path))</div><div class="line">            i += 1</div><div class="line"></div><div class="line">        while 1:</div><div class="line">            i = 0</div><div class="line">            for url, hw, name in zip(self.urls, self.hw_len, self.names):</div><div class="line">                self.driver.get(url)</div><div class="line">                cnt = len(self.driver.find_elements_by_xpath(path))</div><div class="line">                if cnt &gt; hw:</div><div class="line">                    self.hw_len[i] = cnt</div><div class="line">                    body = &apos;【&#123;&#125;】作业有新内容了！&apos;.format(name)</div><div class="line">                    print(&apos;已发送邮件！&apos;)</div><div class="line">                    sendMail(&apos;作业更新提醒！&apos;, body)</div><div class="line">                i += 1</div><div class="line">                time.sleep(3)</div><div class="line">            time.sleep(3600)</div><div class="line"></div><div class="line"></div><div class="line">if __name__ == &apos;__main__&apos;:</div><div class="line"></div><div class="line">    urls = [&apos;http://study.jnu.edu.cn/webapps/blackboard/content/listConte&apos;</div><div class="line">            &apos;nt.jsp?course_id=_18789_1&amp;content_id=_340261_1&apos;,</div><div class="line">            &apos;http://study.jnu.edu.cn/webapps/blackboard/content/listConte&apos;</div><div class="line">            &apos;nt.jsp?course_id=_18755_1&amp;content_id=_192521_1&apos;,</div><div class="line">            &apos;http://study.jnu.edu.cn/webapps/blackboard/content/listConte&apos;</div><div class="line">            &apos;nt.jsp?course_id=_18755_1&amp;content_id=_251306_1&apos;]</div><div class="line">    names = [&apos;计组&apos;, &apos;汇编&apos;, &apos;汇编实验&apos;]</div><div class="line">    indicator = HomeworkIndicator(urls, names)</div><div class="line">    indicator.start()</div></pre></td></tr></table></figure></p>
<h2 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h2><p>其实使用 Selenium 来完成是十分简单的，不过之前一直有一些偷懒以及害怕自己不行的想法在阻碍着自己动手操作，这段时间独自写代码真的太少了，以后还是要像这样直面问题才行啊。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[一行实现哈弗曼权值计算]]></title>
      <url>https://blog.patrickcty.cc/2017/03/30/%E4%B8%80%E8%A1%8C%E5%AE%9E%E7%8E%B0%E5%93%88%E5%BC%97%E6%9B%BC%E6%9D%83%E5%80%BC%E8%AE%A1%E7%AE%97/</url>
      <content type="html"><![CDATA[<h1 id="一行实现哈弗曼权值计算"><a href="#一行实现哈弗曼权值计算" class="headerlink" title="一行实现哈弗曼权值计算"></a>一行实现哈弗曼权值计算</h1><p>杭电1053</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line">#include &lt;iostream&gt;</div><div class="line">#include &lt;cstdlib&gt;</div><div class="line">#include &lt;cstdio&gt;</div><div class="line">#include &lt;cmath&gt;</div><div class="line">#include &lt;cstring&gt;</div><div class="line">#include &lt;algorithm&gt;</div><div class="line">#include &lt;string&gt;</div><div class="line">#include &lt;sstream&gt;</div><div class="line">#include &lt;map&gt;</div><div class="line">#include &lt;vector&gt;</div><div class="line">#include &lt;set&gt;</div><div class="line">#include &lt;stack&gt;</div><div class="line">#include &lt;queue&gt;</div><div class="line"></div><div class="line">using namespace std;</div><div class="line">#define INF 0x3fffffff</div><div class="line">const int maxn = 10005;</div><div class="line">int num[maxn];</div><div class="line"></div><div class="line">bool cmp(int x, int y)</div><div class="line">&#123;</div><div class="line">    return x &gt; y;</div><div class="line">&#125;</div><div class="line"></div><div class="line">int main()</div><div class="line">&#123;</div><div class="line">    int n;</div><div class="line">    string s;</div><div class="line">    while(cin &gt;&gt; s)</div><div class="line">    &#123;</div><div class="line">        map&lt;char, int&gt; a;</div><div class="line">        if (s == &quot;END&quot;)</div><div class="line">            break;</div><div class="line">        int len = s.size();</div><div class="line">        for (int i = 0; i &lt; len; ++i)</div><div class="line">        &#123;</div><div class="line">            if (a.count(s[i]) == 0)</div><div class="line">                a[s[i]] = 1;</div><div class="line">            else</div><div class="line">                a[s[i]]++;</div><div class="line">        &#125;</div><div class="line">        int b = 0;</div><div class="line">        for (map&lt;char, int&gt;::iterator it = a.begin(); it != a.end(); ++it)</div><div class="line">        &#123;</div><div class="line">            num[b] = it-&gt;second;</div><div class="line">            b++;</div><div class="line">        &#125;</div><div class="line">        int l = a.size();</div><div class="line">        sort(num, num + a.size(), cmp);</div><div class="line">        int cnt = 0;</div><div class="line">        for (int j = l - 1; j &gt; 0; --j)  // 合并为只有一个元素，l - 1 次</div><div class="line">        &#123;</div><div class="line">            // 哈弗曼树</div><div class="line">            // 取了最小的两个数</div><div class="line">            num[j - 1] += num[j];</div><div class="line">            // 越小的元素等效加的次数越多</div><div class="line">            cnt += num[j - 1];</div><div class="line">            // 更新新树，把最后一个元素也抛弃了</div><div class="line">            // 相当于把最小的两个元素都抛弃了</div><div class="line">            sort(num, num + j, cmp);</div><div class="line">        &#125;</div><div class="line">        if (l == 1)</div><div class="line">            printf(&quot;%d %d %.1f\n&quot;, 8 * len, num[0], (8 * len + 0.0)/num[0]);</div><div class="line">        else</div><div class="line">            printf(&quot;%d %d %.1f\n&quot;, 8 * len, cnt, (8 * len + 0.0)/ cnt);</div><div class="line">    &#125;</div><div class="line">    return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[人生无限公司]]></title>
      <url>https://blog.patrickcty.cc/2017/03/28/%E4%BA%BA%E7%94%9F%E6%97%A0%E9%99%90%E5%85%AC%E5%8F%B8/</url>
      <content type="html"><![CDATA[<h1 id="人生无限公司"><a href="#人生无限公司" class="headerlink" title="人生无限公司"></a>人生无限公司</h1><h2 id="插曲"><a href="#插曲" class="headerlink" title="插曲"></a>插曲</h2><p>打卡上班的这一天终于来到，不过这天之前还有一些小插曲呢。</p>
<p>一开始看到演唱会的信息我还是很犹豫的，因为演唱会的信息突然出现在我的眼前。因为我之前没怎么关注类似的消息，所以一下子我是很纠结的。虽然我知道歆培他们一定会去，但在那个时候我反而没想到要去联系他们。在这个时候网上还是有票的，不过那时我还在纠结要不要买一张票。</p>
<p>后来好像是看到了有人发买到了票的朋友圈，于是我顿时下定决心要去看演唱会，然而去买票的时候我发现已经没有票了。这个时候我倒想起来了去问歆培，然而她也没有办法……</p>
<p>峰回路转，第二天她发来了一个买票的链接，尽管是第二天的，而他们买的是第一天的，这时候就我面临了一个问题：要不要一个人去看演唱会呢？或者再拉一个人一起去看？想了想身边似乎没有又没买票又很喜欢五月天的人了，妹子的话完全没到那种关系，于是一狠心，一个人就一个人，周日就周日，下单了！因为这个时候还在家里，我以为很快就能收到票于是收货地址填的是家里，之后就是漫长的等票时间了。</p>
<p>没想到过了那么晚票才发货，期间我去咨询那个爱稻草都没有得到回复……等发货的时候我已经在广州好多天了，没办法只得再让老妈发回来了……由于来回发的都是顺丰，所以 50  元就这样没了……不过顺丰确实给力，从武汉到广州，一天就到了。去取票的时候还正好碰到了同样是取票的梦桐，她还告诉了我不少演唱会相关的内容。其实我之前一直认为荧光棒啥的都是场馆内有，不需要自己买的……但是他们是前一天于是我就可以蹭蹭他们的装备了～</p>
<p>总算是顺利地拿到了票，虽然中途多周折了一波～剩下的就是等着打卡上班的日子的来临了！</p>
<p><img src="https://okdkbnczs.qnssl.com/image/diary/ticket1.png" alt="终于拿到票啦"></p>
<h2 id="上班的日子终于到啦"><a href="#上班的日子终于到啦" class="headerlink" title="上班的日子终于到啦"></a>上班的日子终于到啦</h2><p>盼星星盼月亮终于盼来了这一天，因为是第一次，所以我很早就过去了，后来在场外绕了好几圈之后才终于找到了入口，“顺利”进到了场馆内。</p>
<p>由于去得比较早，场内还没什么观众，我也只能静静地等着开场啦～</p>
<p><img src="https://okdkbnczs.qnssl.com/image/diary/studio1.jpg" alt="空荡荡的体育场"></p>
<p>等了好久好久，终于终于热场表演来了，这时候人也到得差不多了，不过由于好多人都不认识这个歌手，场面一度很尴尬 233。</p>
<p><img src="https://okdkbnczs.qnssl.com/image/diary/studio2.jpg" alt="热场表演"></p>
<p>在《顽固》的 MV 结束之后，五月天终于登场！其实在《顽固》的音乐响起的时候，我就以为五月天登场了，然而其实并不是233。</p>
<p>随着如大片般的视频的播放，五月天终于登场，我也立马兴奋了起来～</p>
<p><img src="https://okdkbnczs.qnssl.com/image/diary/studio3.jpg" alt="五月天终于登场啦"></p>
<p>之后，《好好》、《干杯》、《我心中尚未崩坏的地方、《孙悟空》、《温柔》……这些我喜欢的歌一首首响起，心中的激动之情也一直没有平静下去～</p>
<p><img src="https://okdkbnczs.qnssl.com/image/diary/studio4.jpg" alt="夜景1"></p>
<p><img src="https://okdkbnczs.qnssl.com/image/diary/studio5.jpg" alt="夜景2"></p>
<p>之后唱《知足》的时候大家都打开了手机的闪光灯～整个会场的气氛都变得柔和起来了～</p>
<p><img src="https://okdkbnczs.qnssl.com/image/diary/flashlight.jpg" alt="知足"></p>
<p>尽管加班了好几次，不过下班的时候还是要来到，真的是意犹未尽呀！</p>
<p><img src="https://okdkbnczs.qnssl.com/image/diary/eos.jpg" alt="还是结束啦"></p>
<p>不得不说体育场的照明真好，就像白天一样呢～</p>
<p><img src="https://okdkbnczs.qnssl.com/image/diary/leave.jpg" alt="退场了"></p>
<p><img src="https://okdkbnczs.qnssl.com/maydaycover.jpg" alt="全景"></p>
<h2 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h2><p>其实一个人看演唱会也没什么，因为演唱会也算是全身心投入的一个活动，嗨起来的时候，就完全感受不到自己是一个人了～况且激动的时候还能用手机分享自己所看到的，只可惜网速太差了 233。</p>
<p>唯一不爽的就是一个人的话在等的时候比较无聊 233，还有就是进场的时候感觉有点孤独 233。</p>
<h2 id="归去"><a href="#归去" class="headerlink" title="归去"></a>归去</h2><p>再好的筵席，最终也会散场，在人流中，我走向了地铁站，然后被人流推着进去了 233。</p>
<p>离开人生无限公司，回到新造，回到现实。这次上班的经历，也像梦一般，但我将会将它珍藏在心中～</p>
<p><img src="https://okdkbnczs.qnssl.com/image/diary/road.jpg" alt="结束的路上"></p>
<p><img src="https://okdkbnczs.qnssl.com/image/diary/subway.jpg" alt="进地铁"></p>
<p>期待下一次的相见～下次，我要带着爱的人一起分享这种快乐，这种感动！</p>
<p>属于我的自传，我还要接着撰写～</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[正青春的歌]]></title>
      <url>https://blog.patrickcty.cc/2017/03/27/%E6%AD%A3%E9%9D%92%E6%98%A5%E7%9A%84%E6%AD%8C/</url>
      <content type="html"><![CDATA[<h1 id="正青春的歌"><a href="#正青春的歌" class="headerlink" title="正青春的歌"></a>正青春的歌</h1><blockquote>
<p>如果我们不曾相遇，我会是在哪里，如果我们都不曾相识，不存在这首歌曲。</p>
</blockquote>
<p><em>《如果我们不曾相遇》</em>，还好遇到了你们，即使我们过了很久才真正相识。</p>
<h2 id="初遇"><a href="#初遇" class="headerlink" title="初遇"></a>初遇</h2><p>从朋友那里拷过来的《私奔到月球》，《夜访吸血鬼》，便是我与五月天最初的相遇了。</p>
<blockquote>
<p>一二三牵着手，四五六抬起头，七八九我们私奔到月球。</p>
</blockquote>
<p>在那个非智能手机流行的时代，歌词并不像现在随意可得，<em>《私奔到月球》</em>中的这句歌词牢牢地抓住了我的心，只是那时我还不懂爱情，不过私奔一定是一件很酷的事呢。</p>
<blockquote>
<p>满怀忧伤却流不出泪，极度的疲惫却不能入睡，只能够日日夜夜，然后又日日夜夜，无尽的日日夜夜，永远的深陷在人间。</p>
</blockquote>
<p>那时候我还听不出歌曲的忧伤，却深深地被<em>《夜访吸血鬼》</em>中的呐喊所折服。</p>
<h2 id="击败"><a href="#击败" class="headerlink" title="击败"></a>击败</h2><p>那时候我还最爱周杰伦，向前《奔跑》着，却被《倔强》所击败。</p>
<blockquote>
<p>我和我最后的倔强，握紧双手坚决不放，下一站是不是天堂，就算失望不能绝望。</p>
</blockquote>
<p>那是三年中只有一次的演出，我们班和五班争夺表演的名额，但是在评委最后的选择中，我们班凌乱的《奔跑》，被五班的整齐的<em>《倔强》</em>所击败，在台下，我们不甘地听完了《倔强》，也牢牢地记住了这句歌词，以及这首歌的一切。</p>
<h2 id="爱上"><a href="#爱上" class="headerlink" title="爱上"></a>爱上</h2><p>真正爱上五月天还是在高中。</p>
<blockquote>
<p>我不愿让你一个人，承受这世界的残忍，我不愿眼泪陪你到永恒。</p>
</blockquote>
<p>那时是情感最压抑的高中，而我总会不由地想起初中的那段恋情，在 KTV 中，当<em>《我不愿让你一个人》</em>响起，我的情感也随之飘荡，五月天的名字，也终于被我所记住。</p>
<p>之后就开始有意识无意识地听五月天的歌了，那时候最常听的是《星空》，《温柔》，《步步》，《拥抱》，《突然好想你》。</p>
<blockquote>
<p>那一年我们望着星空，有那么多的灿烂的梦，以为快乐会永久，像不变星空陪着我。</p>
</blockquote>
<p>某一天中，我看完了同名电影《星空》，那单纯的爱情让我久久不能忘怀，不过那时候片尾曲我并没有太认真地听。直到后来再次邂逅歌曲<em>《星空》</em>，电影中的那些场景仿佛又涌上脑海，这旋律也同样深深地印在了我的脑海里。</p>
<blockquote>
<p>不知道不明了不想要，为什么我的心，明明是想靠近，却孤单的黎明。</p>
</blockquote>
<p><em>《温柔》</em>这首歌一开始就打动着我，因为它的名字让我想起了一个人，想起了她的温柔，那是高三的暑假，我们还在单纯地聊着天。</p>
<blockquote>
<p>在失去你的风景里面，你却占据了每一条街，一步步曾经，一步步想念，在脚下蔓延。</p>
</blockquote>
<p>虽然我不看《步步惊心》，但是这首<em>《步步》</em>的旋律一下子就打动了我，而它的歌词也同样的美好。</p>
<blockquote>
<p>脱下长日的假面，奔向梦幻的疆界，南瓜马车的午夜，换上童话的玻璃鞋。</p>
</blockquote>
<p>和《温柔》一样，<em>《拥抱》</em>这首歌也是从歌名开始就打动着我，而歌词也同样美好。</p>
<blockquote>
<p>突然好想你，你会在哪里，过得快乐或委屈，突然好想你，突然锋利的回忆，突然模糊的眼睛。</p>
</blockquote>
<p><em>《突然好想你》</em>，这首歌也是在那次 KTV 所唱的五月天的歌之一，就是在那之后，我开始真正喜欢上了五月天。</p>
<h2 id="疯狂"><a href="#疯狂" class="headerlink" title="疯狂"></a>疯狂</h2><p>不知何时起，对五月天的喜爱变得疯狂，听的好多都是他们的歌，甚至在 KTV 里点的也基本都是他们的歌，而那一首首歌，都能触动我的心扉。</p>
<blockquote>
<p>会不会，有一天，时间真的能倒退，退回你的我的回不去的悠悠的岁月，也许会有一天，时间真的有终点，也要和你举起回忆酿的甜，和你再干一杯，再干一杯永远，喝了就能万岁，岁岁和年年。</p>
</blockquote>
<p><em>《干杯》</em>这首歌在高三结束的时候显得尤为触动，分别的日子中，这首友谊的歌，完美地唱出了我的心声，干了这一杯吧，干了友谊就能万岁，那些日子也永远都不会离开。</p>
<blockquote>
<p>伤心的，都忘记了，只记得这首笑忘歌，那一年天空很高风很清澈，从头到脚趾都快乐。</p>
</blockquote>
<p><em>《笑忘歌》</em>，一开始注意到这首歌是因为和《笑忘书》的名字类似，但是当我听了这首歌，‘就记得这首笑忘歌’了。这首歌也把我带回了童年无忧无虑玩耍的那个时代，把我带回了那快乐的河岸。</p>
<blockquote>
<p>如果要让我活，让我有希望的活，我从不怕爱错，就怕没爱过。如果能有一天，再一次重返光荣，记得找我，我的好朋友。</p>
</blockquote>
<p><em>《孙悟空》</em>这首歌是以去完西天的悟空为第一人称的歌曲，那种物是人非，朋友远去的情感，连着高考后的离别一起，再次直击心扉。</p>
<blockquote>
<p>你是火，你是风，你是织网的恶魔，破碎的，燕尾蝶，还作最后的美梦，你是火你是风，你是天使的诱惑，让我做，燕尾蝶，拥抱最后的美梦，让我短暂快乐很感动。</p>
</blockquote>
<p><em>《燕尾蝶》</em>也是在 KTV 里接触到的，当时我就被被歌词以及旋律中的一往无前所打动，而仅有的现场版让那种感情更加炙热。</p>
<blockquote>
<p>每个孤单天亮，我都一个人唱，默默地让这旋律和我心交响，就算会有一天，没人与我合唱，至少在我的心中，还有个尚未崩坏的地方。</p>
</blockquote>
<p><em>《我心中尚未崩坏的地方》</em>，在最迷惘的时候，我听到了这首歌，那孤独中的呐喊，以及那些富有哲理的歌词，让我震荡不已，同时我的负面情绪也被抚平。</p>
<h2 id="下一阶段"><a href="#下一阶段" class="headerlink" title="下一阶段"></a>下一阶段</h2><blockquote>
<p>有没有那么一种永远，永远不改变，拥抱过的美丽都再也不皮髓，让险峻岁月不能在脸上撒野，让生离和死别都遥远，有谁能听见。</p>
</blockquote>
<p><em>《如烟》</em>，唯美的歌名，同样触动的歌词，单曲循环着，我回忆着往昔，此生从前一切尽在云烟中。</p>
<blockquote>
<p>怎么去拥抱一道彩虹，怎么去拥抱一夏天的风。</p>
</blockquote>
<p><em>《知足》</em>是新生训练营结营时候全班一起唱的歌曲，还记得夏天的风轻抚在脸上，知足充满了心中。</p>
<blockquote>
<p>我们都要把自己照顾好，好到遗憾无法打扰。</p>
</blockquote>
<p><em>《好好》</em>是《自传》中的一首歌，起初听着还没有太大的感触，但是在看过 MV 之后我就立马爱上了。无论是歌词，还是旋律，都让我觉得十分触动。以及之后和《你的名字》结合的 MV，也更加让我喜欢，那些孤单的下午，听着《好好》，想养一只猫，好好假装我已经把你忘掉。</p>
<blockquote>
<p>不打扰是我的温柔。</p>
</blockquote>
<p>现在听<em>《温柔》</em>打动我的就是这句歌词了，如果你不是真正的快乐，如果你想要自由，那么我就给你自由，因为不打扰是我的温柔。</p>
<h2 id="自传"><a href="#自传" class="headerlink" title="自传"></a>自传</h2><p>我们每个人都在撰写着属于自己的自传，青春中我遇到了五月天，未来的传记，也要继续书写！等着等着，终于来到了打卡上班的那一天。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[大二下的碎碎念]]></title>
      <url>https://blog.patrickcty.cc/2017/03/22/%E5%A4%A7%E4%BA%8C%E4%B8%8B%E7%9A%84%E7%A2%8E%E7%A2%8E%E5%BF%B5/</url>
      <content type="html"><![CDATA[<p>好久没写博客了呢，是时候写点什么呢，是应该写点什么了呢，太久不去反思就又堕落下去了呢。</p>
<p>最近寝室弥漫着一股堕落的气息，主要是文俊买了游戏手柄之后玩口袋妖怪搞得我心痒痒的，我之前一直很想玩，但是当时没有机器，现在虽然还是很喜欢这个系列，但是玩起来太麻烦了，所以我就看着文俊玩，结果还是非常耗时…再就是吕方看着文俊这么嗨他也去买了个手柄，于是寝室的空气就更…</p>
<p>但对于我来说堕落的根源其实是因为我最近比较浮躁，之前在寝室还能学进去一些东西，现在就完全不想干学习相关的事情了，虽然在寝室写了两次算法的代码，不过效率都不算很高，感觉推进得很艰难。这个浮躁甚至影响了我在图书馆的状态，有时候在图书馆我都感觉很累什么都不想做…</p>
<p>堕落就在这里打住吧！这学期也算是至关重要的一个学期了，操作系统，计算机组成原理，汇编都在这学期，不过虽然这些课不容易，但是罕见的我并没有感觉很害怕，这倒是这学期值得庆幸的一个点了吧。另外一个点就是 ACM，这学期我参加了 ACM 的集训，虽然搞了两周，但是对我来说效果却并不是很好，那些难的题还是做不出来，所以每每面对 ACM 相关的内容，我的心里就会感觉十分害怕，不过对于这份害怕我并不是无动于衷，闲置了很久的《算法导论》我开始看了，虽然有时候会三天打鱼两天晒网，虽然推进的速度很慢，但是我迈出去了，希望我能打好基础，这样面对 ACM 的时候就能像 xcy 那样从容不迫了。</p>
<p>这学期我有一个目标，就是 GPA 上4.0，然后达到了这个条件的话再去尝试着把手头的 PC 给换掉，并且趁着教育优惠搞定 Mac + Beats，这还算是一个比较远大的目标，我感觉也有点虚，不过 Mac 和 Beats 的诱惑却实很大呀，所以我这学期拼了命也要朝这个目标努力！还有一点就是上学期因为绩点太惨淡，于是我立下了一个 flag：要是我的图论没有 85 + 的话我这学期就不逃课了，结果图论的成绩真的只有 84，这里要解释一下的就是上学期图论课我几乎没有去上过课，而且上课的时候也没听讲，而很多时候老师讲的其实还是很有用的，只是我根本没有认真去听，所以就感觉很水了。于是乎 flag 成立，这学期我就真的不准备逃课了。这点我还是要向彬彬学习的，上学期彬彬一节课都没逃过，所以他上学期的成绩也达到了惊人的 3.9，要想达到 4.0 +，我的学习态度真的要改变了！</p>
<p>到目前为止这个 flag 还是被我一直坚持的，虽然中途有过好几次都不想去上课，不过最终意志战胜了懒惰！其实上课的源动力是妹子，嘿嘿。</p>
<p>自从上学期期末的时候分手，现在单身已经有一段时间了，虽然很想脱单，但其实形式上的脱单并不是不可或缺，人才是关键，现在我算是找到了人，有人和我一起泡馆，甚至有时候是跑步了。这在某种程度上让我更愿意往图书馆跑，坚持跑步了，但是相反的也有一些副作用。一旦她不去，我的意志力就会有所削弱，这样的情况也出现过好几次了…不过现在这种情况似乎有些好转，我的心态也要调整调整，我们都要把自己照顾好，这样才有可能把别人也照顾好，这个方面还是要努力调整！</p>
<p>至于机会嘛，我还在努力寻找，之前也有尝试失败的。对这个我还是很谨慎的，毕竟之前就有一次太急躁然后直接崩盘的…所以嘛，还得慢慢来呢！就这样好好保持吧！不能急躁！</p>
<p>总之开学这几周还是挺幸福的，上课，泡馆，跑步都有了动力，剩下的就是让自己在图书馆也不要那么堕落了呢！</p>
<p>另外这学期困扰我最深的一点就是身体了，可能是因为上学期的作息不规律再加上饮食也不健康——几乎没吃水果，再加上过年期间的大吃大喝，这学期就落下了一身的毛病…从上学期就有的脚底的那个奇特的纹路，到这学期持续很久的腰疼，脸上各种长包，咽喉痛…总之身体像是一下子就垮了下去，之前还因为腰疼停跑了好久…</p>
<p>这么长时间来的教训，让我深刻明白到了身体的重要性，于是这学期水果每天都吃，熬夜也没那么多了，锻炼坚持并且没有拼得那么狠，不过之前吃鱼把喉咙划伤了，到现在还是很不舒服…唉，希望伤病远离全世界…</p>
<p>身体最重要！身体最重要！身体最重要！</p>
<p>大后天就是五月天的演唱会了呢，要是能和妹子一起去就好了～</p>
<p>Things can be better, things will be better, things do become better! I hope so, I believe so!</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[《月光男孩》]]></title>
      <url>https://blog.patrickcty.cc/2017/03/18/%E3%80%8A%E6%9C%88%E5%85%89%E7%94%B7%E5%AD%A9%E3%80%8B/</url>
      <content type="html"><![CDATA[<h1 id="《月光男孩》"><a href="#《月光男孩》" class="headerlink" title="《月光男孩》"></a>《月光男孩》</h1><h2 id="开始之前"><a href="#开始之前" class="headerlink" title="开始之前"></a>开始之前</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;知道这部电影还是在它获得奥斯卡奖之前，当时先是被海报吸引了，无论是颜色的搭配，还是三个不同时期人物的处理并拼接到一起，都让人感觉印象深刻，然后看了几篇文章对电影的高度评价，于是决定要找个机会看一看。直到前一段时间看到它力压《爱乐之城》，获得了奥斯卡奖，我才又决定抽个时间出来看看这部电影究竟是怎样的情况，是不是真正那么好，还是只是“政治正确”下的又一个结果，毕竟黑人，LGBT 在美国文化中都是敏感的内容。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在这个没课的堕落的周三下午，我终于接着之前看了一点开头的场景之后继续观看～</p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这部电影的拍摄技巧还是很棒的，整部电影分为三个部分，对应着主角的三个阶段：童年，这时候 Shiron 还在读小学；少年，这时候 Shiron 已经是一个高高瘦瘦的高中生了；成年，这时候 Shiron 已经成为一个壮硕的毒贩了。其中三个部分并不是完全连续的，中间有的时间直接被跳过了，但这样既保留了核心部分又不会显得内容太拖沓。另外中间的过渡还是很明显的，给我一种《黑镜》的感觉，不会有角色没转换过来的情况。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;少年 Shiron 就因为是 gay 而被大家所不待见以及欺负，有一次 Shiron 在被追打的时候躲进了毒贩 Juna 的小屋，而 Juna 和其他电影中的毒贩不同，他“带走”了 Shiron 并且带他吃饭，带他回家，试图打开他的心扉，然而可能是因为 Shiron 内心收到的伤害太多，他始终不愿意开口，最后在 Teresa 的温柔下，他终于稍微放下了一些警戒，说出了他的情况。从此时起，Shiron 与 Juna 和 Teresa 结下了缘分。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;而在学校里，Shiron 只有唯一一个朋友 Kevin，在其他同学都疏远，瞧不起他的时候，只有 Kevin 和他一起玩，并且告诉他只有自己表现得足够强硬才不会被别人认为软弱。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在第一个阶段 Shiron 经常去他们家，而 Juna 也把他当自己的孩子来看待，包括教他游泳，在月光下和他讲故事…但是 Shiron 有一个有毒瘾的母亲，在她的毒瘾没有发作的时候，她是爱 Shiron 的，但是当她毒瘾发作，就像变了一个人，甚至直接用狠话把他赶出了家。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;第一部分令我印象最深刻的片段是，当 Jnua 和 Shiron 的母亲在街上发生冲突之后，Shiron 回到家之后被毒瘾上来的母亲所叱骂，而当他来到 Juna 家的时候，他似乎已经知道了是 Juna，或者是 Juna 卖出去的毒品，让他母亲变成了这样，他离去，留下 Juna 无言而悔恨地颤抖。最后 Juna 颤抖的时候让人触动，这是深深的爱才会有的。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最爱他的妈妈在毒瘾发作的时候最恨他，而对他最好的 Juna 却是造成他母亲癫狂的罪魁祸首，Juna的内心收到了怎样的伤害我们无从知晓…接着就影片进入了青年时期。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;而青年时期他仍旧是被欺负的那个，在学校被同学欺负，在家母亲的癫狂也让他十分难受，而对他好的 Juna 也已经去世，唯一的港湾就只有慈母般的 Teresa，但是由于 Juna 已经去世，再去 Teresa 家里过夜被人说闲话，于是这最后的港湾也难以停靠。还好他还有唯一的朋友 Kevin，在那个无助的晚上，他去了 Kevin 所在的地方，在月夜下，他们的感情萌发。这是本片中唯一的“激情基情”的地方，但是表现得仍旧很克制。和其他人的评论一样，我也觉得这一段发展得有些太快了。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;但就在那的第二天，Kevin 就在被逼迫下，不得不背叛了 Shiron。遭受着 Kevin 的拳头，Shiron 不仅身体疼痛，他的心也在滴血，也正是因为 Kevin 参与了，Shiron 没有选择起诉他们。但是绝望造就力量，他的软弱似乎在一瞬间消失了，第二天他大步流星地走进了学校，抄起板凳就砸在了一直欺负他的人的身上。因为这个他被警察所带走，警车上的他和门口的 Kevin 四目对视，两个人的心情都很复杂…就这样，青年时期结束。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;而到了成年时期，Shiron 已经是一个精悍的毒贩，他头上戴着类似 Juna 的帽子，嘴上戴着金牙，脖子上挂着金项链，往日的懦弱一扫而光。在别人面前，他威风凛凛。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;即使是这么多年之后，他还是十分讨厌他的母亲，尽管他的母亲现在也已经没有毒瘾发作时那种暴躁的模样，但是他显然已经成熟，即使不愿意听母亲的话，他仍旧保持着耐心。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;之后他见到了多年未见的 Kevin，那个最后伤害了他的人，但同时也是他最爱的那个人。此时的 Kevin 也已经从良，成为了一名厨师，有了自己的孩子。而相反那个往日懦弱的 Shiron 却变成了强悍的毒贩。但他们的感情，在 Shiron 的感情爆发下，在两人长久凝视之下，再度复苏…</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;说实话，我不是很懂这部影片，一些情节比如童年时代 Shiron 回去洗澡的那一段我都不是很懂，不过整体的意境还是很不错的，虽然涉及到 LGBT 人群，黑人，毒品，但是整部影片却是十分克制，而且音乐也为整部影片增添了不少色彩。</p>
<h2 id="评分"><a href="#评分" class="headerlink" title="评分"></a>评分</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;7/10。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;虽然是奥斯卡影片，但这种不是我的菜…相比之下还是觉得《断背山》给我的感触更深，不过也许是因为我是中国人所以不是很了解他们的感受吧。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;整篇文章我又感觉各种不连贯，逻辑不通…因为实在没什么很深的感触…</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[重装系统之后必备的软件等]]></title>
      <url>https://blog.patrickcty.cc/2017/03/06/%E9%87%8D%E8%A3%85%E7%B3%BB%E7%BB%9F%E4%B9%8B%E5%90%8E%E5%BF%85%E5%A4%87%E7%9A%84%E8%BD%AF%E4%BB%B6%E7%AD%89/</url>
      <content type="html"><![CDATA[<h1 id="重装系统之后必备的软件等"><a href="#重装系统之后必备的软件等" class="headerlink" title="重装系统之后必备的软件等"></a>重装系统之后必备的软件等</h1><ol>
<li><p>Chrome</p>
<p> 一开始必须是Chrome，如果能登陆上Google账号，那就更是爽歪歪，直接把所有内容同步过来了！不过如何一开始就翻墙还是个玄学的问题，这次就是莫名其妙就能登进去了，然后进度一下拉快了超多啊！</p>
</li>
<li><p>Shadowsocks-qt5</p>
<p> 这个大家都懂的，<a href="https://github.com/shadowsocks/shadowsocks-qt5/wiki/%E5%AE%89%E8%A3%85%E6%8C%87%E5%8D%97" target="_blank" rel="external">安装方法</a>，如果是第一次配置，那么看<a href="https://aitanlu.com/ubuntu-shadowsocks-ke-hu-duan-pei-zhi.html" target="_blank" rel="external">这个</a>教程。</p>
</li>
</ol>
<p>最重要的两个软件已经搞定了，接下来就是基本的软件了。</p>
<ul>
<li><p>Git类</p>
<p>  人在江湖飘，哪能不用Git。</p>
<ul>
<li><p>安装git</p>
<blockquote>
<p>sudo apt-get install git</p>
</blockquote>
</li>
<li><p>安装SmartGit，在Linux下还是算是比较好用的git GUI，主要是提交的时候很方便</p>
</li>
<li>配置好GitHub的ssh，教程在<a href="http://blog.csdn.net/hustpzb/article/details/8230454/" target="_blank" rel="external">这里</a><blockquote>
<p>先生成密钥：ssh-keygen -t rsa -C “yourmail@mail.com”<br>再把~/.ssh/id_rsa.pub里面的内容复制到gitHub里面</p>
</blockquote>
</li>
</ul>
</li>
<li><p>IDE编辑器类</p>
<ul>
<li>Vim，用Linux能不用Vim？</li>
<li>VSCode，处理一些小文档就用这个了</li>
<li>PyCharm，一定是最好用的Python IDE</li>
<li>Clion，写ACM方便到哭，除了建立项目的时候</li>
<li>IntellJ，似乎是公认的最好的Java IDE，不过我很少写Java<br>  在这里顺便把JDK也安装了，因为很多软件的安装需要jdk的环境<blockquote>
<p>sudo apt-get install openjdk-8-jdk<br>  然后再.bashrc里面把JAVA_HOME设置了：export JAVA_HOME=”/usr/lib/jvm/java-8-openjdk-amd64/jre/bin”</p>
</blockquote>
</li>
</ul>
</li>
<li><p>写作类</p>
<ul>
<li>CmdMarkDown，写md真的好用，谁用谁知道</li>
<li>有道云笔记网页版，这个东西，同步以前的还是很好的，就是网页版总是喜欢跳到最开始，于是就不用它来写md了</li>
<li>hexo，<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="external">官方教程</a><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// 安装 Node.js</div><div class="line">curl https://raw.github.com/creationix/nvm/master/install.sh | sh</div><div class="line">nvm install stable</div><div class="line">// 安装 Hexo</div><div class="line">npm install -g hexo-cli</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<ul>
<li><p>系统工具类</p>
<ul>
<li>安装状态栏监视器，<a href="http://blog.chinaunix.net/uid-20564848-id-3415723.html" target="_blank" rel="external">教程</a>，逼格高，还可以看看系统占用等</li>
<li><p>安装zsh，<a href="http://macshuo.com/?p=676" target="_blank" rel="external">教程</a>，最好用的shell似乎没有什么争议</p>
<ul>
<li><p>安装zsh</p>
<blockquote>
<p>sudo apt-get install zsh<br>chsh -s /bin/zsh  // 切换默认shell’</p>
</blockquote>
</li>
<li><p>安装oh my zsh</p>
<blockquote>
<p>wget <a href="https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh" target="_blank" rel="external">https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh</a> -O - | sh</p>
</blockquote>
</li>
<li><p>安装字体补丁，下载<a href="https://github.com/powerline/fonts" target="_blank" rel="external">这个</a>之后解压./install.sh就可以了</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>其他必备软件</p>
<ul>
<li>微信，这个<a href="https://github.com/geeeeeeeeek/electronic-wechat/blob/master/README_zh.md" target="_blank" rel="external">链接</a>，不得不用啊，传文件还是需要</li>
<li>qq，暂时<a href="http://www.longene.org/forum/viewtopic.php?f=6&amp;t=30516" target="_blank" rel="external">这个</a>吧，虽然有时我会装不上</li>
<li>WPS，感觉比自带的libre要好用多了，至少排版还比较正常</li>
<li>网易云音乐，无需多说</li>
<li>搜狗输入法，这个有时候装上去会加载不出来，注销再登录应该就可以了</li>
<li>FileZilla，可能是最好用的FTP客户端</li>
</ul>
</li>
<li><p>主题美化类</p>
<p>  Ubuntu自带的主题太丑了…必须美化一下才能看…</p>
<ul>
<li><p>Unity-tweak-tool，定制系统不可或缺</p>
<blockquote>
<p>sudo apt-get install unity-tweak-tool</p>
</blockquote>
</li>
<li><p>然后下载一些好看的主题，比如</p>
<ul>
<li><a href="http://www.jcodecraeer.com/a/chengxusheji/chengxuyuan/2015/0923/3502.html" target="_blank" rel="external">Flatabulous</a></li>
<li><a href="https://linux.cn/article-3120-1.html" target="_blank" rel="external">Numix</a></li>
<li><a href="http://blog.topspeedsnail.com/archives/4663" target="_blank" rel="external">MacBuntu</a></li>
</ul>
</li>
<li>还可以修改系统左上角的字，教程在<a href="http://www.ubuntukylin.com/ukylin/forum.php?mod=viewthread&amp;tid=19161" target="_blank" rel="external">这里</a>，注意即使显示的是[Ubuntu 桌面]，在.po文件中还是要用英文</li>
</ul>
</li>
</ul>
<p>到这里，Ubuntu就又好用又好看了～写给我自己，希望在下次我不得不装系统的时候我已经知道怎么能快速的迁移环境…</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[那些严重拖慢做题进度的题以及遇到的坑5]]></title>
      <url>https://blog.patrickcty.cc/2017/03/06/%E9%82%A3%E4%BA%9B%E4%B8%A5%E9%87%8D%E6%8B%96%E6%85%A2%E5%81%9A%E9%A2%98%E8%BF%9B%E5%BA%A6%E7%9A%84%E9%A2%98%E4%BB%A5%E5%8F%8A%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%915/</url>
      <content type="html"><![CDATA[<h1 id="那些严重拖慢做题进度的题以及遇到的坑5"><a href="#那些严重拖慢做题进度的题以及遇到的坑5" class="headerlink" title="那些严重拖慢做题进度的题以及遇到的坑5"></a>那些严重拖慢做题进度的题以及遇到的坑5</h1><h2 id="1297-Children’s-Queue"><a href="#1297-Children’s-Queue" class="headerlink" title="1297 Children’s Queue"></a>1297 Children’s Queue</h2><blockquote>
<p>There are many students in PHT School. One day, the headmaster whose name is PigHeader wanted all students stand in a line. He prescribed that girl can not be in single. In other words, either no girl in the queue or more than one girl stands side by side. The case n=4 (n is the number of children) is like<br>FFFF, FFFM, MFFF, FFMM, MFFM, MMFF, MMMM<br>Here F stands for a girl and M stands for a boy. The total number of queue satisfied the headmaster’s needs is 7. Can you make a program to find the total number of queue with n children?</p>
</blockquote>
<p>分析：</p>
<p>这一题有两个坑，第一个是递推表达式特别难想，第二个就是结果特别大，就算用unsigned long long也是完全不行的…必须要自己构造大数模板…</p>
<p>题目的大意是女生不能落单，也就是说不能出现一个女生旁边都是男生。这是一个递推题于是就按照递推的思路来做：</p>
<ul>
<li>如果新加入一个男生，那没什么问题，a[n - 1]</li>
<li>如果新加入的是女生，那就麻烦了，必须前面最后是女生<ul>
<li>如果前面n-2合法，那么直接加入两个女生，当然是成立的，也就是a[n - 2]</li>
<li>如果前面n-2不合法，要加入两个女生才合法，那么结尾必定是MF，于是最后为MFFF，前面是什么都可以，就是a[n - 4]</li>
<li>至于为什么没出现a[n - 3]，那是因为当最后是FF的时候，如果合法的话倒数第二位是什么就无所谓了，但是如果不合法就要通过新加入的变得合法了</li>
</ul>
</li>
</ul>
<p>下面一个坑就是大数了，思想就是用多个数拼起来来代替一个数，就是用一个二维数组，第一维表示是第几个数，第二维中的每一个数据都代表数的一部分，不妨假设最大为9999，那么这个数就是由多个9999拼成的，再怎么大也不会再越界了。</p>
<p>先来一个非常完整的大数模板，实现了加减乘除输出等等，链接在<a href="http://blog.csdn.net/hackbuteer1/article/details/6595881" target="_blank" rel="external">这里</a></p>
<p>然后再看一下一个比较基础的具体的实现吧<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">int a[1005][105];</div><div class="line"></div><div class="line">void add(int n)</div><div class="line">&#123;</div><div class="line">    // k相当于进位数，同时在传递值的时候也暂时接受了加出来的数</div><div class="line">    int k = 0;</div><div class="line">    int i;</div><div class="line">    for (i = 1; i &lt;= 100; ++i)</div><div class="line">    &#123;</div><div class="line">        k += a[n - 1][i] + a[n - 2][i] + a[n - 4][i];</div><div class="line">        // 尾数留给a[n][j]</div><div class="line">        a[n][j] = k / 10000;</div><div class="line">        // 进位数传递下去</div><div class="line">        k /= 10000;</div><div class="line">    &#125;</div><div class="line">    // 如果数组的第二位足够大，那么到这里应该就不会有问题了</div><div class="line">&#125;</div><div class="line"></div><div class="line">void print(int n)</div><div class="line">&#123;</div><div class="line">    int i;</div><div class="line">    for (i = 100; i &gt;= 1; --i)</div><div class="line">    &#123;</div><div class="line">        if (a[n][i] != 0)</div><div class="line">            break;</div><div class="line">    &#125;</div><div class="line">    printf(&quot;%d&quot;, a[n][i]);  // 最开始的不用补0</div><div class="line">    for (i = i - 1; i &gt;= 1; --i)</div><div class="line">        printf(&quot;%04d&quot;, a[n][i]);  // 四位，不够的用0来补充</div><div class="line">    printf(&quot;\n&quot;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这种直接用一个变量来表示进位以及加起来结果的方法还是很巧妙的…当时我就感觉思路很乱于是就直接找模板了…</p>
<h2 id="1438-钥匙计数之一"><a href="#1438-钥匙计数之一" class="headerlink" title="1438 钥匙计数之一"></a>1438 钥匙计数之一</h2><blockquote>
<p>一把锁匙有N个槽，槽深为1，2，3，4。每锁匙至少有3个不同的深度且至少有1对相连的槽其深度之差为3。求这样的锁匙的总数。</p>
</blockquote>
<p>分析：</p>
<p>这是一道很让人蛋疼的题…因为情况太多太难想了…</p>
<p>先贴出来<a href="http://blog.csdn.net/travelalong/article/details/22321681" target="_blank" rel="external">参考出处</a></p>
<p>设one[i]为第一个槽为1总共有i个槽的情况，类似有two[i], three[i]…易得lock[i] = one[i] + … + four[i]</p>
<p>因为对称的原因，实际上one[i]和four[i]是相同的，同理two[i]和three[i]也是相同的。</p>
<p>先对one[i]进行讨论：</p>
<ul>
<li>如果第一个数对后面没有影响，那么就直接是lock[i - 1]</li>
<li>如果有影响<ul>
<li>那么第二个一定是4，这样才能让去掉第一个后就不合法，这时候一共有4^(i-2)种情况</li>
<li>但是又因为要合法，所以后面n-2不能全都是1，4，所以要减掉2^(i-2)</li>
<li>又因为去掉后不合法，所以要减去以4开头合法的情况，也就是four[i - 1]</li>
</ul>
</li>
</ul>
<p>总共为:</p>
<blockquote>
<p>one[i] = one[i-1] + two[i-1] + three[i-1] + four[i-1] + 4 ^ (i-2)  - one[i-1] -2^(i-2)</p>
</blockquote>
<p>再对two[i]讨论</p>
<ul>
<li>第一个数对后面没影响的话就和前面相同</li>
<li>有影响的话<ul>
<li>要想后面不合法那就只能是不满三个数了，而且因为加上去后合法，于是后面就全是1和4了，情况有2^(i-1)，但是不能全为1或4，于是要减去2</li>
</ul>
</li>
</ul>
<p>有：</p>
<blockquote>
<p>two[i] = 2 ^ (i - 1) - 2</p>
</blockquote>
<p>于是lock[i]有：</p>
<blockquote>
<p>lock[i] = 6 <em> one[i-1] + 8 </em> two[i-1] + 2 <em> 4^(i-2) + 2 </em> 2^(i-2) -4</p>
</blockquote>
<p>换成C语言就是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// 注意pow的类型要进行转换，不然可能因为精度报错</div><div class="line">one[i] = one[i - 1] + 2 * two[i - 1] + (long long)pow((double)4, i - 2) - (long long)pow((double)2, i - 2);</div><div class="line">        two[i] = 2 * one[i - 1] + 2 * two[i - 1] + (long long)pow((double)2, i - 1) - 2;</div><div class="line">        lock[i] = 2 * one[i] + 2 * two[i];</div></pre></td></tr></table></figure></p>
<h2 id="1480-钥匙计数之二"><a href="#1480-钥匙计数之二" class="headerlink" title="1480 钥匙计数之二"></a>1480 钥匙计数之二</h2><blockquote>
<p>一把钥匙有N个槽，2&lt;N&lt;26槽深为1，2，3，4,5,6。每钥匙至少有3个不同的深度且相连的槽其深度之差不得为5。求这样的钥匙的总数。 </p>
</blockquote>
<p>分析：</p>
<p>这个和前面那个只是改了一下，相当于逆向思维，所以加一点就可以了，然而还是有一点坑的。</p>
<p>还是和上面一样从one[i]到six[i]，因为是不得为5，正好和只要一个为5互补，所以只要按照前一题的做法再减一下就可以了。</p>
<p>one[i]和six[i]是对称的，其他的所有是对称的，lock[i]还是所有的和。</p>
<p>而我们要求的基数就是至少有三个不同深度的情况，一开始我是这样写的</p>
<blockquote>
<p>b[n] = 6 ^ n - 15 * 2 ^ n</p>
</blockquote>
<p>然而这里我把从头到尾都是一个数的情况多减了好多次，所以应该一个个的减掉</p>
<blockquote>
<p>b[n] = 6 ^ n - 15 * (2 ^ n - 2) - 6</p>
</blockquote>
<p>然后在和之前的结果一减就可以了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">// 因为最后的数很大，不得不祭出大杀器unsigned long long</div><div class="line">one[i] = one[i - 1] + 4 * two[i - 1] + (unsigned long long)pow((double)6, i - 2) - (unsigned long long)pow((double)2, i - 2);</div><div class="line">two[i] = 2 * one[i - 1] + 4 * two[i - 1] + (unsigned long long)pow((double)2, i - 1) - 2;</div><div class="line">lock[i] = 2 * one[i] + 4 * two[i];</div><div class="line">alllock[i] = (unsigned long long)pow((double)6, i) - 15 * (unsigned long long)pow((double)2, i) + 24;</div><div class="line">unsigned long long temp = alllock[i] - lock[i];</div></pre></td></tr></table></figure></p>
<p>然而即使使用了大杀器，最后一个还是越界了，但是既然他已经把最后的结果给你了，干脆直接输出（滑稽</p>
<h2 id="1466-计算直线的交点数"><a href="#1466-计算直线的交点数" class="headerlink" title="1466 计算直线的交点数"></a>1466 计算直线的交点数</h2><blockquote>
<p>平面上有n条直线，且无三线共点，问这些直线能有多少种不同交点数。<br>比如,如果n=2,则可能的交点数量为0(平行)或者1(不平行)。</p>
</blockquote>
<p>分析</p>
<p>一道dp题，然而要想出状态真的好难…我一开始完全无从下手…</p>
<p>设dp[i][j]为有i个锁孔的时候，j个交点数可不可能存在，为0的时候不可能，为1的时候可能</p>
<p>当d[m][n]为1的时候，如果有r条平行线，那么相对于d[m][n]有d[i][(i - r) <em> r + j]也为1，也就是多出了r条平行线就多出(i - r) </em> r个交点，每个平行线都与其他所有相交</p>
<p>我一开始是考虑有多组平行线，然而这样就要开N维数组，这种方法的话还是很巧妙的，忽视了平行线的组数，每次哦度是相对前一组再多加一组，可能和之前的一样，也可能不一样。</p>
<p>综上，一共有三层循环：</p>
<ul>
<li>i从0～n得到每个直线数对应的最终情况</li>
<li>r从0到i循环表示平行边的个数</li>
<li>k从0到可能最大的数，也就是n为20的时候n * (n - 1) / 2的值进行循环来得到所有交点数</li>
</ul>
<p>而输出的时候就之用循环到n * (n - 1) / 2，不用到20对应的最大值。.</p>
<p>贴一份代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">#include &lt;iostream&gt;</div><div class="line">#include &lt;cstdlib&gt;</div><div class="line">#include &lt;cstdio&gt;</div><div class="line">#include &lt;cmath&gt;</div><div class="line">#include &lt;cstring&gt;</div><div class="line">#include &lt;algorithm&gt;</div><div class="line">#include &lt;string&gt;</div><div class="line">#include &lt;sstream&gt;</div><div class="line">#include &lt;map&gt;</div><div class="line">#include &lt;vector&gt; </div><div class="line">#include &lt;set&gt;</div><div class="line">#include &lt;stack&gt;</div><div class="line">#include &lt;queue&gt;</div><div class="line"></div><div class="line">using namespace std;</div><div class="line">#define INF 0x3fffffff</div><div class="line">const int maxn = 10005;</div><div class="line"></div><div class="line">int main()</div><div class="line">&#123;</div><div class="line">	int dp[25][195];</div><div class="line">    memset(dp, 0, sizeof(dp));</div><div class="line">    for (int i = 0; i &lt;= 20; ++i)</div><div class="line">    &#123;</div><div class="line">        dp[i][0] = 1;</div><div class="line">        for (int j = 0; j &lt;= i; ++j)</div><div class="line">        &#123;</div><div class="line">            for (int k = 0; k &lt;= 190; ++k)</div><div class="line">                if (dp[j][k] == 1)</div><div class="line">                    dp[i][(i - j) * j + k] = 1;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    int n;</div><div class="line">    while (~scanf(&quot;%d&quot;, &amp;n))</div><div class="line">	&#123;</div><div class="line">		for (int i = 0; i &lt;= n * (n - 1) / 2; ++i)</div><div class="line">        &#123;</div><div class="line">            if (dp[n][i] == 1)</div><div class="line">            &#123;</div><div class="line">                if (i != 0)</div><div class="line">                    printf(&quot; &quot;);</div><div class="line">                printf(&quot;%d&quot;, i);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        printf(&quot;\n&quot;);</div><div class="line">	&#125;</div><div class="line">	return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>递推难起来真的是叫妈都没用了…动态规划则是一直都感觉不太通…好久没做手生了…</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[《Logan》]]></title>
      <url>https://blog.patrickcty.cc/2017/03/06/%E3%80%8ALogan%E3%80%8B/</url>
      <content type="html"><![CDATA[<h1 id="《Logan》"><a href="#《Logan》" class="headerlink" title="《Logan》"></a>《Logan》</h1><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这部电影，充斥着悲伤。和平常令人激动人心的超级英雄电影不一样，这部电影，充满着无力以及英雄老矣的悲壮。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2029年，变种人已经像小儿麻痹症一样，被从出生的时候开始就遏止了，而存活下来的变种人，也都是垂垂老矣，其中就只剩下金刚狼，X教授，追踪者卡利班。而这时候地金刚狼的恢复能力已经很弱了，身体也远远不如当日了，甚至走路都是一瘸一拐，靠着为别人开车而谋生，甚至连和几个偷车贼动手都很费力。而X教授也不好，他患上了老年痴呆症，时不时会发病，靠着吃药来遏制病情，被“关在”废弃的水库里，靠着罗根赚的钱活着。而《天启》中邪恶一方的卡利班，在这里也不再为金钱卖命了，但是他患上了白化病，照顾着X教授过着暗无天日的生活。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;而一个墨西哥女人和一个小女孩的出现，打破了了罗根“平静”的生活，原来小女孩是被改造出来的变种人，有着金刚狼的基因，是“女金刚狼”，当罗根知道并好不容易接受这些后，他决定保护她，送她去“伊甸园”。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;面对着追杀，罗根他们只能一路逃跑，而罗根和X教授也不是以前那么战无不胜了，面对追杀，他们不能把敌人打得落花流水而扬长而去了，连伊甸园也只是漫画书上的虚构的地点，除了绝望，还是绝望。在路途中，X教授在睡醒的时候被金刚狼的复制人X-24杀死，而这个晚上，是X教授长时间以来睡得最好的晚上，X教授离世。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;而卡利班在一开始就被抓到，被迫为敌人导路，但是他总是有意晚一步来保护金刚狼他们，最后在敌人疏忽的时候引爆了手榴弹，卡利班战死。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;而罗根则一直顽强地活了下来，和劳拉一起，到了”伊甸园“——集合地。最后在发现劳拉他们被围剿的时候注射了药水，用尽最后的力气，救下了他们，其中值得注意的是他最后是用枪杀死了博士和另一个人，这时候他已经不能像以前那样轻松地杀死敌人了…最后在与X-24的战斗中伤势过重而死去了，金刚狼，战死。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;随着金刚狼的死去，老一辈的变种人已经悉数死去，变种人的时代也正式落下帷幕，真的让人唏嘘不已，曾近变种人是那么的辉煌，他们一个个是那么的勇敢善战，看过前几部再看这一部，真的是浓浓的悲伤，既然最后还是得去世，那么战死这个结局也不算太差吧。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一个谜团就是为什么变种人会落到现在这个地步，电影中说的是X教授在6年前的维斯切斯特（也就是X教授的学校所在地）酿造事故，造成600人伤亡，变种人可能也是在这个时候遭受重创直到灭亡吧。在看电影的时候我一直想罗根插入这一段的回忆，可惜只是微微的带过…希望另外出一部电影或者其他的形式来进行说明吧…不然真的感觉很不好啊…</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;金刚狼的绝望，甚至让他有些自暴自弃了，寻求死亡，酗酒…而X教授则被困在破旧的水库里，过着艰难的生活…英雄不老，只是凋零！至少在生命的最后，他们重新感受到了生命的意义，这样或许也不算太糟糕吧。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这部电影真的是情怀满满，而且剧情也不耐，特别是对于X战警真爱粉…</p>
<h2 id="评分"><a href="#评分" class="headerlink" title="评分"></a>评分</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;9/10。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;悲壮…</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[《海洋奇缘》]]></title>
      <url>https://blog.patrickcty.cc/2017/03/06/%E3%80%8A%E6%B5%B7%E6%B4%8B%E5%A5%87%E7%BC%98%E3%80%8B/</url>
      <content type="html"><![CDATA[<h2 id="开始之前"><a href="#开始之前" class="headerlink" title="开始之前"></a>开始之前</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;知道这部电影还是因为在知乎日报上看到了对这篇电影的一些技术分析。这部电影大量的场景都是在海上，要想拍出海，很简单，要想在动画电影中表现海，似乎也没那么难，但是在3D动画中要想接近真实的表现海，那难度就不是一般的大了。之前也看到过志华撸出来的波纹，知道了他的那个波纹的难度，而对于有一个小时左右在海上的电影，这难度就可想而知了。而且影片中难度大的还不只是海，还有毛伊身上的纹身，鸟身上的羽毛，这些都不是简单就能搞定的。知道了这部电影的技术含量之后，我就下定决心要找个机会去看看～</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在一个星期快结束的时候，我终于决定把这部电影拿出来了～</p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;不得不说这部电影真的很好看～一开始在岛上对主角的描写就把我吸引住了，特别是一开始女主小时候在捡贝壳的时候海自动退让了——一个有灵魂的海！这个设定真的让我眼前一亮。然而这之后主角被爸爸抱走，经历的那一切就像梦一般留在了主角的记忆里，但是出海的念头却从未消散。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;之后主角慢慢长大，对海也有很深的执念，但是在父亲一次次的阻拦下，以及酋长女儿这个身份的约束下，她一直没能成功出海。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;但是收到很久之前毛伊偷特菲堤之心地影响，黑暗之力渗透到了主角的岛上，岸边很难捉到鱼了。这时候出海的念头又出现了，但仅仅只是出海捕鱼，然而在出海的途中，遇到了巨浪，不仅船翻了，主角和小猪还险些丧命，主角也因此放弃了出海的念头，想要去安心地当个酋长。但是这一切都被奶奶看见了，奶奶不仅带她见识了他们的祖先的出海所用的船只，还把多年以前的特菲堤之心交给了主角，主角也终于坚定了自我，然而就在这之后不久，奶奶就去世了，主角在奶奶的鼓励下终于出海去寻找毛伊归还特菲堤之心…这个剧情不仅熟悉，最后这部分还很扯…不过这些倒不影响观看…</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;后面就是在路途中找到毛伊，然后两个人相互影响，主角给毛伊带来希望与信心，毛伊让女主变得勇敢并且航海技术也提高。虽然中途也有过矛盾有过迷茫不过最后他们还是战胜了螃蟹怪，到达了特菲堤。没错这部分剧情也很熟悉…</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在与恶卡对战地时候，他们占了下风，并且毛伊的鱼钩接近损坏，由此毛伊丧失信心离开，女主一个人凭着智慧绕过了恶卡，然而当恶卡袭击女主地千钧一发之际，毛伊回了…没错这部分剧情也很熟悉…然后毛伊又是与恶卡一通大战。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;但是当主角到达特菲堤时，发现它消失了，原来恶卡就是特菲堤变化而成，这里倒是挺出人意料，然后女主感动了恶卡，并成功归还了特菲堤之心，于是毛伊和女主过上了幸福的生活。停停停，于是恶卡变回了女神特菲堤，岛上又重新恢复了生机，而毛伊也得到了女神给的鱼钩——他之前的那个在与恶卡地对战中损坏了，女主又带领族人开启了大航海时代（似乎没什么不对。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;影片的剧情真的十分老套…不过看起来倒没有太多不好的感觉，但是那些场景做得真的让人没话说。主角的形象也刻画得十分到位，总体还是很让人过瘾的。</p>
<h2 id="评分"><a href="#评分" class="headerlink" title="评分"></a>评分</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;8/10。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;剧情老套，特效好评。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[再次部署Flask app]]></title>
      <url>https://blog.patrickcty.cc/2017/03/02/%E5%86%8D%E6%AC%A1%E9%83%A8%E7%BD%B2Flask-app/</url>
      <content type="html"><![CDATA[<h1 id="再次部署Flask-app"><a href="#再次部署Flask-app" class="headerlink" title="再次部署Flask app"></a>再次部署Flask app</h1><p>之前成功用Nginx+uWSGI部署了Flask app，但是之后想升级内容然而uWSGI出现奇怪的错误一直没办法解决。拖了好久之后还是决定再次重装系统重头搞一遍，顺便再加深一下相关的知识。</p>
<h2 id="配置MySQL"><a href="#配置MySQL" class="headerlink" title="配置MySQL"></a>配置MySQL</h2><p>MySQL在安装后一般是没有密码的，我用的这台主机已经装好了MySQL，但是密码是一个随机生成的，所以也需要再次配置。</p>
<p><a href="https://segmentfault.com/a/1190000002498643" target="_blank" rel="external">参考文章</a></p>
<p>默认的账户在<code>/etc/mysql/debian.cnf</code>中，登录就用里面的账号和密码来登录。因为里面账号和密码都是明文的，所以要用root来查看。</p>
<p>接下来就是修改root的密码了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">use mysql;</div><div class="line">set password for &apos;root&apos;@&apos;localhost&apos; = password(&apos;yourpasswprd&apos;);</div></pre></td></tr></table></figure></p>
<p>搞定之后就创建相应的数据库<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">create database jnugeek default character set utf8;</div></pre></td></tr></table></figure></p>
<p>后面的半句是为了避免中文乱码</p>
<p>顺便再把MySQL的Python驱动装了吧，当初这里也是一个大坑<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install libmysqlclient-dev</div><div class="line">sudo pip3 install mysqlclient</div></pre></td></tr></table></figure></p>
<p>OK，这样数据库的内容就搞定了。然后大型的项目的话MySQL还是比较靠谱的选择，SQLite的话可能有点问题，于是就选择MySQL了。</p>
<h2 id="把代码上传到服务器上"><a href="#把代码上传到服务器上" class="headerlink" title="把代码上传到服务器上"></a>把代码上传到服务器上</h2><p>还是用git比较方便。</p>
<p>有的服务器没装git，那就先装一个git<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install git</div></pre></td></tr></table></figure></p>
<p>然后用git clone把代码拷贝到本地，注意服务器端没有公钥私钥，所以拷贝的时候用https，直接输入账号和密码。</p>
<h2 id="配置好代码运行的环境"><a href="#配置好代码运行的环境" class="headerlink" title="配置好代码运行的环境"></a>配置好代码运行的环境</h2><h2 id="virtualenv"><a href="#virtualenv" class="headerlink" title="virtualenv"></a>virtualenv</h2><p>Python的虚拟环境，可以隔离开各个项目，使得同一台服务器同时运行多个版本的Python应用成为可能<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install python3-pip</div><div class="line">sudo pip3 install virtualenv</div></pre></td></tr></table></figure></p>
<p>安装好了之后初始化，进入虚拟环境<br>在项目根目录中运行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">virtualenv jnugeek</div><div class="line">source jnugeek/bin/activate</div></pre></td></tr></table></figure></p>
<p>这样就建立并进入了一个叫jnugeek的虚拟环境</p>
<p>需要注意的就是如果激活了虚拟环境，那么下载模块的时候就不需要root权限了</p>
<h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install -r requirements.txt</div></pre></td></tr></table></figure>
<p>项目中一般都有requirements.txt这个用来标志所需模块的文件，当然在本地创建这个文件也是很方便的事<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip freeze &gt; requirements.txt</div></pre></td></tr></table></figure></p>
<h3 id="初始化应用"><a href="#初始化应用" class="headerlink" title="初始化应用"></a>初始化应用</h3><p>先把那几个环境变量设置了<br>在～/.bashrc中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">export MAIL_ACCOUNT = youraccount</div><div class="line">...</div></pre></td></tr></table></figure></p>
<p>然后再把数据库的表建了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">./entry.py db init</div><div class="line">./entry.py db migrate</div><div class="line">./entry.py db upgrade  // 不要忘...不然就连表都没建立...</div></pre></td></tr></table></figure></p>
<p>到这里没有什么问题的话就可以跑起来了，当然虽然flask自带有web服务器，但是Flask毕竟是一个Web框架，自带的服务器只是为了方便调试，放在生产环境的话就要用更高效的选择了。而用C写的uWSGI无疑是一个很好的选择。</p>
<h2 id="uWSGI配置"><a href="#uWSGI配置" class="headerlink" title="uWSGI配置"></a>uWSGI配置</h2><p>WSGI的话我还不是很理解，不过这里的uWSGI是一个高性能http服务器，用来和Python程序交换。</p>
<p>安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install uwsgi</div></pre></td></tr></table></figure></p>
<p>配置<br>在项目根目录创建config.ini的uWSGI的配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">[uwsgi]</div><div class="line">master = true</div><div class="line">home = venv</div><div class="line">wsgi-file = entry.py</div><div class="line">callable = app  </div><div class="line">socket = :5000</div><div class="line">processes = 4</div><div class="line">threads = 2</div><div class="line">buffer-size = 32768</div></pre></td></tr></table></figure></p>
<p>其中callable就是Flask的实例,wsgi-file就是启动的脚本文件</p>
<p>配置好了之后使用<code>uwsgi config.ini</code>来运行</p>
<p>下面是一个成功的例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">*** Starting uWSGI 2.0.13.1 (64bit) on [Sun Oct  2 15:44:11 2016] ***</div><div class="line">compiled with version: 4.8.4 on 01 October 2016 16:15:02</div><div class="line">os: Linux-4.4.0-38-generic #57~14.04.1-Ubuntu SMP Tue Sep 6 17:20:43 UTC 2016</div><div class="line">nodename: ubuntu-512mb-sgp1-01</div><div class="line">machine: x86_64</div><div class="line">clock source: unix</div><div class="line">detected number of CPU cores: 1</div><div class="line">current working directory: /home/david/myapp</div><div class="line">detected binary path: /home/david/myappenv/bin/uwsgi</div><div class="line">!!! no internal routing support, rebuild with pcre support !!!</div><div class="line">*** WARNING: you are running uWSGI without its master process manager ***</div><div class="line">your processes number limit is 1824</div><div class="line">your memory page size is 4096 bytes</div><div class="line">detected max file descriptor number: 1024</div><div class="line">lock engine: pthread robust mutexes</div><div class="line">thunder lock: disabled (you can enable it with --thunder-lock)</div><div class="line">uwsgi socket 0 bound to TCP address 128.199.97.37:8080 fd 3</div><div class="line">Python version: 2.7.6 (default, Jun 22 2015, 18:01:27)  [GCC 4.8.2]</div><div class="line">*** Python threads support is disabled. You can enable it with --enable-threads ***</div><div class="line">Python main interpreter initialized at 0x16e99b0</div><div class="line">your server socket listen backlog is limited to 100 connections</div><div class="line">your mercy for graceful operations on workers is 60 seconds</div><div class="line">mapped 72760 bytes (71 KB) for 1 cores</div><div class="line">*** Operational MODE: single process ***</div><div class="line">WSGI app 0 (mountpoint=&apos;&apos;) ready in 0 seconds on interpreter 0x16e99b0 pid: 11596 (default app)</div><div class="line">*** uWSGI is running in multiple interpreter mode ***</div><div class="line">spawned uWSGI worker 1 (and the only) (pid: 11596, cores: 1)</div></pre></td></tr></table></figure>
<p>如果没有报错的话就是可以的，但是会有一些比较坑爹的错误</p>
<blockquote>
<p>!!! no internal routing support, rebuild with pcre support !!!</p>
</blockquote>
<p>这个是因为pcre没弄好，一般去掉缓存重装就可以了，-I的作用是重装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install uwsgi -I --no-cache-dir</div></pre></td></tr></table></figure></p>
<blockquote>
<p>callable not found</p>
</blockquote>
<p>这个可能是因为没有导入callable</p>
<p>但是！！！只配置好了uWSGI是不行的，uWSGI只负责后端，还需要一个前端的http服务器，详情看<a href="https://my.oschina.net/u/877567/blog/201577" target="_blank" rel="external">这里</a></p>
<p>摘录一段</p>
<blockquote>
<p>uwsgi 实际上也是一个 http 服务器，只不过它只面向 python 网络应用程序。虽然 uwsgi 也是 http 服务器，但是却不能直接使用它部署 python web 应用程序，否则会出错。</p>
<p>在本文中，uwsgi 所扮演的的角色是后端 http 服务器，nginx 扮演的角色是前端 http 服务器，hello.py 是客户端应用程序。 用户从网页浏览器中发出请求，nginx 服务器收到请求后，会通过它的 uwsgi 模块将用户的请求转发给 uwsgi 服务器，uwsgi 服务器处理完毕后将结果返回给 nginx，浏览器将最终的结果展现给用户。</p>
</blockquote>
<p>uWSGI好是好，但是要是它万一断了，或者出问题了怎么办？要是有这样的一个程序可以自动监控运行uWSGI那岂不是美滋滋，而supervisor就是这样的程序。</p>
<h2 id="supervisor配置"><a href="#supervisor配置" class="headerlink" title="supervisor配置"></a>supervisor配置</h2><p>安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install supervisor</div></pre></td></tr></table></figure></p>
<p>在/etc/supervisor/conf.d/下建立一个配置文件sp.conf<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">[program:jnugeek] </div><div class="line"># 启动命令入口 </div><div class="line">command=/home/ubuntu/JNUGeek/jnugeek/bin/uwsgi /home/ubuntu/JNUGeek/config.ini            </div><div class="line"># 命令程序所在目录 </div><div class="line">directory=/ubuntu/JNUGeek</div><div class="line"># 运行命令的用户名 </div><div class="line">user=ubuntu</div><div class="line">autostart=true</div><div class="line">autorestart=true</div><div class="line"># 日志地址 这个还是很有用的，可以查看出现的错误</div><div class="line">stdout_logfile=/home/ubuntu/JNUGeek/logs/uwsgi_supervisor.log</div></pre></td></tr></table></figure></p>
<p>启动/重启/查看状态命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo service supervisor start/restart/stats</div></pre></td></tr></table></figure></p>
<p>接下来就是Nginx了</p>
<h2 id="Nginx配置"><a href="#Nginx配置" class="headerlink" title="Nginx配置"></a>Nginx配置</h2><p>这部分配置坑也比较多，待会一一道来。</p>
<p>安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install nginx</div></pre></td></tr></table></figure></p>
<p>直接修改配置文件<code>/etc/nginx/sites-available/default</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">server &#123; </div><div class="line">  listen 80; </div><div class="line">  listen [::]:80 ipv6only=on default_server;</div><div class="line">  server_name X.X.X.X; # 公网地址 </div><div class="line">  rewrite ^(.*)$  https://$host$1 permanent;  # 把http请求强制转换到https</div><div class="line">&#125;</div><div class="line"></div><div class="line"># 配置https</div><div class="line">server &#123;</div><div class="line">    # ssl参数</div><div class="line">    listen              443;</div><div class="line">    server_name         example.com;</div><div class="line">    ssl on;</div><div class="line">    # 证书文件，这个和下面的私钥要自己下载放在服务器里面</div><div class="line">    ssl_certificate     example.com.crt;</div><div class="line">    # 私钥文件</div><div class="line">    ssl_certificate_key example.com.key;</div><div class="line">    ssl_protocols       TLSv1 TLSv1.1 TLSv1.2;</div><div class="line">    ssl_ciphers         HIGH:!aNULL:!MD5;</div><div class="line">    # 项目相关的内容</div><div class="line">    location / &#123; </div><div class="line">    include uwsgi_params;</div><div class="line">    uwsgi_pass 127.0.0.1:5000; # 指向uwsgi 所应用的内部地址,所有请求将转发给uwsgi 处理 </div><div class="line">    uwsgi_param UWSGI_PYHOME /home/ubuntu/JNUGeek/jnugeek; # 指向虚拟环境目录 </div><div class="line">    uwsgi_param UWSGI_CHDIR /home/ubuntu/JNUGeek; # 指向网站根目录 </div><div class="line">    uwsgi_param UWSGI_SCRIPT entry:app; # 指定启动程序</div><div class="line">    uwsgi_read_timeout 100; </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上面的需要注意的是，http请求默认是到80端口的，然而既然已经有了https当然首选https，rewrite就是把http的请求导向了https。Nginx配置https<a href="https://aotu.io/notes/2016/08/16/nginx-https/" target="_blank" rel="external">参考文章</a>，注意对于不同的端口，是可以写到一起的，也可以不写到一起，当然我这里是因为要把http重定向到https，如果写在一起就没办法实现了，贸然加入rewrite只会导致无限重定向（说起来都是眼泪）。强制转换的<a href="http://blog.csdn.net/wzy_1988/article/details/8549290" target="_blank" rel="external">参考文章</a></p>
<p>必须要有的参数就是：</p>
<ul>
<li>listen 监听的端口</li>
<li>server_name 主机名，域名</li>
</ul>
<p>可选的参数有：<br>location 里面包含了项目的信息，这里是直接把uWSGI给包含进去了，让前后端的服务器进行了无缝对接。</p>
<p>最后，server可以有多个，也可以相互独立，必须要有某些参数，不然监听什么呢。</p>
<p>写完了当然要测试一下是不是正确的了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo nginx -t</div></pre></td></tr></table></figure></p>
<p>在哪里查看错误日志呢？</p>
<blockquote>
<p>/var/log/nginx/error.log</p>
</blockquote>
<p>其中这几天遇到了</p>
<blockquote>
<p>2015/12/29 12:33:37 [emerg] 24489#0: bind() to 0.0.0.0:80 failed (98: Address already in use)<br>2015/12/29 12:33:37 [emerg] 24489#0: still could not bind()</p>
</blockquote>
<p>这里有一个坑就是nginx先监听了ipv4的80端口之后又监听了ipv6的80端口，于是就重复占用了。更加坑人的是你去看了端口占用它又把80端口释放了。来源在<a href="http://blog.csdn.net/yusiguyuan/article/details/20565337" target="_blank" rel="external">这里</a></p>
<p>解决方法就是<br>修改<code>listen [::]:80 default_server;</code>为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">listen [::]:80 ipv6only=on default_server;</div></pre></td></tr></table></figure></p>
<p>然而这样我的Nginx还是fail，结果重启主机解决问题…</p>
<p>上面的都搞定了之后就可以愉快的启动服务来查看自己的app了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo service supervisor start</div><div class="line">sudo service nginx restart</div></pre></td></tr></table></figure></p>
<p><a href="http://www.jianshu.com/p/84978157c785" target="_blank" rel="external">参考文章</a></p>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>到此，部署成功，https也搞定了，然而不知道为什么CSS貌似没加载出来…没想到最后败在了CSS上…卒。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[《比利林恩的中场战事》]]></title>
      <url>https://blog.patrickcty.cc/2017/02/26/%E3%80%8A%E6%AF%94%E5%88%A9%E6%9E%97%E6%81%A9%E7%9A%84%E4%B8%AD%E5%9C%BA%E6%88%98%E4%BA%8B%E3%80%8B/</url>
      <content type="html"><![CDATA[<h1 id="《比利林恩的中场战事》"><a href="#《比利林恩的中场战事》" class="headerlink" title="《比利林恩的中场战事》"></a>《比利林恩的中场战事》</h1><h2 id="开始之前"><a href="#开始之前" class="headerlink" title="开始之前"></a>开始之前</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一个慵懒的早晨和电影更搭哦～</p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;知道这部电影是因为它采用了电影界最“激进”科技，史无前例的120FPS，带来的观影体验是革命性的，据说会不自觉的把自己代入故事之中，但是全世界也只有五家影院能做到这个效果，很遗憾没有机会看到，不过现在终于有机会观看这部电影，不知道抛开了技术本身实际的体验是怎么样的？这是我开始之前的疑问。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;影片的主角当然是比利林恩，他为了报复抛弃姐姐的人而去破坏他的车，然后靠入伍来作为行为的惩罚。但是刚开始他并不被队友看好，因为在一起撞车事故被惩罚时他说出了他入伍的理由，于是赢得了队友，特别是“蘑菇”的信任。但是之后的一次战役中，蘑菇独自突进被敌人伤害到并抓住，他为了去救他而挺身而出，这个镜头被摄像头捕捉到了，并传回了国内让人们知道了战争的真实性并且让他和B班成为了英雄。但是在和敌人肉搏的时候，蘑菇没挺过来去世了。之后他们回到了国内…</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;回来的这段日子B班被当成了玩具到处走秀，而比利也在战争的“中场休息”中遇到了新的“战事”。他陷入了姐姐的劝他回家以及回战场之间的迷茫，但是随着中场表演的进行，他在烟火，灯光的光怪陆离中回想起战场的情景，找回了自我。最后在“蘑菇”面前，他坚定了自己的决心。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这部电影有比较讽刺的意味，讽刺了那些没有经历过战争却又自以为是的群众，讽刺了那些想要赚钱又冠冕堂皇的商人，讽刺了军人的浮躁(不确定？)。但是我总感觉他们的功劳被放大，他们的形象被神化。好在的是他和班长最后没有被浮华诱惑，他们又回到了战场。可能是因为我之前看了《血战钢锯岭》，这两部战争的惨烈程度完全不是一个级别的…</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;情节感觉没多少好说的，但是整个看下来，却有很充实的感觉，因为主角的感情表现得很充沛，如果看完全版的相必更震撼，叙事手法也很棒，在中场表演中穿插着回忆，还是很值得一看的～</p>
<h2 id="评分"><a href="#评分" class="headerlink" title="评分"></a>评分</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;8/10。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;勇敢的创新很值得鼓励，内容也挺棒的～很期待李安的下一部电影！</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[C++实用函数]]></title>
      <url>https://blog.patrickcty.cc/2017/02/23/C-%E5%AE%9E%E7%94%A8%E5%87%BD%E6%95%B0/</url>
      <content type="html"><![CDATA[<h2 id="sort"><a href="#sort" class="headerlink" title="sort()"></a>sort()</h2><ul>
<li>来自algorithm</li>
<li>包含三个参数<br>1.数组名（开始的指针）<br>2.数组名+元素个数（结束的指针）<br>3.判断排序规则的函数（布尔，默认为从小到大排序）</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">bool cmp(int a, int b)</div><div class="line">&#123;</div><div class="line">    return a &gt; b;  // 变为从大到小 </div><div class="line">&#125;</div><div class="line"></div><div class="line">//example</div><div class="line">int a[100];</div><div class="line">for (int i = 0; i &lt; 100; ++i)</div><div class="line">    a[i] = i;</div><div class="line">sort(a, a + 100, cmp);  // cmp可省略，省略就为从小到大排序</div></pre></td></tr></table></figure>
<h2 id="qsort"><a href="#qsort" class="headerlink" title="qsort()"></a>qsort()</h2><ul>
<li>来自cstdlib</li>
<li>包含四个参数<br>1.数组名（开始的指针）<br>2.数组名+元素个数（结束的指针）<br>3.元素占用的空间（便于设置辅助空间）<br>4.判断排序规则的函数（布尔，默认为从小到大排序）</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">bool cmp(int a, int b)</div><div class="line">&#123;</div><div class="line">    return a &gt; b;  // 变为从大到小 </div><div class="line">&#125;</div><div class="line"></div><div class="line">//example</div><div class="line">int a[100];</div><div class="line">for (int i = 0; i &lt; 100; ++i)</div><div class="line">    a[i] = i;</div><div class="line">sort(a, a + 100, sizeof(int), cmp);  // cmp可省略，省略就为从小到大排序</div></pre></td></tr></table></figure>
<h2 id="sprintf"><a href="#sprintf" class="headerlink" title="sprintf"></a>sprintf</h2><ul>
<li>来自cstdio</li>
<li>作用是把格式化数据读入字符串</li>
<li>参数有三个</li>
</ul>
<ol>
<li>字符数组名</li>
<li>读入格式化数据的种类</li>
<li>读入的数据</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">char str[50];</div><div class="line">int a = 1000;</div><div class="line">sprintf(str, &quot;%d&quot;, a);</div></pre></td></tr></table></figure>
<p>这个可以方便的把整数转化为字符串</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[那些严重拖慢做题进度的题以及遇到的坑4]]></title>
      <url>https://blog.patrickcty.cc/2017/02/23/%E9%82%A3%E4%BA%9B%E4%B8%A5%E9%87%8D%E6%8B%96%E6%85%A2%E5%81%9A%E9%A2%98%E8%BF%9B%E5%BA%A6%E7%9A%84%E9%A2%98%E4%BB%A5%E5%8F%8A%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%914/</url>
      <content type="html"><![CDATA[<h1 id="那些严重拖慢做题进度的题以及遇到的坑4"><a href="#那些严重拖慢做题进度的题以及遇到的坑4" class="headerlink" title="那些严重拖慢做题进度的题以及遇到的坑4"></a>那些严重拖慢做题进度的题以及遇到的坑4</h1><p>杭电207X &amp;&amp; 208X</p>
<h2 id="A1"><a href="#A1" class="headerlink" title="A1 = ?"></a>A1 = ?</h2><blockquote>
<p>有如下方程：Ai = (Ai-1 + Ai+1)/2 - Ci (i = 1, 2, 3, …. n).<br>若给出A0, An+1, 和 C1, C2, …..Cn.<br>请编程计算A1 = ?</p>
</blockquote>
<p>分析：</p>
<p>这是一个数学问题，然而这个递推却很坑爹，Ai与Ai-1和Ai-2都有关，然而初始条件却要你求A1，看了解答之后才知道怎么做…自己高中数学功力还是一般般啊…</p>
<p>以下来源于网上</p>
<blockquote>
<p>因为：Ai=(Ai-1+Ai+1)/2 - Ci,<br>      A1=(A0  +A2  )/2 - C1;<br>      A2=(A1  +  A3)/2 - C2 , …<br>=&gt;    A1+A2 = (A0+A2+A1+A3)/2 - (C1+C2)<br>=&gt;    A1+A2 =  A0+A3 - 2(C1+C2)<br>同理可得：<br>      A1+A1 =  A0+A2 - 2(C1)<br>      A1+A2 =  A0+A3 - 2(C1+C2)<br>      A1+A3 =  A0+A4 - 2(C1+C2+C3)<br>      A1+A4 =  A0+A5 - 2(C1+C2+C3+C4)<br>      …<br>      A1+An = A0+An+1 - 2(C1+C2+…+Cn)<br>—————————————————– 左右求和<br>     (n+1)A1+(A2+A3+…+An) = nA0 +(A2+A3+…+An) + An+1 - 2(nC1+(n-1)C2+…+2Cn-1+Cn) </p>
<p>=&gt;   (n+1)A1 = nA0 + An+1 - 2(nC1+(n-1)C2+…+2Cn-1+Cn) </p>
<p>=&gt;   A1 = [nA0 + An+1 - 2(nC1+(n-1)C2+…+2Cn-1+Cn)]/(n+1) </p>
</blockquote>
<p>这个解法的巧妙之处就在于多项相加的时候，两边都有A2～An，而多出来的A1和An+1正好是要求的和知道的，于是就可以直接写出答案。然而要发现规律不难但是要想到把它们加起来就有点难了…</p>
<h2 id="选课时间"><a href="#选课时间" class="headerlink" title="选课时间"></a>选课时间</h2><blockquote>
<p>又到了选课的时间了，xhd看着选课表发呆，为了想让下一学期好过点，他想知道学n个学分共有多少组合。你来帮帮他吧。（xhd认为一样学分的课没区别）</p>
</blockquote>
<p>分析：</p>
<p>这一题一看就觉得应该是一个动态规划，但是不是求最优，而是求数量最多，于是就有些懵逼了。</p>
<p>先上代码吧<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">for (int i = 0; i &lt; k; ++i)</div><div class="line">        &#123;</div><div class="line">            // 每次输入新课的时候循环</div><div class="line">            int a, b;</div><div class="line">            scanf(&quot;%d %d&quot;, &amp;a, &amp;b);</div><div class="line"></div><div class="line">            // 对于每门课，都有相当于一个背包</div><div class="line">            for (int m = n; m &gt;= 1; --m)</div><div class="line">            &#123;</div><div class="line">                for (int l = 1; l &lt;= b; ++l)</div><div class="line">                &#123;</div><div class="line">                    // 不同的是只要新装进去就加上种类</div><div class="line">                    // 好难想到</div><div class="line">                    // 这个种类真的不好想</div><div class="line">                    if (m - l * a &gt;= 0)</div><div class="line">                        d[m] += d[m - l * a];</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div></pre></td></tr></table></figure></p>
<p>分析：</p>
<p>因为正好是输入的每门课，所以就直接跟着课来循环，就不用等输入完之后再进入循环。<br>对于每门课，可以看作是一个背包，背包容量为n也就是总学分数。这时候就还是要从容量为n到1进行一个循环，里面的循环就是对课程的数量，到这里还是和0-1背包是一样的，下面就是重点了</p>
<blockquote>
<p>如果还能装得下，那么就在之前的基础上加上了加进去的数量对应的种类，也就是说如果学分为m，则d[m]是基于d[m-1]到d[0]所有的情况。<br>这是这个的一个难点，也是和平常的动态规划不一样的地方。</p>
</blockquote>
<h2 id="找单词"><a href="#找单词" class="headerlink" title="找单词"></a>找单词</h2><blockquote>
<p>假设有x1个字母A， x2个字母B,….. x26个字母Z，同时假设字母A的价值为1，字母B的价值为2,….. 字母Z的价值为26。那么，对于给定的字母，可以找到多少价值&lt;=50的单词呢？单词的价值就是组成一个单词的所有字母的价值之和，比如，单词ACM的价值是1+3+14=18，单词HDU的价值是8+4+21=33。(组成的单词与排列顺序无关，比如ACM与CMA认为是同一个单词）。</p>
</blockquote>
<p>分析：</p>
<p>这是一道和上面几乎一样的踢，但是由于一些坑爹的原因，运行结果一直都是错的…</p>
<p>还是先上代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line">#include&lt;iostream&gt;</div><div class="line">#include&lt;cstdlib&gt;</div><div class="line">#include&lt;cstdio&gt;</div><div class="line">#include&lt;cmath&gt;</div><div class="line">#include&lt;cstring&gt;</div><div class="line">#include &lt;algorithm&gt;</div><div class="line">#include &lt;map&gt;</div><div class="line"></div><div class="line">using namespace std;</div><div class="line"></div><div class="line">const int maxn = 30;</div><div class="line">int a[maxn];  // 每个字母出现的次数</div><div class="line">int d[55];  // 最大种类</div><div class="line"></div><div class="line">int main()</div><div class="line">&#123;</div><div class="line">	int n;</div><div class="line">	scanf(&quot;%d&quot;, &amp;n);</div><div class="line">	while(n--)</div><div class="line">	&#123;</div><div class="line">        int cnt = 0;</div><div class="line"></div><div class="line">        memset(d, 0, sizeof(d));</div><div class="line">        d[0] = 1;</div><div class="line">        for (int i = 1; i &lt;= 26; ++i)</div><div class="line">        &#123;</div><div class="line">            scanf(&quot;%d&quot;, &amp;a[i]);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        // 还是对于每个字母来循环</div><div class="line">        for (int i = 1; i &lt;= 26; ++i)</div><div class="line">        &#123;</div><div class="line">            if (a[i] == 0)</div><div class="line">                continue;</div><div class="line">            // 这里是对于剩下的分数</div><div class="line">            // 里面就几乎和上面一题完全一样了</div><div class="line">            for (int j = 50; j &gt;= i; --j)</div><div class="line">            &#123;</div><div class="line">                for (int k = 1; k &lt;= a[i]; ++k)</div><div class="line">                &#123;</div><div class="line">                    if (j - i * k &gt;= 0)</div><div class="line">                        d[j] += d[j - i * k];</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        // 这个地方坑的我好惨...明明是50位的数组...我已开始只加了26位...</div><div class="line">        for (int i = 1; i &lt;= 50; ++i)</div><div class="line">        &#123;</div><div class="line">            cnt += d[i];</div><div class="line">        &#125;</div><div class="line">        printf(&quot;%d\n&quot;, cnt);</div><div class="line">	&#125;</div><div class="line">	return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>和上面一题不同的是这一题在1~50这个范围内都可以，所以最后只用把结果加起来就可以了，比较坑爹的是，我一直以为d只有26位…所以结果一直秘制的小…</p>
<h2 id="汉诺塔IV"><a href="#汉诺塔IV" class="headerlink" title="汉诺塔IV"></a>汉诺塔IV</h2><blockquote>
<p>还记得汉诺塔III吗？他的规则是这样的：不允许直接从最左(右)边移到最右(左)边(每次移动一定是移到中间杆或从中间移出)，也不允许大盘放到小盘的上面。xhd在想如果我们允许最大的盘子放到最上面会怎么样呢？（只允许最大的放在最上面）当然最后需要的结果是盘子从小到大排在最右边。</p>
</blockquote>
<p>分析：</p>
<p>这个是在前一个汉诺塔的基础上来的，分三步走：</p>
<ol>
<li>把n-1个移到中间去</li>
<li>把第n个移到中间再移到右边去</li>
<li>把n-1个移到右边去</li>
</ol>
<p>最坑的是有一些隐藏的结论一直没发现：</p>
<ol>
<li>把n个移到最右边相当于先移到中间，再移到右边，因为事实上每个块都是移到中间才能移到最右边的</li>
<li>把n个移到中间和把n个从中间移到旁边是一样的，对于单个的，都是一步到位</li>
<li>把n个移到右边相当于2*把n个移到中间，由1,2可以知道</li>
</ol>
<p>所以者具体的结果其实就是汉诺塔3的a[n - 1] + 2</p>
<p>没发现规律的我被坑的好惨…</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[C++好用的模块]]></title>
      <url>https://blog.patrickcty.cc/2017/02/23/C-%E5%A5%BD%E7%94%A8%E7%9A%84%E6%A8%A1%E5%9D%97/</url>
      <content type="html"><![CDATA[<h1 id="C-好用的模块"><a href="#C-好用的模块" class="headerlink" title="C++好用的模块"></a>C++好用的模块</h1><h2 id="一览"><a href="#一览" class="headerlink" title="一览"></a>一览</h2><p>整体模板：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">#include &lt;iostream&gt;</div><div class="line">#include &lt;cstdlib&gt;</div><div class="line">#include &lt;cstdio&gt;</div><div class="line">#include &lt;cmath&gt;</div><div class="line">#include &lt;cstring&gt;</div><div class="line">#include &lt;algorithm&gt;</div><div class="line">#include &lt;string&gt;</div><div class="line">#include &lt;sstream&gt;</div><div class="line">#include &lt;map&gt;</div><div class="line">#include &lt;vector&gt; </div><div class="line">#include &lt;set&gt;</div><div class="line"></div><div class="line">using namespace std;</div><div class="line"></div><div class="line">const int maxn = 10005;</div><div class="line"></div><div class="line">int main()</div><div class="line">&#123;</div><div class="line">	int n;</div><div class="line">	scanf(&quot;%d&quot;, &amp;n);</div><div class="line">	while(n--)</div><div class="line">    //while (~scanf(&quot;%d&quot;, &amp;n) &amp;&amp; n)</div><div class="line">    //while (~scanf(&quot;%d&quot;, &amp;n))</div><div class="line">	&#123;</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">	return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>头文件解析：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">// C语言的基本头文件</div><div class="line">#include &lt;cstdlib&gt;</div><div class="line">#include &lt;cstdio&gt;  // 输入输出</div><div class="line">#include &lt;cmath&gt;  // 数学</div><div class="line">#include &lt;cstring&gt;  // 字符</div><div class="line">// C++算法</div><div class="line">// 常用的有sort(a, a + n, cmp)</div><div class="line">#include &lt;algorithm&gt;</div><div class="line">// 映射</div><div class="line">// 类似于Python中的dict</div><div class="line">// 声明：</div><div class="line">// map&lt;string, int&gt; a;  string到int的映射</div><div class="line">// 方法：</div><div class="line">// 直接赋值a[b] = 1</div><div class="line">// 迭代的时候对于指针maap，maap-&gt;first就是key，maap-&gt;second就是value</div><div class="line">#include &lt;map&gt;</div><div class="line">// 不定长数组</div><div class="line">// 声明：</div><div class="line">// vector&lt;int&gt; a; 一维不定长数组</div><div class="line">// vector&lt;int&gt; a[maxn]; 二维不定长数组， 第一维大小固定</div><div class="line">// 方法：</div><div class="line">// a.size()读取大小</div><div class="line">// a.resize()改变大小</div><div class="line">// a.push_back()向尾部添加元素</div><div class="line">// a.pop_back()删除最后一个元素</div><div class="line">#include &lt;vector&gt;</div><div class="line">// 集合，里面不包含重复的元素</div><div class="line">// 声明set&lt;int&gt; a;</div><div class="line">// 方法：</div><div class="line">// a.insert() 加入集合</div><div class="line">// a.size() 集合大小</div><div class="line">// a.begin() 集合开始指针</div><div class="line">#include &lt;set&gt;</div><div class="line">// C++的强大的字符类</div><div class="line">// 读入一行</div><div class="line">// string a;</div><div class="line">// getline(cin, a)</div><div class="line">// 直接流式读写</div><div class="line">// cin &gt;&gt; s;</div><div class="line">#include &lt;string&gt;</div><div class="line">// 把字符串变成流来让string读入</div><div class="line">// string line;</div><div class="line">// getline(cin, line);</div><div class="line">// stringstream ss(a);</div><div class="line">// ss &gt;&gt; a;  直接把ss的内容也就是line读入到a中了</div><div class="line">#include &lt;sstream&gt;</div><div class="line">// C++的输入输出流，cin和cout就在这里面</div><div class="line">#include &lt;iostream&gt;</div></pre></td></tr></table></figure></p>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>帮助最大的应该是string类了，对于字符串的处理方便多了，直接就过了一个直接看很麻烦的题，不过可能会超时。</p>
<p>相关方法：</p>
<ul>
<li>substr(开始的位置， 子串的长度) 返回值也是一个string类的字符串</li>
<li>length()字符串长度</li>
</ul>
<p>另外的就是set类了，对于统计字符串的种类方便多了，对，字符串！数字还好说。</p>
<p>流式操作也很方便</p>
<ul>
<li><blockquote>
<blockquote>
<p>表示流入，例如cin&gt;&gt;a;输入流的数据流入a</p>
</blockquote>
</blockquote>
</li>
<li>&lt;&lt;表示流出，总之两个都表示流的方向，例如cout&lt;&lt;a;a的数据流到输出流</li>
<li>还有stringstream可以把string变成流，对于那种一行有很多数据用空格隔开的简直不能更好用，但是时间也是一个问题</li>
</ul>
<h2 id="两个实例"><a href="#两个实例" class="headerlink" title="两个实例"></a>两个实例</h2><h3 id="剪花布条"><a href="#剪花布条" class="headerlink" title="剪花布条"></a>剪花布条</h3><blockquote>
<p>一块花布条，里面有些图案，另有一块直接可用的小饰条，里面也有一些图案。对于给定的花布条和小饰条，计算一下能从花布条中尽可能剪出几块小饰条来呢？</p>
</blockquote>
<p>分析：</p>
<p>用string类来构造字符串，然后调用string的find方法来寻找子字符串，一直这样做下去就可以了。注意的是，为了方便匹配完后把匹配出来的结果包括子串一起删除会更加方便。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">string a, b;</div><div class="line">if (a.find(b) != -1)</div><div class="line">&#123;</div><div class="line">    cnt++;</div><div class="line">    a = a.substr(n + b.length(), a.length() - b.length() - n + 1);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="单词数"><a href="#单词数" class="headerlink" title="单词数"></a>单词数</h3><blockquote>
<p>lily的好朋友xiaoou333最近很空，他想了一件没有什么意义的事情，就是统计一篇文章里不同单词的总数。下面你的任务是帮助xiaoou333解决这个问题。</p>
</blockquote>
<p>分析：</p>
<p>这里就是上面说的，不用集合会很麻烦</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">set&lt;string&gt; dict;</div><div class="line"></div><div class="line">stringstream ss(s);</div><div class="line">while(ss &gt;&gt; buf)</div><div class="line">    dict.insert(buf);</div><div class="line">    </div><div class="line">printf(&quot;%d\n&quot;, dict.size());</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[动态规划初步]]></title>
      <url>https://blog.patrickcty.cc/2017/02/21/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%88%9D%E6%AD%A5/</url>
      <content type="html"><![CDATA[<h1 id="动态规划初步"><a href="#动态规划初步" class="headerlink" title="动态规划初步"></a>动态规划初步</h1><h2 id="开始之前"><a href="#开始之前" class="headerlink" title="开始之前"></a>开始之前</h2><p>首先我们考虑一下以下的问题：</p>
<ul>
<li>什么是动态规划，动态规划与递推有什么关系</li>
<li>动态规划的关键点是什么</li>
<li>动态规划怎么保证每处的值都是最优</li>
<li>动态规划有哪几种解题模板</li>
<li>动态规划有哪些应用</li>
</ul>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>带着这些问题，就要更深的了解动态规划了。</p>
<p>首先回到第一个问题：</p>
<h3 id="什么是动态规划，动态规划与递推有什么关系"><a href="#什么是动态规划，动态规划与递推有什么关系" class="headerlink" title="什么是动态规划，动态规划与递推有什么关系"></a>什么是动态规划，动态规划与递推有什么关系</h3><p>我个人的理解是通过寻求问题的子问题来递推解决问题的一种方法。</p>
<p>而递推是动态规划中要用到的一部分，而且并不只是简单的递推，而是要根据情况进行判断选出最优的结果进行递推，例如：</p>
<blockquote>
<p>d(i, j) = max(d(i + 1, j), d(i + 1, j + 1)) + a(i, j)</p>
</blockquote>
<p>而递推则往往是简单的相邻几项的关系，例如：</p>
<blockquote>
<p>d(i) = 3d(i - 1) + 2</p>
</blockquote>
<p>既然递推不是动态规划的关键，那动态规划的关键点是什么呢？</p>
<p>这样就来到了第二个问题：</p>
<h3 id="动态规划的关键点是什么"><a href="#动态规划的关键点是什么" class="headerlink" title="动态规划的关键点是什么"></a>动态规划的关键点是什么</h3><h4 id="状态"><a href="#状态" class="headerlink" title="状态"></a>状态</h4><ul>
<li>简单来说就是整个过程中的某个点，以及一些属性</li>
</ul>
<h4 id="指标函数-amp-决策-amp-状态转移方程"><a href="#指标函数-amp-决策-amp-状态转移方程" class="headerlink" title="指标函数&amp;决策&amp;状态转移方程"></a>指标函数&amp;决策&amp;状态转移方程</h4><ul>
<li>指标函数是一个最优的函数，它的一个特定的值往往就是问题的解答，例如</li>
</ul>
<blockquote>
<p>上面的d(i, j)是从(i, j)出发的最大值，那么一个特定的值(1, 1)就是从这个点到最底层的最大的路径长度</p>
</blockquote>
<p>而<strong>指标函数的选取</strong>是动态规划的一个关键，选一个好的指标函数能大大的让问题简化</p>
<p>另外对于同一个状态的选取，指标函数通常有两种互相对称的写法，比如和上面的对称的是：到(i, j)的最大值</p>
<ul>
<li><p>决策是状态转移的方向，通常两个这个状态到下一个状态总是有多种方向可以选择，而我们要选择的总是最佳决策</p>
</li>
<li><p>状态转移方程则是用指标函数来表示不同状态的转移过程，选出最优决策，表示状态间的数学关系</p>
</li>
</ul>
<p>虽然动态规划是一层层推下来的，那如果到了后面的情况发现前面某一步的另一种决策有更优的结果是怎么处理的呢？怎么保证最后的结果总是最优？</p>
<h3 id="动态规划怎么保证每处的值都是最优"><a href="#动态规划怎么保证每处的值都是最优" class="headerlink" title="动态规划怎么保证每处的值都是最优"></a>动态规划怎么保证每处的值都是最优</h3><p>这是由一个叫“最优子结构”的部分保证的，看维基百科上我们可以知道：</p>
<blockquote>
<p>动态规划只能应用于有最优子结构的问题。最优子结构的意思是局部最优解能决定全局最优解（对有些问题这个要求并不能完全满足，故有时需要引入一定的近似）。简单地说，问题能够分解成子问题来解决。</p>
</blockquote>
<p>也就是说因为每一步都是由一个特定的值和最优值组成的，每一步最优值则保证了下一步甚至到结果都是最优值。</p>
<p>当然如果状态和指标函数选取的不好，那么可能就陷入一个“不能保证最优子结构”的情况了，比如杭电上的龟兔赛跑问题，如果选取(i, j)作为状态，i为当前充电站的编号，j为当前还可以跑的里程。因为下一步的里程还是和这一步相关，所以保证了前面的最优并不能保证接下来的都是最优的，这部分就要思考清楚了(这也是最难的部分)。</p>
<h3 id="动态规划有哪几种解题模板"><a href="#动态规划有哪几种解题模板" class="headerlink" title="动态规划有哪几种解题模板"></a>动态规划有哪几种解题模板</h3><p>下面以数字三角形为例</p>
<ul>
<li>递推法<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">int i, j;</div><div class="line">// 总是要把最开始的状态先初始化，这里是最下面一层的状态</div><div class="line">for (int i = 1; i &lt;= n; ++i) d[n][i] = a[n][j];</div><div class="line">// 由于这个图形是二元的，于是有二重循环</div><div class="line">for (int i = n - 1; i &gt;= 1; --i)</div><div class="line">    for (int j = 1; j &lt;= i; ++j)</div><div class="line">        d[i][j] = a[i][j] + max(d[i + 1][j], d[i + 1][j + 1]);</div></pre></td></tr></table></figure>
</li>
</ul>
<p>经过循环进行递推，最后的结果储存在数组d中</p>
<ul>
<li>记忆化搜索</li>
</ul>
<p>在递归的基础上对已经访问的数据进行标记，避免了重叠子问题的多次求解</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">// 初始化，方便之后的判断</div><div class="line">memset(d, -1, sizeof(d));</div><div class="line">int solve(int i, int j)</div><div class="line">&#123;</div><div class="line">    if (d[i][j] &gt;= 0) return d[i][j];</div><div class="line">    // 返回的时候顺便进行了“记忆”</div><div class="line">    return d[i][j] = a[i][j] + (i == n? 0: max(solve(i + 1,j), solve(i + 1, j + 1);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>基本的思想主要就是两种，而解题的关键则是确定状态以及指标函数了</p>
<h3 id="动态规划有哪些应用"><a href="#动态规划有哪些应用" class="headerlink" title="动态规划有哪些应用"></a>动态规划有哪些应用</h3><p>下面就分析一下讲过和做过的题目：</p>
<h4 id="数字三角形"><a href="#数字三角形" class="headerlink" title="数字三角形"></a>数字三角形</h4><ul>
<li>状态：(i, j)，位置</li>
<li>指标函数d(i, j)，从(i, j)出发的最大长度</li>
<li>决策：向下走的方向</li>
<li>状态转移方程<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">d[i][j] = a[i][j] + max(d[i + 1][j], d[i + 1][j + 1]);</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="嵌套矩形（有向无环图不固定起点终点的最大路径）"><a href="#嵌套矩形（有向无环图不固定起点终点的最大路径）" class="headerlink" title="嵌套矩形（有向无环图不固定起点终点的最大路径）"></a>嵌套矩形（有向无环图不固定起点终点的最大路径）</h4><ul>
<li>状态：i，结点</li>
<li>指标函数d(i)，从i出发的最大长度</li>
<li>决策：到下一个结点选择的边</li>
<li>状态转移方程<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">d[i] = max&#123;d[j]&#125;;  // j为和i相邻的结点</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="硬币问题（有向无环图固定起点终点的最大-小路径）"><a href="#硬币问题（有向无环图固定起点终点的最大-小路径）" class="headerlink" title="硬币问题（有向无环图固定起点终点的最大/小路径）"></a>硬币问题（有向无环图固定起点终点的最大/小路径）</h4><ul>
<li>状态：i，结点</li>
<li>指标函数d(i)，从i出发的最大/小长度</li>
<li>决策：到下一个结点选择的硬币的种类（硬币面值要比剩下的钱要小）</li>
<li>状态转移方程<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">d[i] = max(d[i], d[i - v[t]] + 1);  // t是要从大到小（最小数量）进行循环</div><div class="line">// 因此要求出所有的长度也必然要对i进行循环，也就是两层循环</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="多段图最短路径（多段决策）"><a href="#多段图最短路径（多段决策）" class="headerlink" title="多段图最短路径（多段决策）"></a>多段图最短路径（多段决策）</h4><ul>
<li>状态：(i, j)，行，列</li>
<li>指标函数d(i, j)，从(i, j)出发到最后一列的最大长度</li>
<li><strong>阶段</strong>：列</li>
<li>决策：到下一列走的方向</li>
<li>状态转移方程<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">d[i][j] = max(d[i + n][j + 1] + a[i][j]);  // n是三种决策的一个表示，通过循环来判断</div><div class="line">// 如果要按照字典序输出，则最好按照行数的大小进行排序</div></pre></td></tr></table></figure>
</li>
</ul>
<p>注意：<br>这个模型到完成的时候的步数已经确定了，所以可以根据每一步来当做阶段，阶段可以作为状态的一部分来简化模型</p>
<h4 id="0-1背包（多段决策）"><a href="#0-1背包（多段决策）" class="headerlink" title="0-1背包（多段决策）"></a>0-1背包（多段决策）</h4><ul>
<li>状态：(i, j)，当前层，背包剩余容量</li>
<li>指标函数d(i, j)，从(i, j)出发到最后一列的最大长度</li>
<li><strong>阶段</strong>：物品，因为每个物品都只有一个，也是“过了就没有了”，于是也可以用阶段表示</li>
<li>决策：是否把物品放入背包</li>
<li>状态转移方程<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// 这里j保证了不会有一开始选很大后面没位置选的情况，因为j会从0到最大容量进行循环</div><div class="line">// 前面的情况如果不是最优就会被排除</div><div class="line">// 也是对i对j两层循环</div><div class="line">d[i][j] = max(d[i + 1][j], d[i + 1][j - V[i]]);</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="龟兔赛跑"><a href="#龟兔赛跑" class="headerlink" title="龟兔赛跑"></a>龟兔赛跑</h4><ul>
<li>状态：i，充电站</li>
<li>指标函数d(i, j)，从i到j的过程中充一次电并且时间最短，T(i)到达i最小时间</li>
<li>决策：是否充电</li>
<li>状态转移方程<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 也是对i对j两层循环</div><div class="line">d[i] = min(T(i) + d(i, j), T(j));</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="最长上升子序列-LIS"><a href="#最长上升子序列-LIS" class="headerlink" title="最长上升子序列(LIS)"></a>最长上升子序列(LIS)</h4><ul>
<li>状态：i，序列长</li>
<li>指标函数d(i)，长度为i序列的最长长度</li>
<li>决策：新增加的数是否比原来最大的大</li>
<li>状态转移方程<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 也是对i对j两层循环</div><div class="line">d[i] = max(0, d(j) | j &lt; i, A[j] &lt; A[i]);</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="最长公共子序列-LCS"><a href="#最长公共子序列-LCS" class="headerlink" title="最长公共子序列(LCS)"></a>最长公共子序列(LCS)</h4><ul>
<li>状态：(i, j)，A，B序列长</li>
<li>指标函数d(i, j)，公共子序列最大长度</li>
<li>决策：两个序列是否正好是最后一位相同</li>
<li>状态转移方程<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">// i从0～m循环，j从0～n循环</div><div class="line">A[i] == B[j]</div><div class="line">d(i, j) = d(i - 1, j - 1) + 1;</div><div class="line"></div><div class="line">else</div><div class="line">d(i, j) = max(d(i - 1, j), d(i, j - 1));</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>动态转移方程的循环往往不止一层，这个地方一定要想清楚。</p>
<p>看了这么多，还是不会做题怎么办？</p>
<p>我也在苦恼这事呢（哭。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[那些严重拖慢做题进度的题以及遇到的坑3]]></title>
      <url>https://blog.patrickcty.cc/2017/02/20/%E9%82%A3%E4%BA%9B%E4%B8%A5%E9%87%8D%E6%8B%96%E6%85%A2%E5%81%9A%E9%A2%98%E8%BF%9B%E5%BA%A6%E7%9A%84%E9%A2%98%E4%BB%A5%E5%8F%8A%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%913/</url>
      <content type="html"><![CDATA[<h1 id="那些严重拖慢做题进度的题以及遇到的坑3"><a href="#那些严重拖慢做题进度的题以及遇到的坑3" class="headerlink" title="那些严重拖慢做题进度的题以及遇到的坑3"></a>那些严重拖慢做题进度的题以及遇到的坑3</h1><p>依旧来自杭电</p>
<h2 id="1045-Fire-Net"><a href="#1045-Fire-Net" class="headerlink" title="1045 Fire Net"></a>1045 Fire Net</h2><blockquote>
<p>Suppose that we have a square city with straight streets. A map of a city is a square board with n rows and n columns, each representing a street or a piece of wall. </p>
<p>A blockhouse is a small castle that has four openings through which to shoot. The four openings are facing North, East, South, and West, respectively. There will be one machine gun shooting through each opening. </p>
<p>Here we assume that a bullet is so powerful that it can run across any distance and destroy a blockhouse on its way. On the other hand, a wall is so strongly built that can stop the bullets. </p>
<p>The goal is to place as many blockhouses in a city as possible so that no two can destroy each other. A configuration of blockhouses is legal provided that no two blockhouses are on the same horizontal row or vertical column in a map unless there is at least one wall separating them. In this problem we will consider small square cities (at most 4x4) that contain walls through which bullets cannot run through. </p>
<p>The following image shows five pictures of the same board. The first picture is the empty board, the second and third pictures show legal configurations, and the fourth and fifth pictures show illegal configurations. For this board, the maximum number of blockhouses in a legal configuration is 5; the second picture shows one way to do it, but there are several other ways. </p>
<p>Your task is to write a program that, given a description of a map, calculates the maximum number of blockhouses that can be placed in the city in a legal configuration. </p>
</blockquote>
<p>分析：</p>
<p>这是一道深度搜索的题，数据这么小是因为循环的次数太多了，也就是时间复杂度太大了</p>
<p>对于放置碉堡的顺序也有讲究，所以不能简单的从第一个开始扫一遍，而是要从每个点出发进行深度搜索，取最大的值才是最终的结果</p>
<p>深度搜索的好处是每次搜索的时候，前一次的状态都可以保留，并且最终状态回退也没那么麻烦</p>
<p>下面是代码：<br>参考了<a href="http://blog.csdn.net/u014235934/article/details/50879794" target="_blank" rel="external">这个链接</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div></pre></td><td class="code"><pre><div class="line">#include&lt;iostream&gt;</div><div class="line">#include&lt;cstdlib&gt;</div><div class="line">#include&lt;cstdio&gt;</div><div class="line">#include&lt;cmath&gt;</div><div class="line">#include&lt;cstring&gt;</div><div class="line">#include &lt;algorithm&gt;</div><div class="line"></div><div class="line">using namespace std;</div><div class="line"></div><div class="line">const int maxn = 10005;</div><div class="line"></div><div class="line">char a[5][5];</div><div class="line">// visit数组，表示每一格的状态，0为空位置，1为碉堡，2为墙</div><div class="line">// 实际上用a数组也可以，不过这里用的是整型数组</div><div class="line">int visit[5][5];</div><div class="line">// 设置为全局变量，便于函数中直接调用</div><div class="line">int mmax, cnt;</div><div class="line">int n;</div><div class="line"></div><div class="line">// 判断从(i, j)出发向上下左右是否会遇到碉堡</div><div class="line">// 也就是是否能在该店放置碉堡</div><div class="line">bool ffind(int i, int j)</div><div class="line">&#123;</div><div class="line">    for (int k = j; k &lt;= n; ++k)</div><div class="line">    &#123;</div><div class="line">        if (visit[i][k] == 2)</div><div class="line">            break;</div><div class="line">        if (visit[i][k] == 1)</div><div class="line">            return false;</div><div class="line">    &#125;</div><div class="line">    for (int k = j; k &gt; 0; --k)</div><div class="line">    &#123;</div><div class="line">        // 是visit而不是a</div><div class="line">        // 所以两个都用的坏处就是容易搞混</div><div class="line">        if (visit[i][k] == 2)</div><div class="line">            break;</div><div class="line">        if (visit[i][k] == 1)</div><div class="line">            return false;</div><div class="line">    &#125;</div><div class="line">    for (int k = i; k &lt;= n; ++k)</div><div class="line">    &#123;</div><div class="line">        if (visit[k][j] == 2)</div><div class="line">            break;</div><div class="line">        if (visit[k][j] == 1)</div><div class="line">            return false;</div><div class="line">    &#125;</div><div class="line">    for (int k = i; k &gt; 0; --k)</div><div class="line">    &#123;</div><div class="line">        // 横纵坐标不要搞错</div><div class="line">        if (visit[k][j] == 2)</div><div class="line">            break;</div><div class="line">        if (visit[k][j] == 1)</div><div class="line">            return false;</div><div class="line">    &#125;</div><div class="line">    return true;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">// 深度搜索</div><div class="line">void dfs()</div><div class="line">&#123;</div><div class="line">    // 每次都保存最大的状态</div><div class="line">    if (cnt &gt; mmax)</div><div class="line">        mmax = cnt;</div><div class="line">    for (int i = 1; i &lt;= n; ++i)</div><div class="line">    &#123;</div><div class="line">        for (int j = 1; j &lt;= n; ++j)</div><div class="line">        &#123;</div><div class="line">            // 没有放置碉堡并且可以放置碉堡</div><div class="line">            if (!visit[i][j] &amp;&amp; ffind(i, j))</div><div class="line">            &#123;</div><div class="line">                visit[i][j] = 1;</div><div class="line">                cnt++;</div><div class="line">                dfs();</div><div class="line">                // 整个搜索完了之后就状态回退</div><div class="line">                // 便于下一个点出发进行深度搜索</div><div class="line">                visit[i][j] = 0;</div><div class="line">                cnt--;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">int main()</div><div class="line">&#123;</div><div class="line"></div><div class="line">    while (scanf(&quot;%d&quot;, &amp;n) &amp;&amp; n != 0)</div><div class="line">    &#123;</div><div class="line">        for (int i = 1; i &lt;= n; ++i)</div><div class="line">        &#123;</div><div class="line">            getchar();</div><div class="line">            for (int j = 1; j &lt;= n; ++j)</div><div class="line">            &#123;</div><div class="line">                scanf(&quot;%c&quot;, &amp;a[i][j]);</div><div class="line">                if (a[i][j] == &apos;X&apos;)</div><div class="line">                    visit[i][j] = 2;</div><div class="line">                else</div><div class="line">                    visit[i][j] = 0;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        cnt = mmax = 0;</div><div class="line">        dfs();</div><div class="line">        printf(&quot;%d\n&quot;, mmax);</div><div class="line">    &#125;</div><div class="line">    return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[那些严重拖慢做题进度的题以及遇到的坑2]]></title>
      <url>https://blog.patrickcty.cc/2017/02/19/%E9%82%A3%E4%BA%9B%E4%B8%A5%E9%87%8D%E6%8B%96%E6%85%A2%E5%81%9A%E9%A2%98%E8%BF%9B%E5%BA%A6%E7%9A%84%E9%A2%98%E4%BB%A5%E5%8F%8A%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%912/</url>
      <content type="html"><![CDATA[<h1 id="那些严重拖慢做题进度的题以及遇到的坑2"><a href="#那些严重拖慢做题进度的题以及遇到的坑2" class="headerlink" title="那些严重拖慢做题进度的题以及遇到的坑2"></a>那些严重拖慢做题进度的题以及遇到的坑2</h1><p>杭电205X &amp;&amp; 206X</p>
<h2 id="A-B"><a href="#A-B" class="headerlink" title="A == B ?"></a>A == B ?</h2><blockquote>
<p>Give you two numbers A and B, if A is equal to B, you should print “YES”, or print “NO”.</p>
</blockquote>
<p>这一题是最坑的，AC率只有15.9%，主要原因就是题目条件说得太简略了，后面也有一些题是这样的，有一些时要注意的。</p>
<p>这里A和B并不是简单的数，可能是很长的数，长到没有变量类型可以表示，也可以是000000000000000000.00000000001这种形式很坑的数，所以并不是那么简单</p>
<p>不过Java里面有相应的模块，于是就很容易过了，而用C++就很难搞了</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.Scanner;</div><div class="line"><span class="keyword">import</span> java.math.BigDecimal;  <span class="comment">// 大的十进制数</span></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</div><div class="line">        Scanner in = <span class="keyword">new</span> Scanner(System.in);</div><div class="line">        <span class="keyword">while</span> (in.hasNext()) &#123;</div><div class="line">            BigDecimal A = in.nextBigDecimal;</div><div class="line">            BigDecimal B = in.nextBigDecimal;</div><div class="line">            <span class="keyword">if</span> (A.compareTo(B) == <span class="number">0</span>) &#123;</div><div class="line">                System.out.println(<span class="string">"YES"</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> &#123;</div><div class="line">                System.out.println(<span class="string">"NO"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>总结一下，这种涉及到位数很多的数用Java可以比较方便的解决。（得知道有相应的模块233）</p>
<h2 id="Rectangles"><a href="#Rectangles" class="headerlink" title="Rectangles"></a>Rectangles</h2><blockquote>
<p>Given two rectangles and the coordinates of two points on the diagonals of each rectangle,you have to calculate the area of the intersected part of two rectangles. its sides are parallel to OX and OY </p>
</blockquote>
<p>分析：</p>
<p>这一题知道算法就很简单，如果没想清楚就很坑了…比如说我…</p>
<p>方法一：</p>
<ul>
<li>重叠部分长度等于两者长度相加减去最大最小坐标之差，对于x，是下面这种，y也类似<blockquote>
<p>rela_x = fabs(x1 - x2) + fabs(x3 - x4) - (x[3] + x[0])  // x[3], x[0]是最大和最小的坐标</p>
</blockquote>
</li>
</ul>
<p>如果这个值小于零，说明不相交，大于零就是相应的长度</p>
<p>于是当相交的时候，面积就是rela_x * rela_y</p>
<p>方法二：</p>
<ul>
<li>重叠部分的长度总是四个坐标中中间两个的差值，于是面积有<blockquote>
<p>(x[2] - x[1]) * (y[3] - y[1])</p>
</blockquote>
</li>
</ul>
<p>关键就是要相处算法，死讨论情况是很难做出来的…</p>
<h2 id="A-B-Again"><a href="#A-B-Again" class="headerlink" title="A + B Again"></a>A + B Again</h2><blockquote>
<p>There must be many A + B problems in our HDOJ , now a new one is coming.<br>Give you two hexadecimal integers , your task is to calculate the sum of them,and print it in hexadecimal too.<br>Easy ? AC it !</p>
</blockquote>
<p>分析：</p>
<p>说白了就是十六进制的输入和输出，我不知道有相应的内容，于是手动转换…果不其然WA…</p>
<p>直接上代码吧…</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">#include&lt;stdio.h&gt;</div><div class="line">int main()</div><div class="line">&#123;</div><div class="line">    // 15位16进制相当于60位二进制，所以要开大一点</div><div class="line">    long long a, b;</div><div class="line">    // x占位符表示16进制</div><div class="line">    while(scanf(&quot;%llx %llx&quot;, &amp;a, &amp;b) != EOF)</div><div class="line">    &#123;</div><div class="line">        // 不能输出负的十六进制，所以这里要处理一下</div><div class="line">        if (a + b &lt; 0)</div><div class="line">            printf(&quot;-%llx\n&quot;, -(a + b));</div><div class="line">        else</div><div class="line">            printf(&quot;%llx\n&quot;, (a + b));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>你看吧，基础不牢，地动山摇…</p>
<h2 id="The-sum-problem"><a href="#The-sum-problem" class="headerlink" title="The sum problem"></a>The sum problem</h2><blockquote>
<p>Given a sequence 1,2,3,……N, your job is to calculate all the possible sub-sequences that the sum of the sub-sequence is M.</p>
</blockquote>
<p>分析：</p>
<p>题目本身是很简单的，是连续的数列，都不涉及到动态规划<br>但是隐藏了一个坑，那就是输入的数字范围很大，因此如果不控制复杂度就机器容易超时</p>
<p>在这里用解方程的思想来做：</p>
<ul>
<li>首项为f，末项为e，项数为n<blockquote>
<p>m = (f + e) * n / 2;<br>e - f + 1 = n;</p>
</blockquote>
</li>
</ul>
<p>因此可以用项数和m来表示f解出f，当f为1的时候，n可能取到的值最大，约为sqrt(2m)，也就是说子序列的长度不可能超多这个值，因此循环从1到sqrt(2m)就可以了，当解出来的f是正整数而且不超过范围说明就是所求</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">int len = floor(sqrt(2 * m));</div><div class="line">        double x = 0;</div><div class="line">        for (int i = len; i &gt;= 1; --i)</div><div class="line">        &#123;</div><div class="line">            x = (2.0 * m / i + 1 - i) * 0.5;</div><div class="line">            int a = floor(x);</div><div class="line">            x -= a;</div><div class="line">            if (x == 0 &amp;&amp; (a + i - 1) &lt;= n)</div><div class="line">                printf(&quot;[%d,%d]\n&quot;, a, a + i - 1);</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<p>补充：</p>
<p>floor()是数学函数，是求一个浮点数的不大于它的最大整数，返回值也是一个double型的浮点数<br>类似的还有:<br>ceil()：求一个浮点数的不小于它的最小整数,返回值也是一个double型的浮点数<br>round():求一个浮点数的四舍五入值，返回也是一个整数，也就是说看小数点第二位四舍五入</p>
<blockquote>
<p>例如：round(1.499999) is 1.000000</p>
</blockquote>
<p>感觉自己是一个木头脑袋…</p>
<h2 id="龟兔赛跑"><a href="#龟兔赛跑" class="headerlink" title="龟兔赛跑"></a>龟兔赛跑</h2><blockquote>
<p>据说在很久很久以前，可怜的兔子经历了人生中最大的打击——赛跑输给乌龟后，心中郁闷，发誓要报仇雪恨，于是躲进了杭州下沙某农业园卧薪尝胆潜心修炼，终于练成了绝技，能够毫不休息得以恒定的速度(VR m/s)一直跑。兔子一直想找机会好好得教训一下乌龟，以雪前耻。<br>最近正值HDU举办50周年校庆，社会各大名流齐聚下沙，兔子也趁此机会向乌龟发起挑战。虽然乌龟深知获胜希望不大，不过迫于舆论压力，只能接受挑战。<br>比赛是设在一条笔直的道路上，长度为L米，规则很简单，谁先到达终点谁就算获胜。<br>无奈乌龟自从上次获胜以后，成了名龟，被一些八卦杂志称为“动物界的刘翔”，广告不断，手头也有了不少积蓄。为了能够再赢兔子，乌龟不惜花下血本买了最先进的武器——“”小飞鸽”牌电动车。这辆车在有电的情况下能够以VT1 m/s的速度“飞驰”，可惜电池容量有限，每次充满电最多只能行驶C米的距离，以后就只能用脚来蹬了，乌龟用脚蹬时的速度为VT2 m/s。更过分的是，乌龟竟然在跑道上修建了很多很多（N个)的供电站，供自己给电动车充电。其中，每次充电需要花费T秒钟的时间。当然，乌龟经过一个充电站的时候可以选择去或不去充电。<br>比赛马上开始了，兔子和带着充满电的电动车的乌龟并列站在起跑线上。你的任务就是写个程序，判断乌龟用最佳的方案进军时，能不能赢了一直以恒定速度奔跑的兔子。</p>
</blockquote>
<p>分析：</p>
<p>这个题目条件十分逗逼，也是一个涉及到动态规划的，在这里先留个坑等看了动态规划的相关内容再回来补充</p>
<h2 id="Treasure-the-new-start-freshmen"><a href="#Treasure-the-new-start-freshmen" class="headerlink" title="Treasure the new start, freshmen!"></a>Treasure the new start, freshmen!</h2><blockquote>
<p>background:<br>A new semester comes , and the HDU also meets its 50th birthday. No matter what’s your major, the only thing I want to tell you is:”Treasure the college life and seize the time.” Most people thought that the college life should be colorful, less presure.But in actual, the college life is also busy and rough. If you want to master the knowledge learned from the book, a great deal of leisure time should be spend on individual study and practise, especially on the latter one. I think the every one of you should take the learning attitude just as you have in senior school.<br>“No pain, No Gain”, HDU also has scholarship, who can win it? That’s mainly rely on the GPA(grade-point average) of the student had got. Now, I gonna tell you the rule, and your task is to program to caculate the GPA.<br>If there are K(K &gt; 0) courses, the i-th course has the credit Ci, your score Si, then the result GPA is<br>GPA = (C1 <em> S1 + C2 </em> S2 +……+Ci * Si……) / (C1 + C2 + ……+ Ci……) (1 &lt;= i &lt;= K, Ci != 0)<br>If there is a 0 &lt;= Si &lt; 60, The GPA is always not existed.</p>
</blockquote>
<p>这题其实是水题，但是一直WA</p>
<p>有几个坑：</p>
<ul>
<li>学分和成绩都可以是小数，所以要用double类型的，这里题目中没有说出来，以后要长一点心！</li>
<li>break使用的时候要慎重！特别是在输入数据的时候，提前break了后面输入的数据就都是错的！</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[《爆裂鼓手》]]></title>
      <url>https://blog.patrickcty.cc/2017/02/19/%E3%80%8A%E7%88%86%E8%A3%82%E9%BC%93%E6%89%8B%E3%80%8B/</url>
      <content type="html"><![CDATA[<h1 id="《爆裂鼓手》"><a href="#《爆裂鼓手》" class="headerlink" title="《爆裂鼓手》"></a>《爆裂鼓手》</h1><h2 id="开始之前"><a href="#开始之前" class="headerlink" title="开始之前"></a>开始之前</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ACM集训了这么多天，当我知道明天可以休息一天的时候，内心十分激动，于是在这个不用赶着A题的晚上，看了这部电影。</p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;说实话一下子真的难以下笔，于是我再次重新过了一次剧情这才对整个脉络有了进一步的了解。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;故事的主要人物是Andrew与Fletcher，核心冲突也是在他们两人之间展开的。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Fletcher是一个怪人，但是他是一个很厉害的指挥家。他会做出一些怪异的举动，比如进入课堂然后让其中的一些学生演奏相应的片段来挑人到Studio Bank中去而上课的老师却不敢说什么，他会故意逼走一个没走音的学生，他会凭借自己的喜好随意辱骂吼学生，也因此让Sean选择自杀…</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;但是根据他自己的话他是想激发学生的潜力，而那些承受不了的，那个被逼走的都是因为他们“不够优秀”。虽然他的教学方式以及思想行为都十分偏激，但不可否认的是他的初衷是比较好的，同时也确实有一定的成绩。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;令我比较在意的是，在他讲述肖恩·凯西的死的时候，他哭了出来，但是从后面我们可以知道他是死于抑郁症，Fletcher的哭究竟是因为真的为他感到惋惜还是因为自责呢？由于他是一个很怪的人，所以这个还真的不好判断。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;另一边，Andrew也是一个奇怪的人，他十分热爱打鼓，并有才华，但是他没有朋友，家人也对他不怎么重视，他对待感情的态度也很奇怪。在与Nicole见面的四次中，有三次他是很低落的，另外在成为core的时候他似乎忽视了Nicole的短信？我能明显感觉到Nicole并不是他真正所爱，感觉有一种自我的因素掺杂在感情里面——因为加入Studio Bank而表白，因为失去core的地位而分手，因为再次上台演出而又想和Nicole和好。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;音乐才是他真正喜爱的内容，为了音乐，或者是为了乐队中的地位，他拼命练习，连练到流血，出车祸都要继续，也正是因为太过偏执，他才不甘心失去core地位，他才与Fletcher积怨，虽然我觉得大家都讨厌Fletcher…也正是因为偏执，他才能忍受住Fletcher的“折磨”，一步一步达到要求，以及最后的爆发。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在那场演奏的事故中，Andrew打了Fletcher，他也因此被退学。比较值得注意的是当那个女律师（应该是吧？）让他为Fletcher的坏行为作证，在很长一番思想斗争之后他终于同意作证了，之后他放弃了音乐梦，Fletcher也不再是教师了。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;之后他们再次相遇并且“冰释前嫌”，Andrew再次上台演奏，结果是Fletcher是为了报复他的举报之仇，但是Andrew用自己的演奏予以反击并且在最后也打动了Fletcher，最终电影在Fletcher和Andrew二人的对峙演奏中结束了。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最后Andrew用自己行为让Fletcher认可了他，并且他自己的一口恶气也出了。鉴于Fletcher的古怪性格，他做出这种报复的行为也不算不可能，不过我之前一直以为Fletcher还是有感情的，所以当他报复的时候我还是很意外的。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;另外在维基百科上看到：</p>
<blockquote>
<p>安德鲁为此极度不满下，为了让佛列契改变主意而专心打鼓，打鼓打到两只手上的磨出的茧子流血。一刻起，安德鲁的性格发生了巨变，开始从彬彬有礼变的狂妄自大，甚至认为自己的女朋友妮可会拖自己的后腿而与她分手。</p>
</blockquote>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;尽管我并不是很认可这种说法，不过好像还是有一定的道理。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;总之这部电影还是看的很爽的，但是事后分析起来却感觉一脸懵逼，而且十分具有讽刺意味，可能是我没看懂吧…而且分析这个真的不比ACM轻松…</p>
<h2 id="评分"><a href="#评分" class="headerlink" title="评分"></a>评分</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;8/10。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;不知道这部电影想表达什么，可能是我没看懂。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ACM递推归纳]]></title>
      <url>https://blog.patrickcty.cc/2017/02/18/ACM%E9%80%92%E6%8E%A8%E5%BD%92%E7%BA%B3/</url>
      <content type="html"><![CDATA[<h1 id="ACM递推归纳"><a href="#ACM递推归纳" class="headerlink" title="ACM递推归纳"></a>ACM递推归纳</h1><p>递推是我众多不擅长的项目中的比较显著的一个…题目做得太艰难了。</p>
<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>递推中增加一个元素，在头部加和尾部加是同一种情况！！！因此考虑了尾部就不用考虑头部了！！！吃了好多亏orz。</p>
<h2 id="超级楼梯"><a href="#超级楼梯" class="headerlink" title="超级楼梯"></a>超级楼梯</h2><blockquote>
<p>有一楼梯共M级，刚开始时你在第一级，若每次只能跨上一级或二级，要走上第M级，共有多少种走法？</p>
</blockquote>
<p>分析：</p>
<p>因为只能走一级或者两级，所以最后一步有两种情况：</p>
<ol>
<li>走一步，剩下n-1和之前的相同</li>
<li>走两步，剩下n-2和之前的相同</li>
</ol>
<p>于是有：</p>
<blockquote>
<p>a[n] = a[n - 1] + a[n - 2]</p>
</blockquote>
<h2 id="一只小蜜蜂"><a href="#一只小蜜蜂" class="headerlink" title="一只小蜜蜂"></a>一只小蜜蜂</h2><blockquote>
<p>有一只经过训练的蜜蜂只能爬向右侧相邻的蜂房，不能反向爬行。请编程计算蜜蜂从蜂房a爬到蜂房b的可能路线数。<br>其中，蜂房的结构如下所示。<br><img src="https://okdkbnczs.qnssl.com/image/ACM/2044.jpg" alt="此处输入图片的描述"></p>
</blockquote>
<p>分析：</p>
<p>a到b的可能性本质上就是爬行b-a距离的可能性。而每一步有两个选择，右边或者斜右边，剩下的就和上面的几乎一样了，于是有：</p>
<blockquote>
<p>a[i] = a[i - 1] + a[i - 2]</p>
</blockquote>
<h2 id="LELE的RPG难题"><a href="#LELE的RPG难题" class="headerlink" title="LELE的RPG难题"></a>LELE的RPG难题</h2><blockquote>
<p>有排成一行的ｎ个方格，用红(Red)、粉(Pink)、绿(Green)三色涂每个格子，每格涂一色，要求任何相邻的方格不能同色，且首尾两格也不同色．求全部的满足要求的涂法.</p>
</blockquote>
<p>分析：</p>
<p>如果n增加一，就要根据增加前最后一个格子的颜色来判断了：</p>
<ul>
<li>如果最后一个不和第一个相同，也就是满足条件，就直接是a[n - 1]了，增加的一块只有一个选择</li>
<li>如果相同，那么前面n-2个一定是满足条件的，就是a[n - 2]，增加的一块有两个选择</li>
</ul>
<p>于是有：</p>
<blockquote>
<p>a[i] = a[i - 1] + 2 * a[i - 2]</p>
</blockquote>
<h2 id="骨牌铺方格"><a href="#骨牌铺方格" class="headerlink" title="骨牌铺方格"></a>骨牌铺方格</h2><blockquote>
<p>在2×n的一个长方形方格中,用一个1× 2的骨牌铺满方格,输入n ,输出铺放方案的总数.<br>例如n=3时,为2× 3方格，骨牌的铺放方案有三种</p>
</blockquote>
<p>分析：</p>
<p>这道题之前就把我卡住了，不过现在看到这么多难题之后反而觉得不难了…</p>
<p>因为骨牌的尺寸是1*2，因此横着摆放和竖着摆放是不同的，而竖着摆放一个就能填满，横着摆放两个才能填满，于是：</p>
<ul>
<li>当前情况是n-1的时候多加了一块竖着的</li>
<li>当前情况是n-2的时候多加了两块横着的</li>
</ul>
<p>于是有：</p>
<blockquote>
<p>a[i] = a[i - 1] + a[i - 2]</p>
</blockquote>
<h2 id="阿牛的EOF牛肉串"><a href="#阿牛的EOF牛肉串" class="headerlink" title="阿牛的EOF牛肉串"></a>阿牛的EOF牛肉串</h2><blockquote>
<p>长度为n的只由”E” “O” “F”三种字符组成的字符串（可以只有其中一种或两种字符，但绝对不能有其他字符）,阿牛同时禁止在串中出现O相邻的情况</p>
</blockquote>
<p>分析：</p>
<p>末尾有两种可能，是O或者是其他的</p>
<ul>
<li>是E或F，那么前面n-1就一定满足，即为a[n-1]</li>
<li>是O的话，O前一位一定是E或F，根据上面的，有a[n-2]</li>
</ul>
<p>综合起来，于是有：</p>
<blockquote>
<p>a[n] = 2 * (a[n - 1] + a[n - 2])</p>
</blockquote>
<h2 id="神、上帝以及老天爷"><a href="#神、上帝以及老天爷" class="headerlink" title="神、上帝以及老天爷"></a>神、上帝以及老天爷</h2><blockquote>
<p>首先，所有参加晚会的人员都将一张写有自己名字的字条放入抽奖箱中；<br>然后，待所有字条加入完毕，每人从箱中取一个字条；<br>最后，如果取得的字条上写的就是自己的名字，那么“恭喜你，中奖了！”</p>
<p>大家可以想象一下当时的气氛之热烈，毕竟中奖者的奖品是大家梦寐以求的Twins签名照呀！不过，正如所有试图设计的喜剧往往以悲剧结尾，这次抽奖活动最后竟然没有一个人中奖！</p>
<p>我的神、上帝以及老天爷呀，怎么会这样呢？</p>
<p>不过，先不要激动，现在问题来了，你能计算一下发生这种情况的概率吗？</p>
</blockquote>
<p>分析：</p>
<p>注：此处a[n]依旧是可能性而不是概率<br>这是一个错位排序的问题，增加一个元素考虑两种情况：</p>
<ul>
<li>前面n-1已经构成错排，那么直接把最后一个和前面n-1任意一个交换就可以了，即为(n - 1) * a[n - 1]</li>
<li>前面n-1不构成错排，新加的元素交换之后构成错排，于是有n-2个元素构成错排，而不构成的元素有n - 1种情况，即为(n -1) * a[n - 2]</li>
</ul>
<p>于是有：</p>
<blockquote>
<p>a[n] = (a[n - 1] + a[n - 2]) * (n - 1)</p>
</blockquote>
<h2 id="考新郎"><a href="#考新郎" class="headerlink" title="考新郎"></a>考新郎</h2><blockquote>
<p>假设一共有N对新婚夫妇,其中有M个新郎找错了新娘,求发生这种情况一共有多少种可能.</p>
</blockquote>
<p>分析：</p>
<p>这也是一道错排的题，和上面几乎一样。不过是M个错排，另外N-M个是组合</p>
<p>于是有：</p>
<blockquote>
<p>a[n] = (a[n - 1] + a[n - 2]) <em> (n - 1)<br>rst = a[n] </em> C(N,M)</p>
</blockquote>
<p>注：a[n]是错排的可能性，rst才是结果</p>
<h2 id="折线分割平面"><a href="#折线分割平面" class="headerlink" title="折线分割平面"></a>折线分割平面</h2><blockquote>
<p>我们看到过很多直线分割平面的题目，今天的这个题目稍微有些变化，我们要求的是n条折线分割平面的最大数目。比如，一条折线可以将平面分成两部分，两条折线最多可以将平面分成7部分，具体如下所示。</p>
</blockquote>
<p><img src="https://okdkbnczs.qnssl.com/image/ACM/2050.jpg" alt="此处输入图片的描述"></p>
<p>分析：</p>
<p>直线相交的时候每增加N个交点会增加N+1个平面<br>1.N条直线相交，平面数为</p>
<blockquote>
<p>1 + 1 + 2 + .. + n = 1 + n * (n + 1) / 2</p>
</blockquote>
<p>2.N组平行线相交<br>第N次添加的时候，会增加两个2N-2个交点，此时会增加两个2N-1个平面，此时平面数为</p>
<blockquote>
<p>1 + 2 + 6 + … + 4n - 2 = 2 <em> n </em> n + 1</p>
</blockquote>
<p>3.N组折线相交<br>相比上面，每组直线相交就会少一个平面，于是少N个平面，平面数就是上面的减N</p>
<blockquote>
<p>2 <em> n </em> n + 1 - n</p>
</blockquote>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>这部分代码并不难，难的是找出递推关系。</p>
<p>这么多组下来之后可以发现很多都是与前两次的状态有关的，因为根据特殊的条件可以分成两种情况讨论，不过找出这个讨论的条件也不是一件容易的事情。希望这次的踩坑能给之后的带来一些帮助吧！</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[那些严重拖慢做题进度的题以及遇到的坑]]></title>
      <url>https://blog.patrickcty.cc/2017/02/17/%E9%82%A3%E4%BA%9B%E4%B8%A5%E9%87%8D%E6%8B%96%E6%85%A2%E5%81%9A%E9%A2%98%E8%BF%9B%E5%BA%A6%E7%9A%84%E9%A2%98%E4%BB%A5%E5%8F%8A%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/</url>
      <content type="html"><![CDATA[<h1 id="那些严重拖慢做题进度的题以及遇到的坑"><a href="#那些严重拖慢做题进度的题以及遇到的坑" class="headerlink" title="那些严重拖慢做题进度的题以及遇到的坑"></a>那些严重拖慢做题进度的题以及遇到的坑</h1><p>杭电204X</p>
<h2 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h2><p>这一题的关键是用字符数组来捕捉每一位的数，因为存在十进制以上的数，还要捕捉特定的那些字母，对于其他的就可以用数字和字符的关系来进行转换。</p>
<p>还有一个细节就是负号，取余的时候用正数会比较方便，因此最后不要忘记负号。</p>
<p>关键代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">switch (n % r)</div><div class="line">&#123;</div><div class="line">    case 10:</div><div class="line">        a[i] = &apos;A&apos;;</div><div class="line">        break;</div><div class="line">    case 11:</div><div class="line">        a[i] = &apos;B&apos;;</div><div class="line">        break;</div><div class="line">    case 12:</div><div class="line">        a[i] = &apos;C&apos;;</div><div class="line">        break;</div><div class="line">    case 13:</div><div class="line">        a[i] = &apos;D&apos;;</div><div class="line">        break;</div><div class="line">    case 14:</div><div class="line">        a[i] = &apos;E&apos;;</div><div class="line">        break;</div><div class="line">    case 15:</div><div class="line">        a[i] = &apos;F&apos;;</div><div class="line">        break;</div><div class="line">    default:</div><div class="line">        a[i] = &apos;0&apos; + n % r;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>遇到的坑：</p>
<ul>
<li>一开始没有加default，为了图方便最后一个case没加break，后来加了default之后没意识到…狠狠坑了我一把</li>
<li>做题的时候思路要清晰，需要对余数大于小于10进行分类讨论，一个default就直接包含其中一种情况了</li>
<li>当感觉难以下手的时候不妨在纸上写下自己的思路！！！</li>
</ul>
<h2 id="一张桌子吃饭的并查集问题"><a href="#一张桌子吃饭的并查集问题" class="headerlink" title="一张桌子吃饭的并查集问题"></a>一张桌子吃饭的并查集问题</h2><p>并查集这个其实不是很难，只要把模板套上去就可以了</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">int fa[maxn];  // fa是father的简写</div><div class="line"></div><div class="line">void init(int n)</div><div class="line">&#123;</div><div class="line">    for (int i = 0; i &lt; n; ++i)</div><div class="line">    &#123;</div><div class="line">        fa[i] = i;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">int find(int n)</div><div class="line">&#123;</div><div class="line">    if (fa[n] == n)</div><div class="line">        return n;</div><div class="line">    return fa[n] = find(fa[n]);  // 赋值语句的前半句可以减少递归次数从而提高程序的效率</div><div class="line">&#125;</div><div class="line"></div><div class="line">void connect(int x, int y)</div><div class="line">&#123;</div><div class="line">    x = fa[x];</div><div class="line">    y = fa[y];</div><div class="line">    if (x != y)</div><div class="line">        fa[x] = y;  // 连接的是头头</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>遇到的坑：</p>
<ul>
<li>要注意的是实际问题的编号很可能不是从0开始的，所以init函数循环可能要改一下才符合实际情况，今天就是这个地方一直WA</li>
</ul>
<h2 id="输出杨辉三角"><a href="#输出杨辉三角" class="headerlink" title="输出杨辉三角"></a>输出杨辉三角</h2><p>这一题其实并不难，我是用杨辉三角的每个数的公式做的，也就是用到了排列组合的性质，然而排列组合的公式挖了个大坑</p>
<p>组合数公式：Cn,m = An,m / m!</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">if (n - m &lt; m)</div><div class="line">    m = n - m;</div><div class="line">for (int i = 0; i &lt; m; ++i)</div><div class="line">    rst *= (m - i);</div><div class="line">for (int j = 2; j &lt;= m; ++j)</div><div class="line">    rst /= m;</div><div class="line">retrurn rst;</div></pre></td></tr></table></figure>
<p>遇到的坑：</p>
<ul>
<li>主要是忘记公式了，再加上思维很混乱于是就一直都有问题</li>
</ul>
<h2 id="求集合中的A-B"><a href="#求集合中的A-B" class="headerlink" title="求集合中的A-B"></a>求集合中的A-B</h2><p>其实挺简单的，多来几个循环进行判断就可以了</p>
<p>遇到的坑：</p>
<ul>
<li>初始化的两个输入值中可以有一个为零的，所以在输入的判断中就不能直接<code>while (scanf(&quot;%d %d&quot;, &amp;n, &amp;m) != EOF &amp;&amp; m &amp;&amp; n)</code>了，而是要在while中进行break:<code>if (n == 0 &amp;&amp; m == 0) break;</code></li>
</ul>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>今天做题的效率十分低下，就是因为出现了这些大大小小的问题，希望以后做题的时候思路可以更清晰一点，不要再在这些坑爹的问题上耽误时间了，吃一堑长一智！</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[求最大公约数和最小公倍数]]></title>
      <url>https://blog.patrickcty.cc/2017/02/15/%E6%B1%82%E6%9C%80%E5%A4%A7%E5%85%AC%E7%BA%A6%E6%95%B0%E5%92%8C%E6%9C%80%E5%B0%8F%E5%85%AC%E5%80%8D%E6%95%B0/</url>
      <content type="html"><![CDATA[<h1 id="求最大公约数和最小公倍数"><a href="#求最大公约数和最小公倍数" class="headerlink" title="求最大公约数和最小公倍数"></a>求最大公约数和最小公倍数</h1><h2 id="最小公倍数"><a href="#最小公倍数" class="headerlink" title="最小公倍数"></a>最小公倍数</h2><p>公式：</p>
<blockquote>
<p>最小公倍数 = x * y / x与y的最大公约数</p>
</blockquote>
<h2 id="最大公约数"><a href="#最大公约数" class="headerlink" title="最大公约数"></a>最大公约数</h2><ul>
<li>辗转相除法：用大的数除以小的数，如果有余数，就用小的数除以余数，一直到没有余数，这时候当前的除数也就是上一轮的余数为最大公约数</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">if (x &lt; y)</div><div class="line">    swap(x, y);</div><div class="line">while (x % y)</div><div class="line">&#123;</div><div class="line">    c = x % y;</div><div class="line">    x = y;</div><div class="line">    y = c;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最大公约数就是y， 也就是除尽之前的余数</p>
<ul>
<li>相减法：用大的数减小的数，如果相减后的结果不和小的数相同，则继续相减，得到相同的结果就是余数</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">if (x &lt; y)</div><div class="line">    swap(x, y);</div><div class="line">while (x - y != y)</div><div class="line">&#123;</div><div class="line">    c = x - y;</div><div class="line">    x = y;</div><div class="line">    y = c;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最大公约数就是y</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ACM输入输出套路汇总]]></title>
      <url>https://blog.patrickcty.cc/2017/02/15/ACM%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E5%A5%97%E8%B7%AF%E6%B1%87%E6%80%BB/</url>
      <content type="html"><![CDATA[<h1 id="ACM输入输出套路汇总"><a href="#ACM输入输出套路汇总" class="headerlink" title="ACM输入输出套路汇总"></a>ACM输入输出套路汇总</h1><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p>注意输入不要死套模板！比如刚才有道题输入可以有一个为零，但是我套模板就卡了半天！一直没发现错误！</p>
<h3 id="输入中有一-多个n来指示输入的情况"><a href="#输入中有一-多个n来指示输入的情况" class="headerlink" title="输入中有一/多个n来指示输入的情况"></a>输入中有一/多个n来指示输入的情况</h3><ul>
<li>输入的都是数字/字符</li>
</ul>
<p>这个就比较简单了，直接两层循环读取输入的数字</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">scanf(&quot;%d&quot;, &amp;n);</div><div class="line">while (n--)</div><div class="line">&#123;</div><div class="line">    scanf(&quot;%d&quot;, &amp;num);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>后面读取的是字符串</li>
</ul>
<p>这个地方容易遇到坑，字符串一直都是比较麻烦的</p>
<p>1.用gets()读取字符串<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">char a[1000];</div><div class="line">gets(a);</div></pre></td></tr></table></figure></p>
<p>2.用scanf读取字符串<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">char a[1000];</div><div class="line">scanf(&quot;%s&quot;, a);</div></pre></td></tr></table></figure></p>
<p>但是注意两者都是有坑的！</p>
<p>gets()输入的时候如果前面还有输入的就要加一个getchar()<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">scanf(&quot;%d&quot;, &amp;n);</div><div class="line">getchar()</div><div class="line">char a[1000];</div><div class="line">gets(a);</div></pre></td></tr></table></figure></p>
<p>原因是gets会把前面scanf输入没有读取的换行符也当做需要的读取进去，这就导致读取的内容“少一行”，所以要用一个getchar来吸收这个换行符。<br>还有就是gets由于<a href="http://www.cnblogs.com/ngnetboy/archive/2012/11/26/2789410.html" target="_blank" rel="external">存在安全隐患</a>被废除了，用倒是可以用，不过官方不推荐，所以最好不要用，不过gets比fgets方便一些，竞赛的话，看个人喜好了。</p>
<p>关于fgets</p>
<blockquote>
<p>定义函数：har <em> fgets(char </em> s, int size, FILE * stream);</p>
<p>函数说明：fgets()用来从参数stream 所指的文件内读入字符并存到参数s 所指的内存空间, 直到出现换行字符、读到文件尾或是已读了<strong><em>size-1</em></strong> 个字符为止, 最后会加上NULL 作为字符串结束.</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">char a[1000];</div><div class="line">fgets(a, 1000, stdin);  // 这家伙把换行符也读进去了，输出的时候就不用加换行符了</div></pre></td></tr></table></figure>
<p>scanf输入的时候字符串中<strong>不能有空格</strong>！不然就会在空格处停下来，有空格的就不考虑scanf.</p>
<h3 id="没有设有特定的提示输入来告诉你输入多少"><a href="#没有设有特定的提示输入来告诉你输入多少" class="headerlink" title="没有设有特定的提示输入来告诉你输入多少"></a>没有设有特定的提示输入来告诉你输入多少</h3><p>这时候就要用输入函数的返回值来判断了</p>
<ul>
<li>scanf</li>
</ul>
<p>当输入成功的时候，返回值是输入成功的数字的大小，部分成功也会返回成功个数。而发生错误或者end of file则返回EOF</p>
<p>所以可以这样判断:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">while (scanf(&quot;%d %d&quot;, &amp;m, &amp;n) == 2 &amp;&amp; m &amp;&amp; n)</div><div class="line">&#123;&#125;</div></pre></td></tr></table></figure></p>
<p>或者:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">while (scanf(&quot;%d&quot;, &amp;m) != EOF)</div><div class="line">&#123;&#125;</div></pre></td></tr></table></figure></p>
<p>上面这种也可以简写为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">while (~scanf(&quot;%d&quot;, &amp;m))</div><div class="line">&#123;&#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>gets/fgets</li>
</ul>
<p>这两个函数在成功的时候都会返回相应的指针，也就是数组名， 而失败就会返回NULL，因此可以:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">while (gets(a))</div><div class="line">&#123;&#125;</div></pre></td></tr></table></figure></p>
<p>输入的话基本就是这两大类了，其中根据不同的情况再做改变，比如说输入0结束，这就很简单了，稍微改一下就可以了。</p>
<h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p>输出的话主要是要判断是不是最后一个元素，像一行输出特别多组数据的时候特别要注意，因为涉及到换行。</p>
<p>下面这种就是缩短了循环，把特殊情况独立出来了，这样就避免了判断，当然判断i是不是等于n-1也是可以的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">for (int i = 0; i &lt; n - 1; ++i)</div><div class="line">&#123;</div><div class="line">    printf(&quot;%d &quot;, a[i]);</div><div class="line">&#125;</div><div class="line">printf(&quot;%d\n&quot;, a[n - 1]);</div></pre></td></tr></table></figure></p>
<p>还有的是最后一行不留换行等等，一定要看清楚题！不然很容易踩坑！暂时想到这么多，后面还有新的再补充！</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[《偷影子的人》]]></title>
      <url>https://blog.patrickcty.cc/2017/02/13/%E3%80%8A%E5%81%B7%E5%BD%B1%E5%AD%90%E7%9A%84%E4%BA%BA%E3%80%8B/</url>
      <content type="html"><![CDATA[<h1 id="《偷影子的人》"><a href="#《偷影子的人》" class="headerlink" title="《偷影子的人》"></a>《偷影子的人》</h1><h2 id="开始之前"><a href="#开始之前" class="headerlink" title="开始之前"></a>开始之前</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;和《追风筝的人》《摆渡人》一样，这本书也是十分畅销的欧美小说，并且这三本还被并列提到，但是我感觉无论是从内从还是题材上，《追风筝的人》比起另外两本都更胜一筹。</p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;男主小时候就是一个普通的小孩子，但是他有一个神奇的能力——与影子交谈。总感觉“我”是一个十分奇怪的人，可能也是因为爸爸的离开，以及进入新的环境。能力让“我”结识了吕克，伊凡，克蕾尔…并且用这个能力帮助了其他人。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;比较有趣的一个人物就是伊凡了，伊凡一开始是学校的一名保安，他在操场上解救了受罚打扫操场的“我”，伊凡也是“我”用能力第一个帮助的人，也是“我”的第一个朋友。不过伊凡这个人还是有一定的疑点，每次伊凡与“我”见面的时候都只有两个人，而且那次工具房的火灾中，也只有“我”记得伊凡的存在，最可疑的是，最后在凌晨三四点那个时候，伊凡出现在了学校操场，那个老地方，来引导我走出内心的彷徨。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;回想这些疑点，我比较同意伊凡是“我”内心的投影这个说法，他总是在“我”最迷茫最无助的时候出现，特别是最后一次的时间，出现得太奇怪，不过也不排除是作者为了填坑而强行增加的段落…</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;另外一个比较重要的人物就是苏菲了，苏菲是“我”的前女朋友，但是由于“我”不能承受起这份感情，他们分手了，苏菲在分手的时候的那张字条上的话真的十分让人触动。也是那么体贴，让我想起了你的那番话，即使分手了，他们还是好朋友，还能一起吃饭，一起玩耍。而我呢，我却选择不再联系，相忘于江湖。这应该也不是一件坏事吧，正是因为爱的深沉才难以放下，正是因为距离，所以做朋友，就更难找到一直保持关系的理由。就像苏菲最后找到了吕克，我希望你也能找到爱你的，让你快快乐乐的那个人。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最后克雷尔这个结局还是很棒的，不过我总感觉很扯，这么多年的默默守候，这么多年的等待一个杳无音讯的人，甚至是小时候的一个人。尽管小说中刻画得很美好，不过现实中真的会这么顺利么？不过小说毕竟是小说，能给予我们温暖与感动不就够了么？</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;看的时候，看完都感觉心里暖暖的，这样的小说，似乎也不错呢～–</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[《Heidi》]]></title>
      <url>https://blog.patrickcty.cc/2017/02/11/%E3%80%8AHeidi%E3%80%8B/</url>
      <content type="html"><![CDATA[<h1 id="《海蒂和爷爷》"><a href="#《海蒂和爷爷》" class="headerlink" title="《海蒂和爷爷》"></a>《海蒂和爷爷》</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;每个人的心都是一座孤岛，但是就是有这样的存在，能连接孤岛，但相反也同样会有这样的存在让孤岛更加封闭。而海蒂无疑是前一种。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;其实本片的原名是《Heidi》，我也觉得这样更为合理，因为Heidi就是那个连接孤岛的人。</p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我觉得海蒂某种方面上和《摆渡人》中的迪伦是有点相像的，她们都是那么善良，那么乐观。即使被姨妈抛弃到爷爷这里，即使一开始不被爷爷待见，他还是留在爷爷身边。就这样，她慢慢打开了爷爷的心，让爷爷一开始的想把她送走，到照顾她，为她打造椅子，疼爱她…</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当海蒂与爷爷以及朋友彼得过着无拘无束的日子的时候，把海蒂抛弃的姑妈又把海蒂骗到豪宅里去了，为了可怜的赏钱。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在豪宅中，海蒂认识了因为疾病而不能走路的大小姐克拉拉，海蒂的出现，让克拉拉的笑容重新洋溢在脸上。但是她并不快乐，她被困在豪宅中了，即使学会了礼仪，即使学会认字，即使吃的住的都是最好的，他都不快乐，她是一只鸟，属于天空，而豪宅就像一只笼子，将她困住了，思念成疾的她甚至梦游在门口眺望着故乡。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最后她终于回到了故乡，并且之后也把克拉拉“带”了过来，在一次出去游玩的过程中，因为轮椅被彼得推下悬崖，克拉拉不能移动，但是看到了飞着的蝴蝶，克拉拉奇迹般的站了起来，并且又能再次再地上行走。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这部电影人物比较多，但是又完全不显得杂乱，即使只出现过很少的时间的任务，性格特点也十分凸显。</p>
<h2 id="人物"><a href="#人物" class="headerlink" title="人物"></a>人物</h2><h3 id="海蒂"><a href="#海蒂" class="headerlink" title="海蒂"></a>海蒂</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;她善良，包容，她愿意把自己的一半午餐分给皮特让他不打山羊。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;她率真向往自由，电影开始的时候，就有海蒂脱下她一身的洋装，在草丛中奔跑～这个与她回到爷爷身边的时候的情景相互呼应～</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;她关心他人，在豪宅的时候，“偷面包”的情景多次出现，而她并不是因为没见过世面，而是记住了彼得的奶奶不能吃硬面包于是想把她吃的软面包送给她，真是一个体贴的孩子~</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;她打开了爷爷的内心，打开了克拉拉的内心。他的笑容如冬日的卵样，夏日的清风，直击人心。她用她的笑容默默地改变这个世界，所幸世界没有改变她的笑容～</p>
<h3 id="爷爷"><a href="#爷爷" class="headerlink" title="爷爷"></a>爷爷</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;爷爷是一个被人误解的人，他独自生活在山上，一直被人当怪物看待。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;但事实上爷爷是一个很棒的人，他勤恳，善良，理解他人。他只是封闭了他的心灵，我想这很有可能是他的老伴还有女儿女婿的过世所造成的。所幸海蒂出现了，海蒂打开了他封闭的内心，他愿意接纳他人了，甚至还变得风趣了，最后看他撩克拉拉的奶奶的时候，真的好暖啊哈哈。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最令我印象深刻的有两处，第一处是海蒂听彼得说爷爷杀了人之后的怀疑，但是爷爷只是镇定地说了下面这句话：</p>
<blockquote>
<p>人们就喜欢谈论些坏的东西，你需要自己做判断，相信自己的眼睛和耳朵还是相信那些流言？</p>
</blockquote>
<p><img src="https://okdkbnczs.qnssl.com/image/movies/heidiC1.png" alt="爷爷的话1"><br><img src="https://okdkbnczs.qnssl.com/image/movies/heidiC.png" alt="爷爷的话2"></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;另一处就是当彼得把克拉拉的轮椅推下悬崖之后爷爷察觉到了对彼得说话的场景，真的是帅爆了！！！</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;爷爷忍受着寂寞，无视着他人的眼光，封闭地过着，但幸运的是他遇到了海蒂，他放开了他自己。真的很让人欣慰。</p>
<h3 id="克拉拉"><a href="#克拉拉" class="headerlink" title="克拉拉"></a>克拉拉</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;克拉拉不是脾气古怪，只是太孤独了。没有同龄人的陪伴，没有了父母的陪伴，被困在家里，造就了她内心的忧郁。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;因此当她知道海蒂要离开时的，是那么的失态，那么的耍大小姐脾气，她的痛苦，恐怕只有她自己才能理解。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;不过正是有了海蒂，她的痛苦才会被隐藏，而海蒂走的时候，那种绝望，又再次扑面而来。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;其实她是一个性格很好的人，她也有着温暖的笑容~</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;而在阿尔卑斯山上，看到那一望无际的美景，看到飞舞的蝴蝶，再加上友情，她的伤终于痊愈，她也勇敢的站了起来，终于她克服了内心的障碍，重新开始了行走~</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;丢掉了轮椅的同时，锁着内心的锁链也丢掉了，她完全打开了内心，她重新找到了自我~</p>
<h3 id="彼得"><a href="#彼得" class="headerlink" title="彼得"></a>彼得</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这是一个比较矛盾的人，他偷吃海蒂的东西，他在海蒂被姨妈强行接走的时候不向爷爷说情况，他把克拉拉的轮椅推下悬崖。他性格古怪，嫉妒，自我。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;不过从背后我们可以看出彼得并不是那么一无是处，至少他陪海蒂度过了那么多个白天，他是海蒂的好朋友。而我相信海蒂一定也让他改变了不少~</p>
<h3 id="姨妈"><a href="#姨妈" class="headerlink" title="姨妈"></a>姨妈</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;姨妈出现的场景虽然不多，但总是很狼狈，放下海蒂之后狼狈地逃走，狼狈地被爷爷赶走，狼狈地抓着海蒂逃走233。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;她为了一点钱不惜让海蒂，爷爷，彼得得生活都改变了。自私，不负责任，两面三刀的形象跃然于荧幕之上。</p>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;影片真的让人觉得暖暖的~最后的结局也十分棒~情节也比较紧凑，真的有好多可以回味的内容~</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;还有克拉拉妹子也很漂亮呀~</p>
<p><img src="https://okdkbnczs.qnssl.com/image/movies/heidi2.jpg" alt="原来妹子这么高～"></p>
<h2 id="评分"><a href="#评分" class="headerlink" title="评分"></a>评分</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;9/10。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;剧情丰富，情节温暖，人物性格丰满，好片~</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[《摆渡人》]]></title>
      <url>https://blog.patrickcty.cc/2017/02/11/%E3%80%8A%E6%91%86%E6%B8%A1%E4%BA%BA%E3%80%8B/</url>
      <content type="html"><![CDATA[<h1 id="《摆渡人》"><a href="#《摆渡人》" class="headerlink" title="《摆渡人》"></a>《摆渡人》</h1><h2 id="开始之前"><a href="#开始之前" class="headerlink" title="开始之前"></a>开始之前</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一开听到这个名字我是拒绝的，原因就是那个之前微博上大家都喜欢，然而网友却不认可的事情。还好这本同名的书与这件事并没有任何关系。</p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;其实一开始的剧情是十分吸引人的，本来以为是一个普通的看望父亲的旅途，没想到火车出现了事故，本来以为只女主一个人活下来了，没想到她原来是在这次事故中丧生了。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;前半本书讲述的就是迪伦和崔斯坦一起穿越荒原的过程。从一开始的怀疑，到之后的初步了解，然后是深厚友谊，最后终于变成了爱情。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这一部分描写得还不错，关系也发展得很合理，不过我总觉得这部分很乏味。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;但是当最后的时候，迪伦的感情开始爆发，他们又不得不分开。比较巧妙的一点就是迪伦的情绪会直接影响到环境，特别是最后在湖面上那一部分，表现得尤其到位。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;第二部分是穿过荒原以后，后来穿过荒原之后迪伦坚定了对崔斯坦的感情，并且决定做出一个没有人成功的行动：返回荒原，寻找崔斯坦。她独自克服重重困难以后他们终于又汇合了，最后他们一起回到了现实世界，并且崔斯坦也终于成为了一个真正的人。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这本书最大的亮点就是人物心理活动的描写，人物的情感一直十分到位。不过我还是喜欢剧情类的……所以这本书看起来有时候会很乏味……</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;比较有趣的就是崔斯坦这个人，摆渡了无数人，那些人在意的却只是他们自己，迪伦是第一个也是唯一一个关心在意他的人。或许正是迪伦改变了他，他不再只是一个冷冰冰的摆渡机器，迪伦让他成为了一个真正的人。他也是一个会犹豫迟疑的人类，而不是无畏万能的摆渡人。正是因为这样，他才和迪伦一起，回到人类世界，成为真正的人类。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;很幸运再这么久的孤独之后，他终于能遇到对的人，在渡别人的时候把自己也渡了。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最后的结尾也很有意思，迪伦在隧道里被救治，而崔斯坦并不在身边，但当她被抬出隧道，崔斯坦在那个同样的地方等着她。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;爱情真好。(脸红</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[《嫌疑人X的献身》]]></title>
      <url>https://blog.patrickcty.cc/2017/02/09/%E3%80%8A%E5%AB%8C%E7%96%91%E4%BA%BAX%E7%9A%84%E7%8C%AE%E8%BA%AB%E3%80%8B/</url>
      <content type="html"><![CDATA[<h1 id="《嫌疑人X的献身》"><a href="#《嫌疑人X的献身》" class="headerlink" title="《嫌疑人X的献身》"></a>《嫌疑人X的献身》</h1><h2 id="开始之前"><a href="#开始之前" class="headerlink" title="开始之前"></a>开始之前</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这是我在kindle上看完的第一本书，我个人是对悬疑比较抗拒的，但是因为在家实在太无聊以及坑爹的网速于是我就点开了沉睡在kindle中的这本书。</p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这本书的悬疑还是到位的，在叙述中一直隐藏了一个真相直到书的最后才揭露。故事情节不就不多说了，人物以及人物背后的情感才是给我留下来最深印象的部分。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这本书里有三种爱情。</p>
<h3 id="死缠烂打不择手段的爱情——富坚"><a href="#死缠烂打不择手段的爱情——富坚" class="headerlink" title="死缠烂打不择手段的爱情——富坚"></a>死缠烂打不择手段的爱情——富坚</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;他就是造成这一切的男人，在失业之后，他的本性暴露：一个暴躁无能的男人，用暴力来发泄自己的无能。即使分手之后依旧死缠烂打，用流氓的行为来纠缠，最后不慎被靖子勒死。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这种人，可以说是最差劲的男友的模板，也是最令人厌恶的前男友的模板。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;现在对家庭暴力以及离婚后的纠缠不休似乎并没有什么好的处理方法，特别是国内，家庭暴力一般都被大事化小小事化了，如果法律的武器能严惩这类人那就再好不过啦，不过这中间似乎还有很长的路要走呢。</p>
<h3 id="隐忍不逾界的爱情——工藤"><a href="#隐忍不逾界的爱情——工藤" class="headerlink" title="隐忍不逾界的爱情——工藤"></a>隐忍不逾界的爱情——工藤</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;工藤先生对靖子的帮助不可谓不大，当靖子还在酒廊的时候他就照顾她的生意，即使开房的要求被拒绝了也还是继续像朋友那样。当得知靖子已经结婚后就保持了距离，不再私下单独见面。当发现富坚对她不好之后更是出钱请律师帮她摆脱渣男。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;容易让人诟病的是上面的这些事都是在他有妻子女儿的时候做的，书里的说法是因为妻子重病，工藤为了寻找心里的慰藉而去酒廊。这也算是在情理之中吧。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在得知靖子的前老公死亡后，他出现了，并且想和靖子在一起。为什么不早点时间找到靖子呢？因为他有家室，因为他没有理由再去找她。而现在，他的妻子已亡，孩子也不在他的身边，再加上她的前男友刚刚去世，这是一个绝佳的时机。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;对于这样一个君子，叫君子应该不为过，我是十分佩服的，如果他和靖子在一起了我想她一定会幸福的。</p>
<h3 id="大爱无言——石神"><a href="#大爱无言——石神" class="headerlink" title="大爱无言——石神"></a>大爱无言——石神</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;而石神的爱情则是本书中最为壮烈又深沉的，因此我把它放在了最后。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;爱情的起源是因为靖子“救了”他，当他感觉人生灰暗没有意义准备上吊自杀的时候，靖子出现了，点亮了他灰暗的人生。但是他并没有采取什么特别的行动，只是默默注意着靖子，并且每次在靖子在的时候去照顾他的生意。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;而当靖子杀死富坚之后他又帮靖子处理尸体，出谋划策甚至为了他不惜杀死另一个人来帮她掩盖真相。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;即使知道靖子喜欢的不是自己，即使知道靖子对工藤的感觉，即使他吃了醋，给工藤发了骚扰信息（也许只是为了掩盖案情？），但最后石神还是牺牲了自己想让靖子和工藤一起过上幸福的生活。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;究竟是什么让他付出了这么多？我想一是因为靖子对于他来说就是救赎，再加上他的那个做出自认为最合理行为的性格，于是就有了为了自己的救赎把自己都搭进去的行为。尽管小说中把石神描述得很神：天才数学家，设局把警察耍得团团转，十分冷静…但是书中从细节还流露出了他也是一个有血有肉的人，他也会因为有喜欢的人而在意外表，他也会吃醋。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这份爱情是如此的厚重，又如此的隐蔽，只是这爱情可惜结局并不好。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;而靖子无疑是一个幸运又不幸的人，他被这么多人爱，没没有得到自己的爱情。</p>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;珍爱生命，远离渣男…</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[《断背山》]]></title>
      <url>https://blog.patrickcty.cc/2017/02/09/%E3%80%8A%E6%96%AD%E8%83%8C%E5%B1%B1%E3%80%8B/</url>
      <content type="html"><![CDATA[<h1 id="《断背山》"><a href="#《断背山》" class="headerlink" title="《断背山》"></a>《断背山》</h1><h2 id="开始之前"><a href="#开始之前" class="headerlink" title="开始之前"></a>开始之前</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这是一部经典的电影，我说这个，相信很多人会笑。尽管题材比较敏感，但不可否认的是这确实是一部好电影。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;看之前我还很忐忑，因为害怕可能有些不适应以及那些敏感的原因，不过在看的时候，我真的完全抛开这些了。</p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这是一部很克制的电影，特别是男主的爱情表现上很克制，但是他们的爱情却并不克制。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;他们相遇于断背山，相爱与断背山，可以说断背山就是他们爱情的象征。但是由于工作结束了，他们不得不分开，从此多年杳无音讯。多年后他们又相见了…</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;剧情这部分<a href="https://zh.m.wikipedia.org/zh-cn/%E6%96%B7%E8%83%8C%E5%B1%B1" target="_blank" rel="external">维基百科</a>写得很好，一些细节也指出来了。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;他们的爱情是如此克制，因为世俗不让他们光明正大的那么做，同性恋被人仇恨，他们也都有家室。他们是最苦的异地恋，每年只有很少的时间可以相见。也因为这个，恩尼斯也与妻子离婚，后来谈的女友也没有走到一起，而杰克过的生活也不幸福，每天都被思念所困扰。最后杰克在轮胎打气的时候死亡，恩尼斯也一个人过着生活…</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;杰克是那个主动的一个，也是将两人的煎熬表现出来的那一个，两人的开始也是因为杰克不知觉的行为。而恩尼斯是那个默默忍受，很少言语的那个，尽管他没有明确表达出他的感情，不过我相信他承受的一定不比杰克少。最让我触动的是他们最后一次见面在断背山的那一幕场景，这是他们相遇的第二十个年头，生活太残酷了，他们也不得不低头，杰克梦想中的那种美好的日子也是再也没办法继续了…</p>
<p><img src="https://okdkbnczs.qnssl.com/image/movies/brokebackM.png" alt="嗯哼"></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;结尾的场景也十分动人，借用维基百科的段落：</p>
<blockquote>
<p>最后，艾尼斯的大女儿驱车来访，邀请他参加她的婚礼，艾尼斯默然，忆起杰克，过往的沧海桑田，对比女儿走向婚姻的结局，是喜悦，更多的是怅然。一直未能尽人父关怀的艾尼斯答应了女儿的邀约，女儿展露笑容。目送女儿走后，艾尼斯打开衣柜，柜门钉著一张断背山的明信片，两件老衬衣挂在明信片下，但此回艾尼斯已将自己的衬衣“包裹”住杰克了。艾尼斯蹙眉，轻声呢喃：“杰克，我发誓……”。</p>
</blockquote>
<h2 id="评分"><a href="#评分" class="headerlink" title="评分"></a>评分</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;9/10。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;经典不必多说，情节很让人触动。即使是很久之前看的电影，但是一回想起来，脑海还是会被忧伤占据。</p>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;说实话，写这一篇的时候我也不知道说些什么，因此内容也比较凌乱。那种悲伤的感觉，很难表达出来。所以就只能这样了。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[一加三T使用体验]]></title>
      <url>https://blog.patrickcty.cc/2017/02/05/%E4%B8%80%E5%8A%A0%E4%B8%89T%E4%BD%BF%E7%94%A8%E4%BD%93%E9%AA%8C/</url>
      <content type="html"><![CDATA[<h1 id="一加3T使用体验"><a href="#一加3T使用体验" class="headerlink" title="一加3T使用体验"></a>一加3T使用体验</h1><h2 id="开始之前"><a href="#开始之前" class="headerlink" title="开始之前"></a>开始之前</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;前段时间，手机屏幕摔坏了，因为早就有了换手机的想法，于是也就不打算继续用下去了。但是当时市面上一直没有比较完美的手机，各方面比较符合我要求的就是S7 Edge了，然而由于是比较旧的机型，用的还是Micro USB接口，再就是在京东上看到的那些屏幕品控差的一些评价，最重要的是国行依旧昂贵的价格，让我放弃了。港行还有其他渠道的话，虽然比较便宜，但是因为这是一个大坑，我也不敢去趟，于是还是放弃了。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;后来我想到，既然一部手机不能满足我的要求，那两部呢？最后锁定在了一加3T和荣耀8。一加的拍照和性能，荣耀的小屏和吊炸天的玻璃后壳，如果两者可以合并那简直是完美啊。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;再考虑到拍照和Google的方便程度之后，我先选择的是一加3T。到现在为止已经挺长时间了，这么长的深度使用时间，再加上家里没网，正好只能安心写了233。</p>
<h2 id="总体评价"><a href="#总体评价" class="headerlink" title="总体评价"></a>总体评价</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;是一部好手机，性能没的说，日常使用也很舒服，只是有一些小毛病让人感觉系统优化还需要继续加油。</p>
<h2 id="硬件"><a href="#硬件" class="headerlink" title="硬件"></a>硬件</h2><ul>
<li>屏幕</li>
</ul>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这一代饱受诟病的就是这块5.5’1080P的Amoled屏幕，很多人都说辣眼睛，然而我可是用过pro5的5.7’1080P的Amoled屏幕，所以其实并没有网上说的那么不好。只不过自动亮度真的是太坑爹了，每次都特别亮，还是得手动调…还是pro5自动亮度优化得好。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;然后经过大米的推荐我开了屏幕的sRGB模式，第一次感觉非常偏黄，不过用久了感觉就是之前的屏幕加上了一个LOMO风格滤镜，现在用久了看起来完全没有什么不适应的感觉。</p>
<ul>
<li>外观</li>
</ul>
<p><img src="https://okdkbnczs.qnssl.com/image/others358033289.jpg" alt="俯视图"></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;说实话，外观比照片好看多了，到手之前我觉得背后的摄像头十分的丑，其实拿到手之后感觉整体真的很棒：后壳的弧度，以及简约的设计，硬朗的边角不至于下滑，那个摄像头的外观反而不重要了。而且这次耳机的开孔在下面！终于移到下面来了！之前在上面总感觉十分的违和…而且这次放到下面使得机身顶部没有开孔！一体化！</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;另外就是纳米注塑条真的很优雅，不知道比pro5的金属三段式高到哪里去了，pro5后盖的那些裂纹真的太操蛋了，而且超级容易裂开…从此金属三段式一生黑…</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一个槽点就是音量键和电源键十分松动，而且似乎还不是个例…不过我还可以接受吧…</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;颜色也挺好！自从用了pro5的黑色前面板之后，就不想再用白色面板了，因为现在的黑边设计，总是会有一些黑边出现，和白色就有些冲突，而黑色就完全一体化了～因此在枪灰和薄荷金之间果断选择了枪灰。这个颜色还挺不错的，类似于淡淡的咖啡色，看起来也很大气。（要是有黑色就最好了。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;另外值得一提的就是三段式按键，真的很方便啊，之前切换静音状态总是要好几步动作，现在直接一按就方便了～</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;home键也挺好用，尽管不能按压但是完全不会不习惯啊，倒是另外两个按键感觉一般，还是魅族的mBack要方便的多！至少完全避免了误触的问题！而且一个键的功能非要放在三个键上感觉还是有点太不简洁了。不过好的地方是按键可以自定义长按，双击的功能，这一点还是很好的～</p>
<ul>
<li>软件</li>
</ul>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;直接内置Google Service真的不能更爽！安了Play市场之后就自动激活了！之前用的pro5 Play市场一直是只能看不能下载软件的…终于可以更新shadowsocks了。(逃</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;氢OS的简约真的很棒，很多地方都接近于原生，这一点是我最喜欢的！</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;天气的app简直不能再棒！整体简约风格真的美极了！而且没有乱七八糟的资讯什么的功能！没有莫名其妙消不掉的红点！最棒的是重力感应的天气动画！炫酷到爆啊有木有！</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;氢视窗也很棒，把功能整合到一起了，桌面再也不需要小部件了～尽管现在用的频率还不多，不过真的很方便啊！</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;不过还是有不少地方用起来不爽的，比如把图标拖到文件夹里面去，有多困难只有用过的知道…还有桌面的背景，为什么其他界面都是毛玻璃啊，为什么图标一行只有三个…之前用的Nova，但是看在氢视窗于是就没有换回Nova，不过这图标排列还是需要我去适应orz。还有就是一些细节比如多任务如果锁定了就不能手动把这一个删掉，而之前flyme，MIUI都可以直接删掉的…另一个比较严重的问题就是误触，真的好容易误触…动不动就点不动了…原来是误触。之前还没意识到这个的严重性，现在我只想心疼一下用Z11和S7e的兄弟233。要吐槽的是滚动截图…虽然支持这个功能，不过只是单纯的把图拼起来…中间还有黑边…</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;细节的问题还有不少，不过类似原生真的太棒了，权限管理也够用，至少不用让我下载第三方的控制后台什么的app了！现在升了7.0终于摆脱了pro5万年的5.1~233。</p>
<ul>
<li>拍照</li>
</ul>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;尽管排的比较少，不过现在感觉还不错，不过可能是心理作用233，毕竟评测的都给这个摄像头很高的分233。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;之前用3T拍过夜景，感觉用了假的光学防抖…拍出来的照片都发虚…看着论坛上面对这个吐槽也很大…而且还是相位对焦…似乎是单色温闪光灯…这种地方就不要节省成本啦！</p>
<ul>
<li>续航</li>
</ul>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;并不尿崩并不尿崩并不尿崩！3400mAh感觉真的不错啊，有时候用一天还剩20%的电，至少现在对我来说是不错的。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Dash闪充的话，比起魅族的mCharge还是差了一点，明显感觉充电比pro5慢，但是可能是电池容量的问题，不过24W还是比20W高一些的。Dash这个速度已经很棒了，至少比某果万年的5V1A要好得多233。</p>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;似乎没有什么可说的了，总体而言一加3T使用体验真的很棒，因为我不玩游戏所以性能对我来说绝对是大大的够用的，也没有卡顿，2799的价格也能接受，比某爱国品牌还是要好一些滴。只是官方的保护壳太贵了orz，虽然材料看起来真的很棒啊。还在纠结要不要入一个中233。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;期待一加能做的越来越好把，氢OS也不要发展成ADUI那样就好了，继续轻且有趣～继续Never Settle！</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[那些很棒的设计]]></title>
      <url>https://blog.patrickcty.cc/2017/02/03/%E9%82%A3%E4%BA%9B%E5%BE%88%E6%A3%92%E7%9A%84%E8%AE%BE%E8%AE%A1/</url>
      <content type="html"><![CDATA[<h1 id="那些很棒的设计"><a href="#那些很棒的设计" class="headerlink" title="那些很棒的设计"></a>那些很棒的设计</h1><ul>
<li>大的盒装牛奶</li>
</ul>
<p><img src="https://okdkbnczs.qnssl.com/image/others/milk.jpg" alt="大的盒装牛奶"></p>
<p>就像标签上描述的一样，当你打开盖子的时候，也就顺便把牛奶打开了，不然徒手打开锡纸可没那么简单。</p>
<ul>
<li>麦斯威尔的速溶咖啡</li>
</ul>
<p><img src="https://okdkbnczs.qnssl.com/image/others/coffee.jpg" alt="麦斯威尔的速溶咖啡"></p>
<p>左侧那个热熔的区域，让撕开变成一个更简单的事情了，尽管从另一边也可以比较轻松地撕开，不过这个设计，让人眼前一亮～</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[我们各自乘风破浪]]></title>
      <url>https://blog.patrickcty.cc/2017/02/02/%E6%88%91%E4%BB%AC%E5%90%84%E8%87%AA%E4%B9%98%E9%A3%8E%E7%A0%B4%E6%B5%AA/</url>
      <content type="html"><![CDATA[<h1 id="我们各自乘风破浪"><a href="#我们各自乘风破浪" class="headerlink" title="我们各自乘风破浪"></a>我们各自乘风破浪</h1><h2 id="《乘风破浪》"><a href="#《乘风破浪》" class="headerlink" title="《乘风破浪》"></a>《乘风破浪》</h2><blockquote>
<p>我欲乘风破浪，踏遍黄沙海洋</p>
<p>与其误会一场，也要不负勇往</p>
<p>–Jam《七月上》</p>
</blockquote>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当我看到这个电影名的时候，这两句歌词马上跃然于我的脑海。看过电影之后才发现无论是旋律还是歌词都十分符合电影的意境。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;乘风破浪，和后会无期一样，这个名字也十分有韩寒特色，也是一个一看到就让人有无穷联想的名字。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这是一个关于兄弟义气的故事，这是一个好故事，老套，却又别有韵味。</p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;今天我们四人帮再度聚首，也是一年中难得的所有人都能到的时候了。四个不同的城市，各自有各自所忙的事情，各自有各自的生活，再也不是学校中的友谊就是一切了。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;不过总算是聚到了一起，大家还是熟悉的大家。之后，一起去看了《乘风破浪》。</p>
<p><img src="https://okdkbnczs.qnssl.com/image/diary1828665460.jpg" alt="老图1！～"></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;说实话，对这部片子我的第一印象是不是很好的，因为一是看了预告片感觉整部片子拍的乱七八糟，二是之前乘风破浪歌歌词内容所引起的争议，不过因为其他两部新年档的似乎更烂，于是决定看这一部，不过看完之后整体感觉剧情并不像预告片那样乱，整体还是挺好的。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;内容比较老套，感觉和《夏洛特烦恼》以及《重返二十岁》有点类似。主角在一次带着父亲飙车的过程中被火车撞到，昏迷之际穿越回了父亲年轻时的那个年代。认识到了父亲的讲义气，好的一面，并且和父亲一起出生入死。直到见证了自己的出生才终于醒来，回到了正常的时间。结局设置的还不错，留下了充分的想象空间。</p>
<blockquote>
<p>究竟他是不是真正穿越回了过去？<br>那个手势他的父亲还记得。但是如果真的穿越了父亲一定会知道关于阿浪的事情。没穿越的话孩子又是谁照顾的？</p>
</blockquote>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;想象空间留的比较足所以bug并不能算是真的存在。</p>
<h2 id="人物"><a href="#人物" class="headerlink" title="人物"></a>人物</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;另外，和《后会无期》一样，这部电影的人物也都十分活灵活现。讲义气，固执，神经大条，中二，热血，靠谱的阿正。傻乎乎，同样讲义气，中二的六一。以及不合群，默默离开的小马。温柔，在背后支撑着阿正的小花。还有同样讲义气，逗逼的阿浪。这一个个鲜活又平凡的人物构成了一个平凡又精彩的故事，即使出场比较少的小马，人物表现得也十分出彩。可以说人物是本片的一大亮点。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;但是一个人是可能改变的，阿浪原本眼中的老爸，就和年轻时时的形象完全不同，这种反差，也值得人仔细思考。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;得一友如阿正，得一妻如阿花，人生之幸运也。</p>
<h2 id="评分"><a href="#评分" class="headerlink" title="评分"></a>评分</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;总分8/10。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;人物9/10，情节7/10，结尾9/10。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;人物刻画以及结尾都比较出彩，情节还是比较老套。和兄弟一起看还是比较爽的。</p>
<h2 id="回归标题"><a href="#回归标题" class="headerlink" title="回归标题"></a>回归标题</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这次聚会之后，下次再次见面又不知道时何时，今后大家只怕会是更加忙碌，更难再见面了，但现在的我们也不是以前那个懵懂的少年了，我们有自己的目标，有自己的想法，有自己的安排，有属于自己的未来，这样也就够了。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;能抽出一天的时间，大家一起闲扯，一起打牌，一起看电影，一起吃饭，岂不也是人生一件快乐的事情？嗯哼？</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;以后嘛，就要各自乘风破浪咯～</p>
<p><img src="https://okdkbnczs.qnssl.com/image/diary495860735.jpg" alt="老图2～"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[《一个叫欧维的男人决定去死》]]></title>
      <url>https://blog.patrickcty.cc/2017/02/01/%E3%80%8A%E4%B8%80%E4%B8%AA%E5%8F%AB%E6%AC%A7%E7%BB%B4%E7%9A%84%E7%94%B7%E4%BA%BA%E5%86%B3%E5%AE%9A%E5%8E%BB%E6%AD%BB%E3%80%8B/</url>
      <content type="html"><![CDATA[<h1 id="《一个叫欧维的男人决定去死》"><a href="#《一个叫欧维的男人决定去死》" class="headerlink" title="《一个叫欧维的男人决定去死》"></a>《一个叫欧维的男人决定去死》</h1><h2 id="简短感受"><a href="#简短感受" class="headerlink" title="简短感受"></a>简短感受</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;受过伤的人，会把自己的内心封闭起来，会披上一身的刺。只有再次遇到愿意拥抱这身刺的人，他才会愿意暴露自己的脆弱，拿出自己的真心。受过伤的，是欧维，而去拥抱的，是帕维娜。</p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;欧维是一个命途多舛的人，在很小的时候，母亲就过世了，这时候父亲抚平了他内心的伤痕；而当他成为青年，父亲因为看到欧维的成绩太高兴以至于没注意被火车撞死，索尼娅的出现，帮助她走过了阴霾区，他们也过上了一段时间的幸福生活；然而之后的大巴车坠落山坡的事故中，索尼娅肚子中的孩子不幸夭折，索尼娅也被困在了轮椅上，后来索尼娅被癌症带走，无人可以抚慰他让他封闭了内心，成为了“刺头”；最后击垮他的是他被工厂辞退，他决定去死。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;说实话，欧维确实是一个令人烦的邻居，大事小事都要去管，并且态度很差，但是其实大家都知道他是一个深深爱着社区的人，是一个刀子嘴豆腐心的人，他也给了邻居们还有其他人很多帮助，而这些帮助也多次挽救了他的性命。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;故事是以欧维的几次自杀为分割来进行的，中间穿插着对过去的回忆，在临死之际，在不清醒的时候，回想着过去那些开心或者痛苦的时刻。邻居帕维纳的出现，阻止了好几次欧维的自杀，同是也慢慢的让欧维逐渐脱去了他那尖锐的外衣。欧维在她的“指导”下，去修了邻居的暖气，去教她开车，去接纳一个同志，去和其他人一起巡视，去收养那只受伤的猫……最后也是在帕维纳的帮助下，欧维说出了他的悲伤的过去，也让他得到了解脱，他开始找到了久违的幸福。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;而穿插的回忆，也很值得一提。从以前开始，欧维就是责任感，正义感爆棚却又十分木讷的人。尽管不善言语，尽管脾气很糟，但是他的行为，依旧为他带来了索尼娅，而索尼娅也让他成为了一个幸福的人，一个不那么暴躁的人。让我印象比较深刻的是，当知道他即将有孩子，他马上着手去做一个摇篮；为了妻子能好好进出教室，他冒着雨连夜做出了辅导。我想，正是因为看到了欧维的这些优点，索尼娅才决定把自己的一生托付给这个木讷的男人吧。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;生活中的灾难和变故真的很能摧残一个人，爱情也能让一个人变得更好。我突然想到了五月天《好好》中的那句歌词“我们都要把自己照顾好，好到遗憾无法打扰”，无论怎样，我们都要把自己照顾好，这样我们才能以最好的状态迎接我们的“索尼娅”以及“帕维纳”——那些能走进你心的人。</p>
<h2 id="评分"><a href="#评分" class="headerlink" title="评分"></a>评分</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;8.5/10。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;叙述方法很棒，感情很到位，只是比较琐碎，也是适合在安静的时候观看，最后也会有一种如沐春风的感觉～</p>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;平淡生活中的爱情才是真正的爱情。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;那些遗憾，就让它随风而去吧～</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[写完Java无聊于是就有了这样的一篇安利]]></title>
      <url>https://blog.patrickcty.cc/2017/02/01/%E5%86%99%E5%AE%8CJava%E6%97%A0%E8%81%8A%E4%BA%8E%E6%98%AF%E5%B0%B1%E6%9C%89%E4%BA%86%E8%BF%99%E6%A0%B7%E7%9A%84%E4%B8%80%E7%AF%87%E5%AE%89%E5%88%A9/</url>
      <content type="html"><![CDATA[<h3 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h3><p>必然是ubuntu</p>
<ul>
<li>可定制性高(好吧说白了我对linux了解不多，主要是因为好看方便才用的)</li>
<li>对开发者友好：安装什么模块之类的一行代码就解决了</li>
<li>流畅：谁用谁知道</li>
<li>逼格高</li>
</ul>
<p>当然我不玩游戏</p>
<p>当然我也想体验macOS</p>
<p>如果是习惯windows又想试试linux，装Deepin吧</p>
<h3 id="编程工具"><a href="#编程工具" class="headerlink" title="编程工具"></a>编程工具</h3><p>我选IDE</p>
<ul>
<li>相比编辑器，一体成型，不用折腾</li>
<li>看着顺眼（Vim的logo太丑，逃</li>
<li>不会用Vim这些…</li>
<li>学习成本相比Vim这些低太多了…</li>
<li>集成了数据库，控制台，终端…真心方便</li>
</ul>
<h3 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h3><p>必然Chrome</p>
<ul>
<li>火狐一天崩溃一百次的flash</li>
<li>丰富的插件</li>
<li>logo很漂亮…</li>
<li>Google光环加成</li>
<li>就是很吃内存…</li>
</ul>
<h3 id="笔记工具"><a href="#笔记工具" class="headerlink" title="笔记工具"></a>笔记工具</h3><p>有道云笔记</p>
<ul>
<li>一开始在支持MarkDown之前我还是无感的</li>
<li>然后这个MarkDown编辑器真的好用到没边</li>
<li>MarkDown是个好东西，不知道？自己学，五分钟上手</li>
<li>就是没有Linux的桌面版，然后网页版很捉急分屏的时候全部挤在一坨了…</li>
</ul>
<h3 id="暂时就想到这些了"><a href="#暂时就想到这些了" class="headerlink" title="暂时就想到这些了"></a>暂时就想到这些了</h3><p>以后有想法再更新吧</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[《无间道》]]></title>
      <url>https://blog.patrickcty.cc/2017/02/01/%E3%80%8A%E6%97%A0%E9%97%B4%E9%81%93%E3%80%8B/</url>
      <content type="html"><![CDATA[<h1 id="《无间道》"><a href="#《无间道》" class="headerlink" title="《无间道》"></a>《无间道》</h1><h2 id="开始之前"><a href="#开始之前" class="headerlink" title="开始之前"></a>开始之前</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这部电影的名字一直如雷贯耳，最近翻豆瓣电影的时候在很高的排名看到了这部电影，并且小米请了梁朝伟做了代言人，于是就决定去看了～</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;说实话，这部片子不太适合我，因为这种让我看得提心吊胆的片子我看的时候总会感觉不太舒服233。</p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这部片子足够精彩更足够刺激，两个组织以及两个卧底的相互博弈。片中梁朝伟和刘德华的演技都足够好，都演出了作为卧底的在那种时刻内心的焦虑等等。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;比较遗憾的是梁朝伟在电影中最终还是死了，说实话我挺喜欢这个角色的～</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;电影还探讨了一些其他方面的内容，关于正义与邪恶的选择。做卧底真的是一件很难的事情，特别是在黑社会中，随时都可能有生命危险，而且还会被几乎所有人误解，如果不是有一颗坚强的心脏以及出色的硬件条件，一个人是很容易走上不归路的。我庆幸阿仁也就是梁朝伟饰演的角色在剧中做到了，尽管如此艰难，在那十年中，他坚持住了自己，他依然信奉着绝对的正义，但也是因为这个，他最后被另一个卧底给击毙了。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;而刘德华饰演的刘警官，则是改邪归正，在黄警官死后，他的观点改变了，他亲手了结了他曾经的boss，浪子回头，千金不换。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;又想起了《湄公河行动》里面的那些军人，正是有了他们的奉献，我们才能过上如此安逸的生活，向他们送上我由衷的感谢！</p>
<h2 id="评分"><a href="#评分" class="headerlink" title="评分"></a>评分</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;9/10。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;情节内涵都好的没话说，只是不是很适合我233。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[《我是传奇》]]></title>
      <url>https://blog.patrickcty.cc/2017/02/01/%E3%80%8A%E6%88%91%E6%98%AF%E4%BC%A0%E5%A5%87%E3%80%8B/</url>
      <content type="html"><![CDATA[<h1 id="《我是传奇》"><a href="#《我是传奇》" class="headerlink" title="《我是传奇》"></a>《我是传奇》</h1><h2 id="开始之前"><a href="#开始之前" class="headerlink" title="开始之前"></a>开始之前</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;看到是威尔史密斯主演的就很有看的欲望～本以为是一部末日片结果没想到是一部丧尸片233。</p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;故事的背景是人类研制出了一种抗癌的药物，可以治疗癌症，但是没想到这种药物产生了一种严重的病毒，很多生物都被感染了变成了“夜魔”——攻击性很强，头脑退化，见不得阳光的类似于丧尸的状态。这种病毒通过空气传播，只有很少人可以免疫，而主角是纽约唯一一个幸存者。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;故事情节比较普通，就是主角一人生活在纽约，白天搜寻幸存者打猎，晚上待在屋子里防止被夜魔袭击并且在地下室研制治疗的药物。有一些槽点就是明明已经过去了三年，结果屋子里还是有电…而且水和粮食都比较充足…这种只有一个人在的世界最大的问题不就应该是这种生活用品么…不过好在也不是很影响…倒是没有这些反而不太好发展剧情了233。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;白天就是描述主角的日常活动，晚上则是插叙病毒刚到来时候与家人分别到家人死去的过程。其中主角神边那只狗狗真的很通人性啊～可惜在一次事故中主角中了夜魔的圈套狗狗也在这次中被感染不得不被杀死了，主角也因此想自杀，好在最后女主及时赶来救了他。女主在一个多小时的时候才出现233。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最后的结局倒是挺值得一提，这部电影有两个结局。我个人比较喜欢第一个：原来那些夜魔袭击主角是因为夜魔头的女朋友被男主抓到实验室做实验了，男主把她还回去之后他们就停止攻击了，这时候药物应该成功研制出来了，男主和女主也踏上了旅途。比较引人思考的是夜魔居然有相当的智慧，而且女主所说的幸存者大本营也不知道是否存在，两人带着希望上路了。这两个地方都留下了充分的想象空间。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;另外一个结局就是当夜魔攻破了玻璃门的时候，男主和他们同归于尽了，女主就带着研制成功的药去到了大本营。看了这个结局之后再看第一个结局就更加觉得第一个结局比较有深意了，不过都挺不错的～</p>
<h2 id="评分"><a href="#评分" class="headerlink" title="评分"></a>评分</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;7/10。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一开始看的时候室友都不在…一个人看有点方233。故事中规中矩，第一个结局比较有深意。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[我的2016(2)——碎碎念]]></title>
      <url>https://blog.patrickcty.cc/2017/02/01/%E6%88%91%E7%9A%842016(2)%E2%80%94%E2%80%94%E7%A2%8E%E7%A2%8E%E5%BF%B5/</url>
      <content type="html"><![CDATA[<h1 id="我的2016-2-——碎碎念"><a href="#我的2016-2-——碎碎念" class="headerlink" title="我的2016(2)——碎碎念"></a>我的2016(2)——碎碎念</h1><p>嘿嘿这些回忆是来自空间，上一篇是来自朋友圈，后面就重心放在朋友圈了所以空间更新就少了。</p>
<p>不过这一篇逻辑有点混乱呢，就当我碎碎念吧～</p>
<h2 id="依然总是会不由自主地会想起过去的时光"><a href="#依然总是会不由自主地会想起过去的时光" class="headerlink" title="依然总是会不由自主地会想起过去的时光"></a>依然总是会不由自主地会想起过去的时光</h2><h2 id="看了超级讽刺的英剧黑镜"><a href="#看了超级讽刺的英剧黑镜" class="headerlink" title="看了超级讽刺的英剧黑镜"></a>看了超级讽刺的英剧黑镜</h2><h2 id="还是一直很受不了身边的某些人（也许不知不觉自己也被别人讨厌了"><a href="#还是一直很受不了身边的某些人（也许不知不觉自己也被别人讨厌了" class="headerlink" title="还是一直很受不了身边的某些人（也许不知不觉自己也被别人讨厌了"></a>还是一直很受不了身边的某些人（也许不知不觉自己也被别人讨厌了</h2><h2 id="经常会因为一个人而感到孤单，很多时候需要别人的陪伴"><a href="#经常会因为一个人而感到孤单，很多时候需要别人的陪伴" class="headerlink" title="经常会因为一个人而感到孤单，很多时候需要别人的陪伴"></a>经常会因为一个人而感到孤单，很多时候需要别人的陪伴</h2><h2 id="大一上又被语文英语拯救了"><a href="#大一上又被语文英语拯救了" class="headerlink" title="大一上又被语文英语拯救了"></a>大一上又被语文英语拯救了</h2><h2 id="回家那一天和男神还有傻吊一起夜游武汉，才发现原来的大汉口也只是这么小"><a href="#回家那一天和男神还有傻吊一起夜游武汉，才发现原来的大汉口也只是这么小" class="headerlink" title="回家那一天和男神还有傻吊一起夜游武汉，才发现原来的大汉口也只是这么小"></a>回家那一天和男神还有傻吊一起夜游武汉，才发现原来的大汉口也只是这么小</h2><h2 id="以前从未如此想过家，回家的感觉是没办法用言语来形容的"><a href="#以前从未如此想过家，回家的感觉是没办法用言语来形容的" class="headerlink" title="以前从未如此想过家，回家的感觉是没办法用言语来形容的"></a>以前从未如此想过家，回家的感觉是没办法用言语来形容的</h2><h2 id="终于等到了龙族四"><a href="#终于等到了龙族四" class="headerlink" title="终于等到了龙族四"></a>终于等到了龙族四</h2><h2 id="回学校看了老师，熊楚原他们还上讲台装了一波逼"><a href="#回学校看了老师，熊楚原他们还上讲台装了一波逼" class="headerlink" title="回学校看了老师，熊楚原他们还上讲台装了一波逼"></a>回学校看了老师，熊楚原他们还上讲台装了一波逼</h2><h2 id="经历了春晚的各种抢红包摇红包，然而并没有搞到什么钱233，敬业福也没搞到"><a href="#经历了春晚的各种抢红包摇红包，然而并没有搞到什么钱233，敬业福也没搞到" class="headerlink" title="经历了春晚的各种抢红包摇红包，然而并没有搞到什么钱233，敬业福也没搞到"></a>经历了春晚的各种抢红包摇红包，然而并没有搞到什么钱233，敬业福也没搞到</h2><h2 id="无数个对鞭炮深恶痛绝的回家的早上"><a href="#无数个对鞭炮深恶痛绝的回家的早上" class="headerlink" title="无数个对鞭炮深恶痛绝的回家的早上"></a>无数个对鞭炮深恶痛绝的回家的早上</h2><h2 id="引力波刷爆了屏幕"><a href="#引力波刷爆了屏幕" class="headerlink" title="引力波刷爆了屏幕"></a>引力波刷爆了屏幕</h2><h2 id="那些疯狂秀恩爱的日子"><a href="#那些疯狂秀恩爱的日子" class="headerlink" title="那些疯狂秀恩爱的日子"></a>那些疯狂秀恩爱的日子</h2><h2 id="男神轩的情人节视频十分令人印象深刻"><a href="#男神轩的情人节视频十分令人印象深刻" class="headerlink" title="男神轩的情人节视频十分令人印象深刻"></a>男神轩的情人节视频十分令人印象深刻</h2><h2 id="那些和傻吊一起泡咖啡馆的日子"><a href="#那些和傻吊一起泡咖啡馆的日子" class="headerlink" title="那些和傻吊一起泡咖啡馆的日子"></a>那些和傻吊一起泡咖啡馆的日子</h2><h2 id="闪电侠追到了第三季"><a href="#闪电侠追到了第三季" class="headerlink" title="闪电侠追到了第三季"></a>闪电侠追到了第三季</h2><h2 id="喜欢上了柴犬"><a href="#喜欢上了柴犬" class="headerlink" title="喜欢上了柴犬"></a>喜欢上了柴犬</h2><h2 id="傻吊的小说开始连载"><a href="#傻吊的小说开始连载" class="headerlink" title="傻吊的小说开始连载"></a>傻吊的小说开始连载</h2><h2 id="那些黎锐晚上开车的日子"><a href="#那些黎锐晚上开车的日子" class="headerlink" title="那些黎锐晚上开车的日子"></a>那些黎锐晚上开车的日子</h2><h2 id="暑假依然疯狂想家"><a href="#暑假依然疯狂想家" class="headerlink" title="暑假依然疯狂想家"></a>暑假依然疯狂想家</h2><h2 id="恩阿拉斯加犬也很可爱"><a href="#恩阿拉斯加犬也很可爱" class="headerlink" title="恩阿拉斯加犬也很可爱"></a>恩阿拉斯加犬也很可爱</h2><h2 id="去李文菁家蹭吃蹭喝～荷花亭小分队再聚首"><a href="#去李文菁家蹭吃蹭喝～荷花亭小分队再聚首" class="headerlink" title="去李文菁家蹭吃蹭喝～荷花亭小分队再聚首"></a>去李文菁家蹭吃蹭喝～荷花亭小分队再聚首</h2><h2 id="发现一中有人进暨大，简直惊喜（虽然现在都没有找到他们的联系方式"><a href="#发现一中有人进暨大，简直惊喜（虽然现在都没有找到他们的联系方式" class="headerlink" title="发现一中有人进暨大，简直惊喜（虽然现在都没有找到他们的联系方式"></a>发现一中有人进暨大，简直惊喜（虽然现在都没有找到他们的联系方式</h2><h2 id="不一样的19岁，或许是因为身边的你们吧"><a href="#不一样的19岁，或许是因为身边的你们吧" class="headerlink" title="不一样的19岁，或许是因为身边的你们吧"></a>不一样的19岁，或许是因为身边的你们吧</h2><h2 id="也曾有过一段时间出bug出到飞起的时候"><a href="#也曾有过一段时间出bug出到飞起的时候" class="headerlink" title="也曾有过一段时间出bug出到飞起的时候"></a>也曾有过一段时间出bug出到飞起的时候</h2><h2 id="恩从9月卖鞋卖到11月…卖东西真的是一件烦人的事情"><a href="#恩从9月卖鞋卖到11月…卖东西真的是一件烦人的事情" class="headerlink" title="恩从9月卖鞋卖到11月…卖东西真的是一件烦人的事情"></a>恩从9月卖鞋卖到11月…卖东西真的是一件烦人的事情</h2><h2 id="荧光夜跑，还是很嗨的"><a href="#荧光夜跑，还是很嗨的" class="headerlink" title="荧光夜跑，还是很嗨的"></a>荧光夜跑，还是很嗨的</h2><h2 id="姐姐终于结婚了，一晃这么多年过去了，还记得小时候抢遥控器的时候"><a href="#姐姐终于结婚了，一晃这么多年过去了，还记得小时候抢遥控器的时候" class="headerlink" title="姐姐终于结婚了，一晃这么多年过去了，还记得小时候抢遥控器的时候"></a>姐姐终于结婚了，一晃这么多年过去了，还记得小时候抢遥控器的时候</h2><h2 id="看了海贼王第一部在中国上映的电影，说实话很失望"><a href="#看了海贼王第一部在中国上映的电影，说实话很失望" class="headerlink" title="看了海贼王第一部在中国上映的电影，说实话很失望"></a>看了海贼王第一部在中国上映的电影，说实话很失望</h2><h2 id="再一次献血～"><a href="#再一次献血～" class="headerlink" title="再一次献血～"></a>再一次献血～</h2><h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>这一篇是对上一篇的补充，基于空间。</p>
<p>另外勤发说说真是个好习惯233，至少总结的时候知道这一年发生了什么～恩以后不会删除以前发的内容啦。</p>
<p>写到这里的时候电脑突然没电了，吓死了还好没关机…</p>
<p>相信看到这里的都是真爱。(逃</p>
<h2 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h2><p>感谢在我最低落的时候疏导我的类俺就！</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[我的2016]]></title>
      <url>https://blog.patrickcty.cc/2017/02/01/%E6%88%91%E7%9A%842016/</url>
      <content type="html"><![CDATA[<h1 id="我的2016"><a href="#我的2016" class="headerlink" title="我的2016"></a>我的2016</h1><h2 id="谈了一场不算久的三年前的恋爱"><a href="#谈了一场不算久的三年前的恋爱" class="headerlink" title="谈了一场不算久的三年前的恋爱"></a>谈了一场不算久的三年前的恋爱</h2><h2 id="和队友一起学习了Python"><a href="#和队友一起学习了Python" class="headerlink" title="和队友一起学习了Python"></a>和<a href="http://www.ecohnoch.cn/" target="_blank" rel="external">队友</a>一起学习了Python</h2><h2 id="狂热的喜欢了一段时间的球鞋，后来卖了好几个月的鞋子之后退烧了"><a href="#狂热的喜欢了一段时间的球鞋，后来卖了好几个月的鞋子之后退烧了" class="headerlink" title="狂热的喜欢了一段时间的球鞋，后来卖了好几个月的鞋子之后退烧了"></a>狂热的喜欢了一段时间的球鞋，后来卖了好几个月的鞋子之后退烧了</h2><h2 id="和队友一起搞了一阵子公众号，写了好几篇推文～"><a href="#和队友一起搞了一阵子公众号，写了好几篇推文～" class="headerlink" title="和队友一起搞了一阵子公众号，写了好几篇推文～"></a>和<a href="http://www.ecohnoch.cn/" target="_blank" rel="external">队友</a>一起搞了一阵子公众号，写了好几篇推文～</h2><h2 id="在家看到了几场大雪"><a href="#在家看到了几场大雪" class="headerlink" title="在家看到了几场大雪"></a>在家看到了几场大雪</h2><h2 id="经历了广州的回南天"><a href="#经历了广州的回南天" class="headerlink" title="经历了广州的回南天"></a>经历了广州的回南天</h2><h2 id="见证了科比，石佛，加内特的退役"><a href="#见证了科比，石佛，加内特的退役" class="headerlink" title="见证了科比，石佛，加内特的退役"></a>见证了科比，石佛，加内特的退役</h2><h2 id="养过一学期的猫"><a href="#养过一学期的猫" class="headerlink" title="养过一学期的猫"></a>养过一学期的猫</h2><h2 id="跑了620-48KM的路"><a href="#跑了620-48KM的路" class="headerlink" title="跑了620.48KM的路"></a>跑了620.48KM的路</h2><h2 id="看完了很长的《大秦帝国》"><a href="#看完了很长的《大秦帝国》" class="headerlink" title="看完了很长的《大秦帝国》"></a>看完了很长的《大秦帝国》</h2><h2 id="见证了两个三比一逆转，总决赛输了真的很可惜"><a href="#见证了两个三比一逆转，总决赛输了真的很可惜" class="headerlink" title="见证了两个三比一逆转，总决赛输了真的很可惜"></a>见证了两个三比一逆转，总决赛输了真的很可惜</h2><h2 id="用手按碎了手机屏幕并且就这样用了好久"><a href="#用手按碎了手机屏幕并且就这样用了好久" class="headerlink" title="用手按碎了手机屏幕并且就这样用了好久"></a>用手按碎了手机屏幕并且就这样用了好久</h2><h2 id="跟着宿舍结伴成长计划出去玩了好几次"><a href="#跟着宿舍结伴成长计划出去玩了好几次" class="headerlink" title="跟着宿舍结伴成长计划出去玩了好几次"></a>跟着宿舍结伴成长计划出去玩了好几次</h2><h2 id="开始搞Flask，跟着志平的代码编写官网后台"><a href="#开始搞Flask，跟着志平的代码编写官网后台" class="headerlink" title="开始搞Flask，跟着志平的代码编写官网后台"></a>开始搞Flask，跟着志平的代码编写官网后台</h2><h2 id="看了好几部发人深省的电影"><a href="#看了好几部发人深省的电影" class="headerlink" title="看了好几部发人深省的电影"></a>看了好几部发人深省的电影</h2><h2 id="去了云南旅游，自己安排"><a href="#去了云南旅游，自己安排" class="headerlink" title="去了云南旅游，自己安排"></a>去了云南旅游，自己安排</h2><h2 id="和家人去了上海"><a href="#和家人去了上海" class="headerlink" title="和家人去了上海"></a>和家人去了上海</h2><h2 id="成为了网研的会长，和网研的大家一起忙着网研的事情"><a href="#成为了网研的会长，和网研的大家一起忙着网研的事情" class="headerlink" title="成为了网研的会长，和网研的大家一起忙着网研的事情"></a>成为了网研的会长，和网研的大家一起忙着网研的事情</h2><h2 id="部署官网用了好久，最后在大家的帮助下解决了问题"><a href="#部署官网用了好久，最后在大家的帮助下解决了问题" class="headerlink" title="部署官网用了好久，最后在大家的帮助下解决了问题"></a>部署官网用了好久，最后在大家的帮助下解决了问题</h2><h2 id="经历了windows的莫名用不了键盘转向了Linux"><a href="#经历了windows的莫名用不了键盘转向了Linux" class="headerlink" title="经历了windows的莫名用不了键盘转向了Linux"></a>经历了windows的莫名用不了键盘转向了Linux</h2><h2 id="又一年新生的到来"><a href="#又一年新生的到来" class="headerlink" title="又一年新生的到来"></a>又一年新生的到来</h2><h2 id="十一回家了"><a href="#十一回家了" class="headerlink" title="十一回家了"></a>十一回家了</h2><h2 id="尽力了一场狂热的装系统"><a href="#尽力了一场狂热的装系统" class="headerlink" title="尽力了一场狂热的装系统"></a>尽力了一场狂热的装系统</h2><h2 id="入了硬件的坑，内存，显示屏，SSD，机械键盘"><a href="#入了硬件的坑，内存，显示屏，SSD，机械键盘" class="headerlink" title="入了硬件的坑，内存，显示屏，SSD，机械键盘"></a>入了硬件的坑，内存，显示屏，SSD，机械键盘</h2><h2 id="因为SSD装系统的操作错误，不得不重新安装系统配置环境"><a href="#因为SSD装系统的操作错误，不得不重新安装系统配置环境" class="headerlink" title="因为SSD装系统的操作错误，不得不重新安装系统配置环境"></a>因为SSD装系统的操作错误，不得不重新安装系统配置环境</h2><h2 id="学习了爬虫的基本知识"><a href="#学习了爬虫的基本知识" class="headerlink" title="学习了爬虫的基本知识"></a>学习了爬虫的基本知识</h2><h2 id="看了几场发布会，被小米MIX惊艳到了"><a href="#看了几场发布会，被小米MIX惊艳到了" class="headerlink" title="看了几场发布会，被小米MIX惊艳到了"></a>看了几场发布会，被小米MIX惊艳到了</h2><h2 id="买了爱乐压，进了手冲咖啡的坑"><a href="#买了爱乐压，进了手冲咖啡的坑" class="headerlink" title="买了爱乐压，进了手冲咖啡的坑"></a>买了爱乐压，进了手冲咖啡的坑</h2><h2 id="经历了母校暨大的110校庆"><a href="#经历了母校暨大的110校庆" class="headerlink" title="经历了母校暨大的110校庆"></a>经历了母校暨大的110校庆</h2><h2 id="班赛的参与者变成了旁观者，目送着他们拿了冠军"><a href="#班赛的参与者变成了旁观者，目送着他们拿了冠军" class="headerlink" title="班赛的参与者变成了旁观者，目送着他们拿了冠军"></a>班赛的参与者变成了旁观者，目送着他们拿了冠军</h2><h2 id="失败了好几次的域名备案终于通过了"><a href="#失败了好几次的域名备案终于通过了" class="headerlink" title="失败了好几次的域名备案终于通过了"></a>失败了好几次的域名备案终于通过了</h2><h2 id="新一轮的复习周"><a href="#新一轮的复习周" class="headerlink" title="新一轮的复习周"></a>新一轮的复习周</h2><h2 id="重新爱上了篮球"><a href="#重新爱上了篮球" class="headerlink" title="重新爱上了篮球"></a>重新爱上了篮球</h2><h2 id="做起来了自己的个人博客，尽管是使用模板～"><a href="#做起来了自己的个人博客，尽管是使用模板～" class="headerlink" title="做起来了自己的个人博客，尽管是使用模板～"></a>做起来了自己的个人博客，尽管是使用模板～</h2><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>感谢所有陪我走过这一年的大家～</p>
<p>这一年发生了很多事情，心态也转变了好多次，至于现在是对是错，还是未知，拭目以待吧！</p>
<p>2017也要继续加油哦！</p>
<p>P.S.一定有很多精彩的瞬间被我遗漏了，想到再补充。</p>
<h2 id="最后的最后，感谢曾一直以来陪着我的你，没有你我的2016就是不完整的。"><a href="#最后的最后，感谢曾一直以来陪着我的你，没有你我的2016就是不完整的。" class="headerlink" title="最后的最后，感谢曾一直以来陪着我的你，没有你我的2016就是不完整的。"></a>最后的最后，感谢曾一直以来陪着我的你，没有你我的2016就是不完整的。</h2>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[铁人三项第一天]]></title>
      <url>https://blog.patrickcty.cc/2017/02/01/%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9%E7%AC%AC%E4%B8%80%E5%A4%A9/</url>
      <content type="html"><![CDATA[<h2 id="wireshark"><a href="#wireshark" class="headerlink" title="wireshark"></a>wireshark</h2><p>检测流量抓包并且强大的过滤器可以让你比较方便得到所需信息。</p>
<ul>
<li>==ip.src== xxx.xxx.xxx.xxx这个是用来根据请求者ip过滤</li>
<li>==ip.dst==是目标ip</li>
<li>还有==http.method==用来根据http方法过滤</li>
<li>==http/tcp/ftp==是指定查看http/tcp/ftp</li>
<li>以及==http contains XXX==查看http相关的XXX</li>
<li>等等</li>
</ul>
<p>根据这些来查看相应的请求包来获得信息</p>
<h2 id="虚拟机服务器"><a href="#虚拟机服务器" class="headerlink" title="虚拟机服务器"></a>虚拟机服务器</h2><p>已经配好了的服务器虚拟机，浓浓的上世纪的UI</p>
<p>不过改成桥接模式之后秘制连不上网…</p>
<h2 id="中国菜刀"><a href="#中国菜刀" class="headerlink" title="中国菜刀"></a>中国菜刀</h2><p>一个黑客相关的软件，在今天的课上主要是运行植入的木马，然后不断通过木马POST内容来进行文件查看文件下载等黑客行为。</p>
<h2 id="御剑"><a href="#御剑" class="headerlink" title="御剑"></a>御剑</h2><p>一个用来暴力破解扫描文件目录的软件…真的十分暴力…</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[铁人三项第二天]]></title>
      <url>https://blog.patrickcty.cc/2017/02/01/%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9%E7%AC%AC%E4%BA%8C%E5%A4%A9/</url>
      <content type="html"><![CDATA[<p>这周六过得跟周三一样…      ——题记</p>
<h2 id="今天上午主要介绍了破解WordPress"><a href="#今天上午主要介绍了破解WordPress" class="headerlink" title="今天上午主要介绍了破解WordPress"></a>今天上午主要介绍了破解WordPress</h2><h3 id="漏洞所在点"><a href="#漏洞所在点" class="headerlink" title="漏洞所在点"></a>漏洞所在点</h3><ul>
<li>登录提示太明显，会准确的提示到用户名错误还是密码错误</li>
<li>没有验证码</li>
<li>没有对多次错误登录的ip做限制</li>
</ul>
<h3 id="破解方法"><a href="#破解方法" class="headerlink" title="破解方法"></a>破解方法</h3><ul>
<li>暴力破解</li>
</ul>
<h3 id="使用工具"><a href="#使用工具" class="headerlink" title="使用工具"></a>使用工具</h3><ul>
<li>BurpSuite（暴力破解的工具</li>
<li>中国菜刀（破解登入植入木马后的操作</li>
<li>御剑（扫描网站目录</li>
</ul>
<h3 id="使用BurpSuite"><a href="#使用BurpSuite" class="headerlink" title="使用BurpSuite"></a>使用BurpSuite</h3><p>见pdf文档</p>
<h4 id="需要注意的是"><a href="#需要注意的是" class="headerlink" title="需要注意的是"></a>需要注意的是</h4><ul>
<li>拦截功能不仅仅是在提交密码的时候有用</li>
<li>只要提交表单都可以，通过BurpSuite来修改一些选项使得提交可以顺利进行</li>
<li>记得最后要关闭拦截</li>
</ul>
<h3 id="使用中国菜刀"><a href="#使用中国菜刀" class="headerlink" title="使用中国菜刀"></a>使用中国菜刀</h3><p>这兄弟不是第一次见面了</p>
<h4 id="一些特点"><a href="#一些特点" class="headerlink" title="一些特点"></a>一些特点</h4><ul>
<li>中国菜刀需要配合一句话木马一起使用</li>
<li>也就是说一般包含eval关键字</li>
<li>读取中国菜刀关键字一般要根据他的字段名进行解码，比如php的在木马中就指明了base64解码</li>
<li>一般中国菜刀是通过木马进行POST请求对服务器进行操作，因此POST是关键字</li>
<li>而且一般内容都是由-&gt;|    |&lt;-包围的</li>
</ul>
<h3 id="关于御剑"><a href="#关于御剑" class="headerlink" title="关于御剑"></a>关于御剑</h3><ul>
<li>通过这个可以找到网站隐藏的入口</li>
<li>有时候可以得到意外的信息（信息泄露</li>
<li>原来原理也是通过字典进行碰撞，怪不得有那么多404</li>
<li>抓包过滤的关键词也是http contains 404</li>
</ul>
<h3 id="另外"><a href="#另外" class="headerlink" title="另外"></a>另外</h3><ul>
<li>TCP流中有两种颜色，分别对应了用户端和服务器端，可以通过两种颜色数据量的大小来判断动作，比如服务器端发回的比较多就很可能是在下载</li>
<li>信息分析的本质就是根据抓的包，通过黑客行为的关键字来进行过滤，再对过滤出来的包进行分析</li>
<li>FTP传输都是明文，也就是说可以通过FTP的抓包来得到FTP的用户名和密码</li>
<li>FTP的230表示所求的文件操作已成功，很多时候可以用来快速找出用户名和密码</li>
<li>TCP是三次握手，用户-&gt;服务器-&gt;用户，如果最后一项缺少的话服务器端就会陷入等待，这也是黑客攻击的一种手段</li>
<li>302也就是跳转，很多时候可以判断登陆成功</li>
</ul>
<h3 id="提高安全意识"><a href="#提高安全意识" class="headerlink" title="提高安全意识"></a>提高安全意识</h3><ul>
<li>密码要设置的复杂一些，不然有经验的黑客很容易破解</li>
<li>网站一定要设置验证码，可以有效防止这种暴力破解以及一定程度上防止机器人</li>
<li>错误提示尽量模糊一些</li>
<li>多次登陆不成功最好也有一定的处理</li>
</ul>
<h2 id="下午主要是做了一些题目"><a href="#下午主要是做了一些题目" class="headerlink" title="下午主要是做了一些题目"></a>下午主要是做了一些题目</h2><p>第一题都做不出来我的内心是崩溃的…后面就一直在干一些有的没的事了…哎做的很不好…</p>
<h3 id="一些收获"><a href="#一些收获" class="headerlink" title="一些收获"></a>一些收获</h3><ul>
<li>图片损坏的话可能是因为文件头字段有损坏，同类型的图片头部的字段都是相同的</li>
<li>kali Linux做安全测试比较方便</li>
<li>图片的备注可能包含了信息，可以直接右键看，当然也会被保存在图片的内容中，直接用记事本打开也能看到</li>
<li>对于字段长度限制的输入，可以直接改js或html代码</li>
<li>表单不能成功提交？用BurpSuite拦截修改再提交</li>
</ul>
<p>后面讲题的时候还是收获挺大的，普及了好多相关的思想和知识！继续加油！</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[《太空旅客》]]></title>
      <url>https://blog.patrickcty.cc/2017/02/01/%E3%80%8A%E5%A4%AA%E7%A9%BA%E6%97%85%E5%AE%A2%E3%80%8B/</url>
      <content type="html"><![CDATA[<h1 id="《太空旅客》"><a href="#《太空旅客》" class="headerlink" title="《太空旅客》"></a>《太空旅客》</h1><h2 id="闲话"><a href="#闲话" class="headerlink" title="闲话"></a>闲话</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;和高中同学一起看的电影～看的都有点饿了233。</p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这是一部值得深思的电影，就像一个朋友说的一样，太空旅客问题，也是一个神问题。你是选择自己独自绝望，还是找另外一个人和你一起绝望，但是会让一个无辜的人也绝望呢？</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;说实话，电影开始很久一段时间都是很平淡的，甚至是太平淡了。男主角因为一次小行星撞击事故意外的提前90年从旅途中醒来，开始的一段时间里面都是描述男主一个人在飞船上的生活。直到后来男主花了很久终于下定决心叫醒了女主。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这一部分开始，就一直有一颗大石头悬在头上，特别是每次见亚瑟的时候，都很担心女主会知道真相。不过试想你是被叫醒的，知道真相之后我想你一定也会怒不可遏，甚至十分怨恨叫醒你的。最后果然是亚瑟打破了平静，“无意中”把真相告诉了女主。我本来以为会一直围绕感情来展开，没想到这时候危机出现了。于是男女主一起解决了问题拯救了整个飞船。尽管灾难比较强行，不过如果没有灾难，这关系还真的不太好继续发展。几个出现时间超过一分钟的“人”角色，都是比较熟悉的面孔，星爵，大表姐，还有黑客帝国的墨菲斯。不过演的都很好，看的时候并没有出戏。墨菲斯的设置也很巧妙，既没有太多的抢过主角的风头，又巧妙地让男女主能去往需要高权限的地方，还缓和了男女主额关系，真的是点睛之笔。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最后经历了那么多，女主也原谅了男主，而且即使男主最后发现了重新冬眠的方法，女主还是选择留下来和男主一起～最后的结局也比较有意思，男主种下来的树，让整个飞船变成了一个小型的自然生态系统，虽然可能性不清楚，不过确实有意思～</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最后就是关于那个问题了，如果是我，我会很想找个人陪我，不过我也知道如果叫醒了另一个人，很可能就是叫醒了一个恨你一辈子的人，所以我也不知道该怎么选择，这也是一个令人头疼的问题，不过电影里给出的解答还是很让人满意的！</p>
<h2 id="评分"><a href="#评分" class="headerlink" title="评分"></a>评分</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;8.5/10。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;前面节奏还是太慢了，看起来有点无趣，中间冲突爆发又拖了好久，不过情节还是很赞的，特别是结尾～对宇宙的刻画也是很让人欣喜的～</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用API来获取数据]]></title>
      <url>https://blog.patrickcty.cc/2017/02/01/%E4%BD%BF%E7%94%A8API%E6%9D%A5%E8%8E%B7%E5%8F%96%E6%95%B0%E6%8D%AE/</url>
      <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><ul>
<li>使用http请求后台数据返回json结果</li>
</ul>
<h3 id="一些门槛"><a href="#一些门槛" class="headerlink" title="一些门槛"></a>一些门槛</h3><ul>
<li>设置验证：调用api时要用特定的api_key</li>
<li>上面的api_key一般是要注册之后才能生成</li>
<li>比较大型的网站的api则有更高的门槛:</li>
<li>注册一个app用来获得token,api_key,甚至前面对应的secret</li>
</ul>
<p>坑爹的是使用twitter的api不知为啥连接不上去…</p>
<h3 id="联想"><a href="#联想" class="headerlink" title="联想"></a>联想</h3><p>在官网www.jnugeek.cn项目中，就用REST的思路构造了一些api，而前端就是通过ajax请求来调用这些api<br>只不过上面这个api比较不同没有门槛</p>
<h3 id="Google大法好"><a href="#Google大法好" class="headerlink" title="Google大法好"></a>Google大法好</h3><p>Google有好多api！</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[《怦然心动》]]></title>
      <url>https://blog.patrickcty.cc/2017/02/01/%E3%80%8A%E6%80%A6%E7%84%B6%E5%BF%83%E5%8A%A8%E3%80%8B/</url>
      <content type="html"><![CDATA[<h1 id="《怦然心动》"><a href="#《怦然心动》" class="headerlink" title="《怦然心动》"></a>《怦然心动》</h1><h2 id="开始之前"><a href="#开始之前" class="headerlink" title="开始之前"></a>开始之前</h2><p>这部电影真的是太太太太太好看了～简直是我有生以来看过的最好看的电影！</p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这是一部感情题材的电影，而让它与众不同的是，它讲述的是最单纯最朴实的感情，从幼年到初中，从单面的喜欢到互相的喜欢。没有疯狂，没有狗血，一切都是那么的自然，又是那么的美好。（看到这里我不得我吐槽万恶的资本主义，你们就这样放纵你们的接班人，看来得把你们请到中国磨砺一下了。（逃</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;影片是从很小的时候开始的，见男主的第一面，女主就缠着他，并且在之后很多年都是这样。刚开始是以男主为第一人称叙述自己的一些想法，这时候妹子还是单方面的喜欢男主。后来就变成女主为第一人称叙述了，不得不说这种叙述手法真的太巧秒了！作为一部情感电影，这样真的能够充分的把男女之间的心理表现出来，并且二者的对比也很明显，这样就让观众能更加清晰地体会到男主之间那模糊懵懂的感情～</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;但是女主没有一直这样“死缠烂打”，由于种种原因，女主对男主的感情逐渐有了微妙的变化，直到最后“不喜欢”，而男主也在这个过程中由害怕变成了喜欢。到最后情感完全倒过来了，还是很有戏剧性的～不得不说导演对情感的把握真的太到位了，看电影的时候沉浸感特别强，感觉自己完全代入到电影中了，随着人称的切换而不断地切换心情～最棒的是男主最后踏出了那一步，他不再是一个懦夫，而女主最后也接受了～故事到这里就结束了，给我们留下了充足的想象空间～</p>
<h2 id="人物"><a href="#人物" class="headerlink" title="人物"></a>人物</h2><h3 id="朱丽"><a href="#朱丽" class="headerlink" title="朱丽"></a>朱丽</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;妹子真的是太可爱了太讨人喜欢了！！！</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;咳咳，恢复正经。妹子不但人长得好看，而且性格十分奔放，并且还很坚韧。在第一次见面以及后来的几年中都一直追着男主不放。这种主动的妹子真的是太棒了～</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;但是菜不仅仅是这样，妹子喜欢爬到梧桐树上眺望远处的风景，但是在梧桐树要被砍的时候，妹子守在树上，阻止其他人砍树。我想这是一种勇敢的表现吧，敢于追求同时也敢于保护自己喜爱的东西，愿意用自己的身体去守护～</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;还有之后的能干，不论是在展览上孵出了小鸡，把小鸡养大照顾的很好并且生了很多鸡蛋还是后来的修剪花园把破败的前院打理的一派生机。妹子用自己的行为证明了能力，我想她并不想证明什么，只是因为她喜爱，只是因为她想做。源于意愿，源于热爱。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;以及妹子的体贴，无论是照顾家人的感情，不愿意因为自己的情绪毁了妈妈认为很重要的事情，还是愿意去看完因为事故而智力受损的伯伯。她是发自真心的为她们着想，她的心灵，是真的闪耀着明亮的光芒。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;很庆幸后来妹子想清楚了自己的感情，没有盲目的追求爱情，很庆幸妹子最终收获了她一直期望的爱情～</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;妹子现在是我的女神了～嘿嘿嘿，超过超杀女了～</p>
<h3 id="布莱斯"><a href="#布莱斯" class="headerlink" title="布莱斯"></a>布莱斯</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;电影中布莱斯是一个典型的立体人物，人物刻画得真的很到位。从小时候因为妹子的缠人而产生的对妹子的畏惧，到后来因为舍弃了妹子没有和她一起保护那棵梧桐树开始，一直到丢妹子的鸡蛋被妹子发现并讨厌，布莱斯的态度发生了很大的变化。他也逐渐看到了妹子身上的闪光点。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这个人物刻画的十分真实，他的心理想法行为也都描述的很到位，正是因为他，电影的半边天被撑起来了～</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;不得不说这也是一个颜值从小到大都爆满的…高冷的男神…</p>
<h3 id="布莱斯的爸爸"><a href="#布莱斯的爸爸" class="headerlink" title="布莱斯的爸爸"></a>布莱斯的爸爸</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;布莱斯的爸爸引起了剧中的核心冲突。从对话中可以知道他过去也是一个有天赋的搞音乐的，但是由于经济的限制没能继续下去。可能是因为这件事还有其他一些不为人知的挫败，他变得很毒舌，势利，瞧不起妹子他们一家，瞧不起其他有困难的人…</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我觉得他也是很可悲的，自己过得消极还把消极的情绪发泄给全家人，并且强制他们接受，是典型的大男子主义。而反过来妹子的爸爸，在妹子悲伤的时候会用自己的方式给妹子安慰，在妹子最喜欢的树被砍倒的时候自己画了一副给妹子，同时十分照顾妹子的情绪，连和妹子妈妈吵架之后都会亲自到妹子房间里面给她道歉。而且还十分支持孩子的行为，支持他的两个儿子搞音乐，而不像布莱斯的爸爸那样直接否定。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;看到这两家的对比之后，我也深刻意识到做一个好家长的重要性，不仅是对孩子，还是对其他的家人都是至关重要的。还好布莱斯的家里面有一个好妈妈，一定程度上限制了布莱斯爸爸对布莱斯的其他影响。做一个好爸爸，不仅要支撑起这个家的经济，还要照顾好妈妈的生活与心灵，还要能和孩子交心，不因为辈分而全盘忽视孩子的想法，而是一种平等的又付出更多的朋友关系。妹子性格这么好妹子爸爸分不开的，有这样的一个爸爸，也是很幸福的一件事啊。我希望我以后也能做这样一名优秀的家长。</p>
<h3 id="布莱斯的外公邓肯"><a href="#布莱斯的外公邓肯" class="headerlink" title="布莱斯的外公邓肯"></a>布莱斯的外公邓肯</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;布莱斯的外公也是一个重要的带领布莱斯成长的人，外公的性格也很好，她能发现人的优点，也是因为外公，布莱斯才会有后面对妹子态度的转变，布莱斯才会去发现那些其他人不一样的地方。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;而且外公人也很好，他也帮妹子修剪好了花园～外公也很有素质，即使布莱斯的爸爸嘴巴那么恶毒，外公还是仅仅据理力争并没有做出什么出格的事情～嘿嘿我的外公也是这么好的人～有这么好的外公也是一种幸福～</p>
<h2 id="评分"><a href="#评分" class="headerlink" title="评分"></a>评分</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;10/10。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我看过最好看的一部电影，没有之一。感情课外十分到位，很真挚，整部电影看下来一直很开心，电影中的幸福也传达到了我的心中。我想这就是一部电影的最高境界吧，能真真正正的感染人心。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[加速吧，patrickcty.cc！]]></title>
      <url>https://blog.patrickcty.cc/2017/02/01/%E5%8A%A0%E9%80%9F%E5%90%A7%EF%BC%8Cpatrickcty-cc%EF%BC%81/</url>
      <content type="html"><![CDATA[<h1 id="加速吧，patrickcty-cc！"><a href="#加速吧，patrickcty-cc！" class="headerlink" title="加速吧，patrickcty.cc！"></a>加速吧，patrickcty.cc！</h1><h2 id="瞎扯"><a href="#瞎扯" class="headerlink" title="瞎扯"></a>瞎扯</h2><p>最近时间比较零散，系统学习新知识的时间并不多，于是乎就这零碎的时间，折腾一下博客，然而由于各种原因，还是耗费了大量的时间233。</p>
<p>众所周知，Github Pages加载出来的页面在每次刷新都要重新加载所有元素，因此，如果你的博客里面包含大量的图片的话，加载速度会被拖到很慢，为了让我的博客加载速度变快，我决定把图片这些静态文件丢到七牛云里面了。</p>
<p>但事情并没有那么简单，我之前是用CloudFlare来升级https的，而之前用的七牛云都是http的外链，因为混合http和https的网站不安全，我是想全局采用https，这就是我遇到的第一个难点。</p>
<h2 id="艰难的尝试"><a href="#艰难的尝试" class="headerlink" title="艰难的尝试"></a>艰难的尝试</h2><p>现在的情况是，域名是在腾讯云申请的，ssl是用的CloudFlare的，静态文件准备放在七牛云上。</p>
<p>于是首要的问题就是静态文件的问题了，要把他们丢在七牛云上，并且要是https外链。于是就去创建对象存储，然而我没发现可以直接生成https，而是被自定义域名导到CDN去了，而CDN里面有一个比较明显的https选项。</p>
<p>然而要想使用这个https，必须得有证书的key和value，然而因为我用的是CloudFlare生成的证书，并不能看到key和value，正好七牛云上可以申请证书，于是乎决定就近在七牛云上申请一个证书。</p>
<p>然而证书申请得秘制慢，第一次我没有配置CNAME，于是证书一直卡在循环验证那个地方，后来决定把博客的域名换成blog开头的二级域名，于是又重新申请了一个证书并且配置了CNAME，然而这个证书还是下来的异常慢，别人都是十分钟二十分钟下来了，我的却一直都没有下来…还检查了好几遍CNAME的配置，都确定没有问题了，还是没出来。真的是有查成绩的感觉，一直在看有没有出来233。</p>
<p>到了申请第二个证书的第二天，起床后突然想起来了，然后一查发现出来了233，真的是和查成绩并且发现成绩还不错的心情一模一样233。然而在证书出来之前，我试着创建一个http的CDN，然而发现域名需要备案…囧rz。也就是说，虽然证书出来了，然而没什么卵用233。</p>
<p>然而我还有另一个备案了的域名，索性先创建了一个CDN，并且就在那里放着了。之后发现这个域名绑定的对象储存可以直接使用https产生外链。（我一直以为要相应的CDN才能产生https外链，事实是只要是对象储存都可以选择产生https外链，但是如果你想要绑定自己的域名就必须要CDN了。）于是高兴地把静态文件都丢到了七牛云上。</p>
<p>然而由于我之前改域名就把DNS服务器又改成腾讯云的了，而要想比较省心的使用https的话DNS服务器要用CloudFlare的，你以为就把服务器改过来就可以了么…就算我改过来了，他还死活不更新…一直用的还是腾讯云的DNS服务器…比较玄学的是，我都把腾讯云的域名解析都给停了结果域名还是可以解析出来…而且是用腾讯云的解析的…不过这样一大圈下来，我终于搞清楚腾讯云DNs服务器还有CloudFlare的真相了。</p>
<p>最后在吃完晚饭后，我惊喜的发现，博客上出现了绿色的小锁！DNS服务器终于变成CloudFlare的了，到此，几乎已经大功告成了，最后我把本地调试好的push上去，再看，速度果然提升了不少！而且https小锁还在～大功告成！真的是累死我啦。（心累…</p>
<p>P.S.中途最让我心累的就是笔记本的网总是断…每次以为自己要成功的时候就断网，搞得我十分崩溃orz，好在最后成功了。</p>
<h2 id="收获-amp-amp-干货"><a href="#收获-amp-amp-干货" class="headerlink" title="收获&amp;&amp;干货"></a>收获&amp;&amp;干货</h2><p>上面bb了那么多其实都是日记，整个过程我还是学到了不少知识的。</p>
<h3 id="关于域名解析"><a href="#关于域名解析" class="headerlink" title="关于域名解析"></a>关于域名解析</h3><p>其实这部分我在<a href="https://blog.patrickcty.cc/2016/12/27/https%EF%BC%8C%E6%83%B3%E8%A6%81%E4%BD%BF%E7%94%A8%E4%BD%A0%E6%B2%A1%E9%82%A3%E4%B9%88%E5%AE%B9%E6%98%93/">上一篇</a>相关的文章就提到过，不过当时的理解还比较片面，这次更深入理解了相关的内容。</p>
<ul>
<li>A记录指向一个ipv4地址，也就是服务器的公网ip，这部分只要服务器里面没有什么问题，在域名解析的记录中把记录值设置为这个ipv4地址就可以了。至于主机记录，说白了就是你的二级域名前面的那个东西，当然直接用主域名也可以的。这部分可以参考腾讯云的提示：</li>
</ul>
<blockquote>
<ul>
<li>www： 解析后的域名为www.qcloud.com。</li>
<li>@： 直接解析主域名 qcloud.com。</li>
<li>*： 泛解析，匹配其他所有域名 *.qcloud.com。</li>
<li>mail： 将域名解析为mail.qcloud.com，通常用于解析邮箱服务器。</li>
<li>二级域名： 如：abc.qcloud.com，填写abc。</li>
<li>手机网站： 如：m.qcloud.com，填写m。</li>
</ul>
</blockquote>
<ul>
<li>CNAME记录说白了就是别名，也就是说尽管你的名字是这个，但是本质还是原本的域名里面的。在这里我就是把我github的那个域名指到自定义的域名，一般CNAME也是用在这种自定义的情况下。记录值就是原本的域名，主机记录和上面的一样。</li>
<li>至于另外的MX等暂时没用到就没仔细研究啦，等以后需要再去折腾～</li>
</ul>
<h3 id="关于CloudFlare"><a href="#关于CloudFlare" class="headerlink" title="关于CloudFlare"></a>关于CloudFlare</h3><p>CloudFlare为什么能生成ssl呢？原理我在上一篇里面也说到过。</p>
<p>说白了就是你的域名由CloudFlare来接管，在接管的过程中它帮你进行了加密并且搞定了ssl证书。而让CloudFlare接管域名就是把DNS的服务器换成CloudFlare的服务器，一开始我还以为对于每个域名，它的域名服务器都是单独生成的呢…</p>
<p>看来是我想得太高大上了，其实就是把DNS服务器换成CloudFlare的就可以了，然后再在CloudFlare里面进行相应的配置，比如DNS的记录，这个和腾讯云上的是一模一样的，只不过因为是英文所以你懂的…</p>
<p>还有就是Pages Rules，比如可以让你把所有的请求都导到https上，其实这个在nginx可也以做到，不过既然在这里搞定了，也不需要再去服务器上配置了。</p>
<p>还有一个用到的就是Crypto，也就是ssl相关，也是很简单就可以设置好了。</p>
<p>使用CloudFlare的好处就是方便，无论是证书还是自动重定向，都比较方便，不需要你去nginx上一个个的敲出来了，不过这种的话安全性自然不如自己配置来得高，这个就要自己来衡量了。</p>
<p>另外CloudFlare还有很多强大的功能，不过这些都是Pro版的，需要付费。我就没研究啦。</p>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>用CloudFlare管理域名，用七牛云管理静态文件，用Github Pages托管，用Hexo作为框架，一个快速的静态个(电)人(影)博客就这样搞定啦！</p>
<p>虽然过程比较艰难，不过看着快了好多倍的加载速度，内心还是十分高兴的～</p>
<p>不过这么棒的博客可不能就这样荒废了，以后要多输出一点干货啦～</p>
<p>另外明天就是除夕啦，虽然我不喜欢过年，不过还是挺高兴呢～</p>
<p>以上。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[《垫底辣妹》]]></title>
      <url>https://blog.patrickcty.cc/2017/02/01/%E3%80%8A%E5%9E%AB%E5%BA%95%E8%BE%A3%E5%A6%B9%E3%80%8B/</url>
      <content type="html"><![CDATA[<h1 id="《垫底辣妹》"><a href="#《垫底辣妹》" class="headerlink" title="《垫底辣妹》"></a>《垫底辣妹》</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最近是考试周，经历了复习周每天的紧张，按照我的惯例考试周会“浪起来”，正好充了爱奇艺会员，看电影也会方便一些。但是只是看电影看完之后并没有什么感觉，之后反而会感觉很无聊，于是索性每看一部电影都写一下自己的感受。恩就从垫底辣妹开始。</p>
<h2 id="吐槽"><a href="#吐槽" class="headerlink" title="吐槽"></a>吐槽</h2><p>关于高考的毒鸡汤233。<br>妹子其实没那么好看，不过身材确实不错（逃。<br>居然是根据真实情况改编！</p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;今天在考完毛概之后看完了这部电影，总体感觉还是不错的，人物情节都比较到位，虽然都是一些比较老的套路，比如努力考上大学，关键时刻家庭矛盾发生等等。不过整体效果居然还不错，也没有带给人那种很不切实际的感觉。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;影片描述的是一个基础超级差的辣妹在高二进入补习班之后好好学习考上庆应大学的故事。虽然听起来很扯淡但是看了电影的人都会觉得还是有真实性的，影片中同时也伴随着许多冲突矛盾，学校与老师的冲突，家庭之间的各种矛盾，自己的绝望等等。这些让这一部电影丰满，也让人物形象更立体。</p>
<h3 id="大学-amp-高考"><a href="#大学-amp-高考" class="headerlink" title="大学&amp;高考"></a>大学&amp;高考</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在分析人物之前我觉得有必要先讨论一下日本大学和高考的问题。我之后还特意查了一下庆应大学的排名，恩全世界三十多名，是的全世界的排名，日本私立最好的大学。突然很怀疑人生…为什么我出生在了中国…不过日本高考的情况和中国不尽相同，所以可比性也没那么强。不过要是突然有老师对一个垫底的人说他可以考清华或者差一点复旦，那恐怕连我也会嘲讽一番…有了这个背景再去回想一下影片中的人物就会有完全不同的感觉。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;然后日本的高考是分两次的，一次是全国统考，再就是面对想考学校的测试了。详细可以看<a href="https://www.zhihu.com/question/27664102" target="_blank" rel="external">知乎这个问题</a>，整体特别是第二次考试还是没那么容易的。感觉比我国高考更加人性化，不过更加考验综合素质。按照我国国情也没办法使用日本的方法，我国高考要是不是一锤子定音或许会好一些。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这一部分的最后还是要说的事哪里都有厉害的人，与其抱怨制度，不如提高自身的综合实力，这样不管身处什么环境都能脱颖而出。</p>
<h3 id="人物"><a href="#人物" class="headerlink" title="人物"></a>人物</h3><ul>
<li><p>主角<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;比较打动我的就是妹子拼了命的精神，一边要陪着姐妹，一遍要玩了命的补以前落下的内容。她的那种没日没夜的学习，从电影中看到的是放学后在补习班学习，回到家之后学通宵。这样的高强度，并且还忍受着学校老师，父亲的嘲笑，能一直坚持下来确实是一件非常难的事情。我想如果像妹子那样没日没夜的学，考上庆应大学确实有可能，只可惜妹子的毅力不是一般人能达到的。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;还有就是妹子的乐观，面对如此的压力，她最终一直挺过来了，尽管中途有过想放弃的念头。她的乐观帮助她渡过了许多的困难，这也是值得学习的。</p>
</li>
<li><p>爸爸<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;父亲在成长中对孩子的作用也是巨大的。在父亲的偏爱下，被寄予厚望的儿子承受了巨大的压力，被忽视的女儿也在心理有了一定程度的叛逆与反抗。而父亲的存在也引发了剧中的很多矛盾，补习班另外一个补习的学生也是因为父亲的影响而不想学习。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;想要做一个好的父亲，很难，但也很重要。对孩子很重要，对家庭的和谐也很重要。</p>
</li>
<li><p>妈妈<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;可以说妹子之所以撑到最后妈妈的支持与理解是不可或缺的。从影片一开始把妹子送进女子学校并且告诉她学习不是最重要的，到后来拼命打工资助妹子上补习班，给妹子提供精神的帮助。妈妈一直都发挥了重要的作用。我想如果不是有妈妈的理解与包容，这个家庭早就支离破碎。当爸爸明明那么不好，偏袒弟弟忽视其他家人的时候，她却依然觉得爸爸是个好男人。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;做一个好妈妈也同样重要，我想她确实做到了。</p>
</li>
<li><p>老师<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我想改变妹子命运的，就是这个坚信妹子的老师了吧。即使妹子基础很差，即使很多人都不看好妹子，他还是尽自己的努力，相信着她，用他的方法，鼓励着妹子让她能一直走下去，鼓励着补习班的所有人。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;希望我们每个人的生命中都有这样的人能无条件相信着你，并一直鼓励着你，陪伴着你走过那一个个漫长的黑夜。</p>
</li>
<li><p>同学（补习班）<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;算是全片中一个隐藏的爱情的菜单吧，人物塑造的还是很棒的～从他的一些脸红偷瞄等小动作还有后面的跟着妹子改变发型也都可以体会他的内心。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;另外又是一个可以看出来父亲对孩子影响之深的例子。</p>
</li>
<li><p>姐妹<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;其中有一段就是四姐妹在温泉里面的交谈，她们同样是对妹子的支持以及为了妹子的未来愿意暂时不去“打扰”她，得友如此，也是人生的一大幸运的事情。试想自己身边的一个好朋友有一些看起来异想天开的目标，你是会嘲讽还是会支持甚至牺牲自己来支持？</p>
</li>
<li><p>学校老师<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;是妹子的“神助攻”，各种刷妹子的怒气值，也算是妹子成功的一个特殊的因素。</p>
</li>
</ul>
<h2 id="因素"><a href="#因素" class="headerlink" title="因素"></a>因素</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;无条件的信任，背后默默的支持，外界的嘲讽，自身强大的意志力与执行力。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这四点就是妹子成功的因素，尽管看起来非常“电影般的理想”，不过这的确也适合生活中其他的困难。</p>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这部电影的受众人群不仅仅是学生，对老师，对家长都有不小的教育作用，还是值得一看的。</p>
<h2 id="个人评分"><a href="#个人评分" class="headerlink" title="个人评分"></a>个人评分</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;8/10。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;电影整体还是很好的，一些老内容对整体有所减分。（我也说不出来哪里减分，不过主观上就是这样啦。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[第十章-采集JavaScript]]></title>
      <url>https://blog.patrickcty.cc/2017/02/01/%E7%AC%AC%E5%8D%81%E7%AB%A0-%E9%87%87%E9%9B%86JavaScript/</url>
      <content type="html"><![CDATA[<h2 id="核心模块：selenium-webdriver"><a href="#核心模块：selenium-webdriver" class="headerlink" title="核心模块：selenium.webdriver"></a>核心模块：selenium.webdriver</h2><h3 id="核心原理：webdriver模仿浏览器发出各种指令"><a href="#核心原理：webdriver模仿浏览器发出各种指令" class="headerlink" title="核心原理：webdriver模仿浏览器发出各种指令"></a>核心原理：webdriver模仿浏览器发出各种指令</h3><h3 id="事例"><a href="#事例" class="headerlink" title="事例"></a>事例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">driver = webdriver.PhantomJS(executable_path=<span class="string">'your_path'</span>)</div><div class="line">driver.get(<span class="string">'http://www.jnugeek.cn/'</span>)</div></pre></td></tr></table></figure>
<ul>
<li>这里就相当于模仿浏览器发送get请求</li>
<li>PhantomJS是一个没有GUI的浏览器</li>
<li>说白了还是间接用浏览器</li>
</ul>
<h3 id="关于selenium"><a href="#关于selenium" class="headerlink" title="关于selenium"></a>关于selenium</h3><ul>
<li>selenium有一个类似于BeautifulSoa的选择器</li>
<li>可以很方便的定位到网页的某个元素</li>
<li>而且他的命名也十分清楚明了</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">driver.find_element_by_tag_name(<span class="string">'div'</span>)</div></pre></td></tr></table></figure>
<h3 id="总之，在浏览器面前，JS就会乖乖的显示出来啦"><a href="#总之，在浏览器面前，JS就会乖乖的显示出来啦" class="headerlink" title="总之，在浏览器面前，JS就会乖乖的显示出来啦"></a>总之，在浏览器面前，JS就会乖乖的显示出来啦</h3>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[第九章-表单与登录窗口]]></title>
      <url>https://blog.patrickcty.cc/2017/02/01/%E7%AC%AC%E4%B9%9D%E7%AB%A0-%E8%A1%A8%E5%8D%95%E4%B8%8E%E7%99%BB%E5%BD%95%E7%AA%97%E5%8F%A3/</url>
      <content type="html"><![CDATA[<h2 id="核心模块-Requests"><a href="#核心模块-Requests" class="headerlink" title="核心模块:Requests"></a>核心模块:Requests</h2><h3 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h3><h4 id="关键点："><a href="#关键点：" class="headerlink" title="关键点："></a>关键点：</h4><ul>
<li>找到字段名name属性对应的内容</li>
<li>对应的值就是要提交的数据</li>
<li>用requests.post()提交数据</li>
</ul>
<h3 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h3><h4 id="关键点：-1"><a href="#关键点：-1" class="headerlink" title="关键点："></a>关键点：</h4><ul>
<li>找到字段名name属性对应的内容</li>
<li>对应的值就是用户名或者密码</li>
<li>如果涉及到cookie就用r.cookies</li>
<li>当然上面那个是为了保存登录状态以用来查看需要登录的界面才需要了</li>
<li>用session也是一个很好的选择session会持续跟踪会话信息，不仅是cookie,甚至header等等，即使变了也会一直纪录</li>
<li>要用的话就要先requests.session()建立一个对象</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[从零开始的腾讯云部署Flask应用生活]]></title>
      <url>https://blog.patrickcty.cc/2017/02/01/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84%E8%85%BE%E8%AE%AF%E4%BA%91%E9%83%A8%E7%BD%B2Flask%E5%BA%94%E7%94%A8%E7%94%9F%E6%B4%BB/</url>
      <content type="html"><![CDATA[<h3 id="2016-09-08-12-00-34开通腾讯云服务器"><a href="#2016-09-08-12-00-34开通腾讯云服务器" class="headerlink" title="2016-09-08 12:00:34开通腾讯云服务器"></a>2016-09-08 12:00:34开通腾讯云服务器</h3><p>说实话，这个时候我对云服务器的概念还是一脸懵逼的，我所有的认识，就是只要把应用放在上面，从外面就可以访问了，抱着这个简单的想法我就开始做准备活动了，没想到这项工作居然会如此浩大，如此艰难。</p>
<p>刚开始我安装的系统是CentOS7.2，因为都是Linux，这个比较靠前，腾讯云上面相应的文档又比较多于是乎就这样了。然而我没想到的是，同样是Linux的发行版，Ubuntu和CentOS居然有如此大的差别。CentOS上好像没有<br>Python3.X的版本，于是第一个任务就是安装Python3.5。其实Linux下安装还是比较简单的，wget下载压缩包，tar解压，再就是安装。</p>
<p>然而，由于系统自带的是Python2.7，在用3.5替换的时候遇到了一些问题，由于yum是用Python2.7运行的，替换之后有些问题，而且3.5也有些问题，解决起来不容易，于是我菜月Patrick就用出了死亡回归——重装系统。</p>
<h3 id="2016-09-08-15-21-48重装了CentOS7-2"><a href="#2016-09-08-15-21-48重装了CentOS7-2" class="headerlink" title="2016-09-08 15:21:48重装了CentOS7.2"></a>2016-09-08 15:21:48重装了CentOS7.2</h3><p>这次还是一样先下载了Pytho3.5，然而在操作的过程中电脑突然出问题，键盘不能用，云服务器的工作不得不停止了。停了三天之后问题终于逐渐解决，windows彻底不能用，Ubuntu上的网络问题也已经解决，于是又开始了。然而，由于折腾Linux比较累了，于是我就准备把腾讯云的工作交给郑洋来做了。</p>
<p>但和我一样，郑洋也同样遇到了相当大的阻力，于是我还是自己装了Python3.5。但是yum还是有问题，尽管我已经把yum文件头部的路径该成了python3，。这时候我已经不再管这个了，Python基本搞定，接下来就是装MySQL了，装的时候又有各种问题。这个时候在网上搜教程的时候突然发现腾讯云主机中有那种已经集成了环境的服务主机，于是狠下新来又再次主动死亡回归了——第二次重装系统。</p>
<h3 id="2016-09-12-10-14-02重装了CentOS6-5"><a href="#2016-09-12-10-14-02重装了CentOS6-5" class="headerlink" title="2016-09-12 10:14:02重装了CentOS6.5"></a>2016-09-12 10:14:02重装了CentOS6.5</h3><p>重装了之后，我就安心的把东西交给了郑洋。这次选择的系统是已经有MySQL5.6的，于是要做的就是装Python3.5了，然而似乎是系统的问题，之前装3.5的教程在这个系统上就各种报错，下载的.tar.xz文件都无法解析，试了很久无奈之下又准备找另一个集成了MySQL的更新的系统。就这样，我又开始了新一次的死亡回归——第三次重装系统。</p>
<h3 id="2016-09-12-15-27-08重装了CentOS7-0"><a href="#2016-09-12-15-27-08重装了CentOS7-0" class="headerlink" title="2016-09-12 15:27:08重装了CentOS7.0"></a>2016-09-12 15:27:08重装了CentOS7.0</h3><p>有了前面几次的经验，这次操作起来就是飞快了，3.5，数据库，所需模块，全都安装完毕,用python3 admin.py run也可以顺利的跑起来，然后就没有然后了。本以为这样跑起来就可以了，但是后来才发现并没有这么容易，这时候在网上搜了一些，发现了要想部署要经过很长一些步骤。再加上本地运行又有一些莫名其妙的错误于是就暂时放下来了。直到晚上试了N种方法不成功后抱着碰运气的想法运行了一个命令后终于成功运行了！简直开心爆了，一下子把这几天的不爽都冲消了大半。</p>
<blockquote>
<p>附：本地MySQL语法错误问题解决方法</p>
<p>原因：MySQLdb没有装好</p>
<ul>
<li>由于MySQLdb官方只支持到2.7，于是在3.5的环境下就会因为兼容性而有问题</li>
</ul>
<p>解决方法：</p>
<ol>
<li>sudo apt-get install libmysqlclient-dev(ubuntu)</li>
<li>sudo pip3 install mysqlclient</li>
</ol>
<p>以上后MySQldb就可以完美的运行了</p>
</blockquote>
<p>第二天又开始搞云主机了，根据志平的建议，还有就是因为教程的步骤太多太麻烦不想去试验于是就按照腾讯云的文档安装了Nginx，但当我根据他的教程来修改数据的时候，显示的却并不是他出现的那样，一顿修改之后发现各种报错而且还不能用，而且卸载再安装又有很多莫名其妙的错误，对我来说错误已经不可修复，然后就是另一次的死亡回归了——第四次重装系统。</p>
<h3 id="2016-09-13-13-18-06重装了Ubuntu-14-04-LTS"><a href="#2016-09-13-13-18-06重装了Ubuntu-14-04-LTS" class="headerlink" title="2016-09-13 13:18:06重装了Ubuntu 14.04 LTS"></a>2016-09-13 13:18:06重装了Ubuntu 14.04 LTS</h3><p>当我准备再次重装系统时，我向下翻，希望能找到一个更适合Python的环境，于是我找到了Ubuntu 14.04。用起来感觉确实比CentOS省心多了。集成了Python3.4，以及MySQL，再加上强大的apt，用起来感觉就是不一样。</p>
<p>这次我是下定决心跟着一个看起来比较靠谱的教程来做的，安装虚拟环境，安装所需的模块，安装配置uwsgi,安装配置Nginx，安装配置Supervisor。一切的一切，都是按照教程来的，但又有各种莫名奇妙的错误。uwsgi无法启动admin.py，使用一样的端口会显示端口已占用，使用其他的端口会显示找不到callable，于是又再次卡在这里了。这时候我觉得可能是因为环境安装的太杂，所以有一些冲突。因为安装虚拟环境的时候还不是很会，出了一些问题。这时候我又不愿意再次重装系统，因为胜利距离我就几步之遥了，这个时候我就决定先借用吕方的云主机了。也就是说，另一种方式的死亡回归——第五次重装系统。</p>
<blockquote>
<p>附：对virtualenv+uwsgu+Nginx+Supervisor理解以及配置</p>
<h4 id="virtualenv"><a href="#virtualenv" class="headerlink" title="virtualenv"></a>virtualenv</h4><ul>
<li>安装虚拟环境sudo pip3 install</li>
<li>新建名为jnugeek的虚拟环境virtualenv jnugeek(注意，这里不要用sudo，不然后面涉及到权限问题很崩溃的，默认使用系统模块，如果不想用系统模块就在jnugeek前面加上–no-site-packages,另一种说法：默认情况下虚拟环境不会依赖系统环境的global site-packages。比如系统环境里安装了MySQLdb模块，在虚拟环境里import MySQLdb会提示ImportError。如果想依赖系统环境的第三方软件包，可以使用参数–system-site-packages。)</li>
<li>启动虚拟环境source jnugeek/bin/activate/</li>
<li>在虚拟环境里面安装模块用pip并且不加sudo</li>
<li>退出虚拟环境deactivate</li>
<li>删除虚拟环境rm -r jnugeek</li>
</ul>
<p>虚拟环境作用:为应用营造一个相对独立的环境，可以在同一台主机上运行多个不同版本的python程序而不会因为模块之类的相互干扰。</p>
<h4 id="uwsgi"><a href="#uwsgi" class="headerlink" title="uwsgi"></a>uwsgi</h4><ul>
<li>安装pip install uwsgi</li>
<li><p>配置好config.ini</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&gt; [uwsgi]</div><div class="line">&gt; # uwsgi 启动时所使用的地址与端口</div><div class="line">&gt; socket = 127.0.0.1:5000</div><div class="line">&gt; </div><div class="line">&gt; # 指向网站目录</div><div class="line">&gt; chdir = /home/uftp/blog/</div><div class="line">&gt; </div><div class="line">&gt; # python 启动程序文件</div><div class="line">&gt; wsgi-file = blogapp.py</div><div class="line">&gt; </div><div class="line">&gt; # python 程序内用以启动的 application 变量名</div><div class="line">&gt; callable = app</div><div class="line">&gt; </div><div class="line">&gt; # 进程数</div><div class="line">&gt; processes = 4</div><div class="line">&gt; </div><div class="line">&gt; # 线程数</div><div class="line">&gt; threads = 2</div><div class="line">&gt; </div><div class="line">&gt; #状态检测地址</div><div class="line">&gt; stats = 127.0.0.1:9191</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>运行应用uwsgi config.ini</p>
</li>
</ul>
<p>uwsgi是用来跑python应用的，比起直接运行，其优势在于指定了进程和线程数，而直接运行遇到高访问量的时候处理可能就没那么快了。然而这样极其容易出问题，端口可能被占用，callable可能找不到，而我也是因为这些才放弃使用uwsgi。</p>
<h4 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h4><ul>
<li>安装sudo apt-get install nginx</li>
<li>配置，在/etc/nginx/sites-available目录中添加配置文件，建议直接改目录中的default，因为如果两个文件都建立了软链接，那么很可能引起端口冲突，事实上我遇到有一个问题就是因为这个</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">&gt; server &#123;</div><div class="line">&gt;     listen      80; # 监听80端口</div><div class="line">&gt; </div><div class="line">&gt;     root       /srv/awesome/www;</div><div class="line">&gt;     access_log /srv/awesome/log/access_log;</div><div class="line">&gt;     error_log  /srv/awesome/log/error_log;</div><div class="line">&gt; </div><div class="line">&gt;     server_name awesome.liaoxuefeng.com; # 配置域名</div><div class="line">&gt; </div><div class="line">&gt;     # 处理静态文件/favicon.ico:</div><div class="line">&gt;     location /favicon.ico &#123;</div><div class="line">&gt;         root /srv/awesome/www;</div><div class="line">&gt;     &#125;</div><div class="line">&gt; </div><div class="line">&gt;     # 处理静态资源:</div><div class="line">&gt;     location ~ ^\/static\/.*$ &#123;</div><div class="line">&gt;         root /srv/awesome/www;</div><div class="line">&gt;     &#125;</div><div class="line">&gt; </div><div class="line">&gt;     # 动态请求转发到9000端口:</div><div class="line">&gt;     location / &#123;</div><div class="line">&gt;         proxy_pass       http://127.0.0.1:9000;</div><div class="line">&gt;         proxy_set_header X-Real-IP $remote_addr;</div><div class="line">&gt;         proxy_set_header Host $host;</div><div class="line">&gt;         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</div><div class="line">&gt;     &#125;</div><div class="line">&gt; &#125;</div><div class="line">&gt;</div></pre></td></tr></table></figure>
<ul>
<li>重启nginx　sudo /etc/init.d/nginx reload(或者sudo service nginx restart)</li>
<li>如果遇到了问题</li>
</ul>
<ol>
<li>killall nginx</li>
<li>sudo service nginx start</li>
</ol>
<ul>
<li>如果配置文件无误，那就可以了。</li>
</ul>
<p>Nginx它可以处理静态资源，同时作为反向代理把动态请求交给Python代码处理。也就是说它连接起了服务器与网络，并加载了静态文件。它是整个服务器系统中最重要的部分。</p>
<h4 id="Supervisor"><a href="#Supervisor" class="headerlink" title="Supervisor"></a>Supervisor</h4><ul>
<li>安装sudo apt-get install supervisor</li>
<li><p>编写一个Supervisor的配置文件awesome.conf，存放到/etc/supervisor/conf.d/目录下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&gt; [program:awesome]</div><div class="line">&gt; </div><div class="line">&gt; command     = /srv/awesome/www/app.py</div><div class="line">&gt; directory   = /srv/awesome/www</div><div class="line">&gt; user        = www-data</div><div class="line">&gt; startsecs   = 3</div><div class="line">&gt; </div><div class="line">&gt; redirect_stderr         = true</div><div class="line">&gt; stdout_logfile_maxbytes = 50MB</div><div class="line">&gt; stdout_logfile_backups  = 10</div><div class="line">&gt; stdout_logfile          = /srv/awesome/log/app.log</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>启动/停止sudo supervisorctl start/stop awesome</p>
</li>
<li>重新加载sudo supervisorctl reload</li>
<li>查看运行状态sudo supervisorctl status</li>
</ul>
<p>Supervisor+uwsgi是用来更好的运行app的，uwsgi可以单独启动，但二者一起就更方便监控，崩溃的时候也可以自动重启了</p>
</blockquote>
<h3 id="2016-0X-XX-XX-XX-XX重装了Ubuntu-14-04-LTS"><a href="#2016-0X-XX-XX-XX-XX重装了Ubuntu-14-04-LTS" class="headerlink" title="2016-0X-XX XX:XX:XX重装了Ubuntu 14.04 LTS"></a>2016-0X-XX XX:XX:XX重装了Ubuntu 14.04 LTS</h3><p>这个是在吕方的电脑上装的，所以时间什么的就不具体了。</p>
<p>吸取了上次的教训后，这次装环境就更加谨慎了，也没什么差错，但是virtualenv+uwsgu+Nginx+Supervisor一套下来后还是在uwsgi上卡住了，死活识别不出来callable。无奈之下，又因为看到了廖雪峰的教程，由于对廖雪峰无脑的信任，就决定再次重装系统重新试验了。于是又在我的电脑上进行了新一次的死亡回归——第六次重装系统。</p>
<h3 id="2016-09-17-13-34-12重装了Ubuntu-14-04-LTS"><a href="#2016-09-17-13-34-12重装了Ubuntu-14-04-LTS" class="headerlink" title="2016-09-17 13:34:12重装了Ubuntu 14.04 LTS"></a>2016-09-17 13:34:12重装了Ubuntu 14.04 LTS</h3><p>最后一次死亡回归了，当真正成功的时候，我的内心在狂喜之中，更多的是不要再出现任何差错的想法。</p>
<p>按照廖雪峰的教程，一步一步走了下来，然而还是加载不出来界面，这次意外的没有报任何错误。但这样反而更令人崩溃。</p>
<p>后来又尝试了uwsgi，还是同样的错误。</p>
<p>之后又改了admin.py中的host为0.0.0.0，改端口，感觉尝试的命令就打了一百多行，然而一直不见效。</p>
<p>第二天志平调试了一番后突然能用了，我简直是欣喜若狂！然而命途多舛，后来我再看的时候网站突然就不能用了，再后来就进入Nginx的欢迎界面了。</p>
<p>最后还是靠陈毅钊，解决了问题，并且找到了问题的症结所在。至此，Flask应用才正式稳定的部署了上去。</p>
<blockquote>
<p>附：问题分析</p>
<ul>
<li>按照廖雪峰的教程不成功的原因之一就是因为Nginx的配置文件没读取出来，尽管建立了新的软链接，但是旧的软链接也同时存在，所以就有了sudo nginx中出现的80端口已被占用的错误。另外，用sudo nginx -t来查看配置文件是否有错误。</li>
<li>另一个原因就是因为Flask自身的特殊性，要想被外界访问，需要指定host为0.0.0.0，但事实上和127.0.0.1是相同的，因为二者绑定在了一起。然后就是Flask的端口不必指定为80(Nginx所监听的端口)，而是和下面那个指定的保持一致就可以了。</li>
<li>还有一个原因，也就是最初按照廖雪峰的却没有加载出任何界面的原因就是因为腾讯云主机设置了安全组只开放21端口，也就是说无论是5000端口还是80端口从外界都无法访问，因此也连Nginx的欢迎界面都加载不进去了。</li>
<li>到此，问题全部解决。至于uwsgi，由于我本身对端口之类的了解有限，无法给出一个说的通的解释，但我现在的问题是：uwsgi启动的端口应该和python app相同么？为什么我再设置这二者相同的时候就会出现端口冲突？在admin.py文件中到底要怎样才能让callable能被识别出来？这些就是另外的问题了。或许现在我有些谨慎也就不愿意再冒险去试探这些问题了。先让官网就这样比较稳定的运行吧。后续等用的人少了再进行升级更新。那个时候就要再次请尘封已久的git出山了。这段时间真的要感谢和我一起奋斗官网的胡妙和东麟了，还有积极帮忙的郑洋，志平，陈毅钊了。</li>
</ul>
</blockquote>
<p>异世界在今天迎来了第一季的完结，同时我的Flask第一季也迎来了完结。菜月昴的精神，也应该继续留存着，伴随着我以后继续的开发。</p>
<p>ps:MySQL中还有一个坑，Ubuntu中的MySQL默认是不支持中文的，所以在建数据库的时候要指明用utf8</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">create database jnugeek default character set utf8</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[vim命令]]></title>
      <url>https://blog.patrickcty.cc/2017/02/01/vim%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h1 id="vim常用命令"><a href="#vim常用命令" class="headerlink" title="vim常用命令"></a>vim常用命令</h1><h2 id="上下左右"><a href="#上下左右" class="headerlink" title="上下左右"></a>上下左右</h2><ul>
<li>j为下</li>
<li>k为上</li>
<li>h为左</li>
<li>l为右</li>
</ul>
<h2 id="定位符"><a href="#定位符" class="headerlink" title="定位符"></a>定位符</h2><ul>
<li>w右移一个单词（头）</li>
<li>e右移一个单词（尾）</li>
<li>$移动到行尾</li>
<li>0回到行首</li>
</ul>
<h2 id="命令符"><a href="#命令符" class="headerlink" title="命令符"></a>命令符</h2><ul>
<li>d删除(delete)<ul>
<li>dw删除一个单词</li>
<li>d$删除到行尾</li>
<li>等等，配合定位符使用</li>
</ul>
</li>
<li>u撤销(undo)<ul>
<li>U撤销整行的改变</li>
<li>CTRL-r重做撤销的改变</li>
</ul>
</li>
<li>p粘贴(paste)</li>
<li>v进入可视模式，复制什么的(view)</li>
<li>y在可视模式复制</li>
<li>r替换(replace)<ul>
<li>同样是配合定位使用效果更佳</li>
</ul>
</li>
<li>c改变(change)<ul>
<li>配合定位使用，比如cw替换这个单词光标之后的内容</li>
<li>会进入插入模式</li>
</ul>
</li>
</ul>
<h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h2><ul>
<li>/abc向后查找abc</li>
<li>?abc向前查找abc</li>
<li>n向后查找和上一次相同的内容，配合/或者?使用</li>
<li>N向前查找</li>
<li>CTRL-o回到之前位置</li>
<li>CTRL-i回到较新位置</li>
<li>%查找匹配的括号</li>
</ul>
<h2 id="代替"><a href="#代替" class="headerlink" title="代替"></a>代替</h2><ul>
<li>r命令(比较小型的）</li>
<li>:/s/A/B在此行中用B代替A</li>
<li>:/s/A/B/g此行中所有的A被B代替</li>
</ul>
<h2 id="执行外部命令"><a href="#执行外部命令" class="headerlink" title="执行外部命令"></a>执行外部命令</h2><ul>
<li>:!ls执行ls命令，命令可改</li>
<li>:w CTY保存文件为CTY</li>
</ul>
<h2 id="跳转"><a href="#跳转" class="headerlink" title="跳转"></a>跳转</h2><ul>
<li>G跳转到文件末尾</li>
<li>gg跳转到文件开头</li>
<li>506G跳转到506行(行数可以自己指定)</li>
</ul>
<h2 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h2><ul>
<li>a在光标后插入</li>
<li>i在光标前插入</li>
<li>o后面新开一行插入</li>
<li>O前一行插入</li>
</ul>
<p>基本的命令就是这么多了～这也是一晚上的学习成果。</p>
<p>vimtutor是个好东西～</p>
<p><strong>author</strong>:Patrick</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[utils.py一些理解]]></title>
      <url>https://blog.patrickcty.cc/2017/02/01/utils-py%E4%B8%80%E4%BA%9B%E7%90%86%E8%A7%A3/</url>
      <content type="html"><![CDATA[<p>就像模块的名字一样，这个模块就是为了实现一些实用功能</p>
<h1 id="第一部分"><a href="#第一部分" class="headerlink" title="第一部分"></a>第一部分</h1><blockquote>
<ul>
<li>find_modules</li>
<li>get_entries</li>
<li>join_url</li>
</ul>
</blockquote>
<p>这开头的三个模块，是为了注册蓝图</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_modules</span><span class="params">(init_file, fpattern=None)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    List names of modules in the same directory as init_file. The function is</div><div class="line">    usually used in __init__.py and returns value fit for __all__.</div><div class="line">    If you need to import it, use __import__ with level 1.</div><div class="line">    """</div><div class="line"></div><div class="line">    <span class="keyword">import</span> pkgutil</div><div class="line"></div><div class="line">    fpattern = re.compile(<span class="string">r"^[a-zA-Z][a-zA-Z0-9_]*$"</span>) \</div><div class="line">        <span class="keyword">if</span> fpattern <span class="keyword">is</span> <span class="keyword">None</span> <span class="keyword">else</span> re.compile(fpattern)</div><div class="line"></div><div class="line">    dirname = os.path.dirname(init_file)</div><div class="line">    entries = [modname <span class="keyword">for</span> _, modname, _ <span class="keyword">in</span> pkgutil.iter_modules([dirname])]  <span class="comment"># 之所以写三个是因为pk那个是一个生成器，有三个参数</span></div><div class="line">    entries = list(filter(<span class="keyword">lambda</span> n: fpattern.match(n), entries))  <span class="comment"># 过滤出非__init__.py的内容</span></div><div class="line"></div><div class="line">    <span class="keyword">return</span> entries</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_entries</span><span class="params">(init_file, glb)</span>:</span>  // 这个一般在API下一级目录的__init__.py使用</div><div class="line">    _entries = []</div><div class="line"></div><div class="line">    <span class="keyword">for</span> modname <span class="keyword">in</span> find_modules(init_file):</div><div class="line">        mod = __import__(modname, globals=glb, level=<span class="number">1</span>)  <span class="comment"># mod是一个模块对象，level指定了从上一级开始导入</span></div><div class="line">        <span class="keyword">if</span> hasattr(mod, <span class="string">"Entry"</span>):</div><div class="line">            _entries.append((modname, mod.Entry))</div><div class="line"></div><div class="line">    <span class="keyword">return</span> _entries</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">join_url</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    Join a args with seps. example:</div><div class="line"></div><div class="line">        &gt;&gt;&gt; join_url("abc/", "/def/", "fed", "yui")</div><div class="line">        '/abc/def/fed/yui/'</div><div class="line">        &gt;&gt;&gt; join_url("abc", "def#", "##fed", "yui", sep=('^', '#', '$'))</div><div class="line">        '^abc#def##fed#yui$'</div><div class="line"></div><div class="line">    """</div><div class="line">    sep = kwargs[<span class="string">"sep"</span>] <span class="keyword">if</span> <span class="string">"sep"</span> <span class="keyword">in</span> kwargs <span class="keyword">else</span> (<span class="string">'/'</span>, <span class="string">'/'</span>, <span class="string">'/'</span>)  <span class="comment"># 主要是根据这个来连接url的</span></div><div class="line"></div><div class="line">    concat_str = sep[<span class="number">0</span>]</div><div class="line">    concat_str += args[<span class="number">0</span>][<span class="number">1</span>:] <span class="keyword">if</span> args[<span class="number">0</span>][<span class="number">0</span>] == sep[<span class="number">0</span>] <span class="keyword">else</span> args[<span class="number">0</span>]</div><div class="line"></div><div class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> args[<span class="number">1</span>:]:  <span class="comment"># url前后都要判断</span></div><div class="line">        concat_str += <span class="string">""</span> <span class="keyword">if</span> concat_str[<span class="number">-1</span>] == sep[<span class="number">1</span>] <span class="keyword">else</span> sep[<span class="number">1</span>]</div><div class="line">        concat_str += a[<span class="number">1</span>:] <span class="keyword">if</span> a[<span class="number">0</span>][<span class="number">0</span>] == sep[<span class="number">1</span>] <span class="keyword">else</span> a</div><div class="line"></div><div class="line">    concat_str += <span class="string">""</span> <span class="keyword">if</span> concat_str[<span class="number">-1</span>] == sep[<span class="number">2</span>] <span class="keyword">else</span> sep[<span class="number">2</span>]</div><div class="line"></div><div class="line">    <span class="keyword">return</span> concat_str</div></pre></td></tr></table></figure>
<p>准备工作做好了就要注册蓝图了</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">def get_blueprint():</div><div class="line">    from flask_restful import Api</div><div class="line">    from flask import Blueprint</div><div class="line">    from common.utils import find_modules, join_url</div><div class="line"></div><div class="line">    # 注册了蓝图并初始化应用</div><div class="line">    bp = Blueprint(&apos;api&apos;, __name__)</div><div class="line">    api = Api(bp)</div><div class="line"></div><div class="line">    for modname in find_modules(__file__):</div><div class="line">        mod = __import__(modname, globals=globals(), locals=locals(), level=1)</div><div class="line">        if hasattr(mod, &quot;get_entries&quot;):</div><div class="line">            for entname, entry in mod.get_entries():  # 主要是这里面一个个的add很麻烦</div><div class="line">                # 前面的所有准备工作都是为了这个    </div><div class="line">                api.add_resource(entry, join_url(modname, entname),</div><div class="line">                                 endpoint=&quot;&#123;&#125;.&#123;&#125;&quot;.format(modname, entname))</div><div class="line"></div><div class="line">    return bp</div></pre></td></tr></table></figure>
<h1 id="第二部分"><a href="#第二部分" class="headerlink" title="第二部分"></a>第二部分</h1><blockquote>
<p>Session Interface</p>
</blockquote>
<p>不是很懂</p>
<h1 id="第三部分"><a href="#第三部分" class="headerlink" title="第三部分"></a>第三部分</h1><blockquote>
<p>API Test</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> json</div><div class="line"><span class="keyword">import</span> unittest</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_context</span><span class="params">(func)</span>:</span></div><div class="line">    <span class="keyword">from</span> flask <span class="keyword">import</span> current_app</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(self, *args, **kwargs)</span>:</span></div><div class="line">        <span class="comment"># 创建一个测试的环境</span></div><div class="line">        <span class="keyword">with</span> current_app.test_request_context():  </div><div class="line">            <span class="keyword">with</span> current_app.test_client() <span class="keyword">as</span> client:</div><div class="line">                self.client = client  <span class="comment"># 这个client真心强大，后面好多都用到了</span></div><div class="line">                self.login_record = <span class="keyword">None</span></div><div class="line"></div><div class="line">                func(self, *args, **kwargs)</div><div class="line"></div><div class="line">                <span class="keyword">del</span> self.client</div><div class="line">                <span class="keyword">del</span> self.login_record</div><div class="line"></div><div class="line">    <span class="keyword">return</span> wrapper</div><div class="line"></div><div class="line">whole_record = &#123;&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ApiTest</span><span class="params">(unittest.TestCase)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">jsonify</span><span class="params">(self, obj)</span>:</span>  <span class="comment"># json化返回值</span></div><div class="line">        <span class="keyword">import</span> json</div><div class="line">        <span class="keyword">return</span> json.dumps(</div><div class="line">                obj,</div><div class="line">                ensure_ascii=<span class="keyword">False</span>,</div><div class="line">                indent=<span class="number">4</span></div><div class="line">            )</div><div class="line"></div><div class="line">    <span class="comment"># 自动生成文档</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">record_requests</span><span class="params">(self, method, url, view, indata, response)</span>:</span></div><div class="line">        <span class="keyword">global</span> _RECORD_STR</div><div class="line">        <span class="keyword">global</span> whole_record</div><div class="line"></div><div class="line">        outdata = self.load_data(response.data)</div><div class="line">        user = <span class="string">"No user"</span></div><div class="line">        <span class="keyword">if</span> hasattr(self, <span class="string">'login_record'</span>) <span class="keyword">and</span> self.login_record:</div><div class="line">            user = <span class="string">"User `%s`"</span> % self.login_record</div><div class="line"></div><div class="line">        <span class="keyword">if</span> url <span class="keyword">not</span> <span class="keyword">in</span> whole_record:</div><div class="line">            doc = <span class="string">""</span></div><div class="line">            <span class="keyword">if</span> view <span class="keyword">and</span> getattr(view, <span class="string">'view_class'</span>, <span class="keyword">None</span>):</div><div class="line">                doc = view.view_class.__doc__ <span class="keyword">or</span> <span class="string">""</span></div><div class="line">            whole_record[url] = [doc]</div><div class="line"></div><div class="line">        whole_record[url] += [&#123;</div><div class="line">                <span class="string">'method'</span>: method,</div><div class="line">                <span class="string">'url'</span>: url,</div><div class="line">                <span class="string">'user'</span>: user,</div><div class="line">                <span class="string">'indata'</span>: indata,</div><div class="line">                <span class="string">'outdata'</span>: self.jsonify(outdata),</div><div class="line">            &#125;]</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">load_data</span><span class="params">(self, data)</span>:</span></div><div class="line">        <span class="keyword">if</span> isinstance(data, bytes):</div><div class="line">            data = data.decode(<span class="string">'utf8'</span>)</div><div class="line">        <span class="keyword">return</span> json.loads(data)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">login_user</span><span class="params">(self, account)</span>:</span></div><div class="line">        self.login_record = account.uid</div><div class="line"></div><div class="line">        <span class="keyword">from</span> flask <span class="keyword">import</span> url_for</div><div class="line">        response = self.client.post(</div><div class="line">            path=url_for(<span class="string">"api.auth.login"</span>),</div><div class="line">            data=&#123;<span class="string">'uid'</span>: account.uid, <span class="string">'passwd'</span>: account.p&#125;</div><div class="line">        )</div><div class="line">        self.assertEqual(response.status_code, <span class="number">200</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open</span><span class="params">(self, method, endpoint, **kwargs)</span>:</span></div><div class="line">        <span class="keyword">from</span> flask <span class="keyword">import</span> url_for, current_app</div><div class="line">        kwargs[<span class="string">'path'</span>] = url_for(endpoint)</div><div class="line"></div><div class="line">        resp = getattr(self.client, method)(**kwargs)</div><div class="line">        view = <span class="keyword">None</span></div><div class="line">        <span class="keyword">if</span> endpoint <span class="keyword">in</span> current_app.view_functions:</div><div class="line">            view = current_app.view_functions[endpoint]</div><div class="line">        indata = <span class="string">u'No argument.'</span></div><div class="line">        <span class="keyword">if</span> <span class="string">'data'</span> <span class="keyword">in</span> kwargs:</div><div class="line">            indata = kwargs[<span class="string">'data'</span>]</div><div class="line"></div><div class="line">        self.record_requests(</div><div class="line">                method=method.upper(),</div><div class="line">                url=kwargs[<span class="string">'path'</span>],</div><div class="line">                view=view,</div><div class="line">                indata=indata,</div><div class="line">                response=resp</div><div class="line">            )</div><div class="line"></div><div class="line">        <span class="keyword">return</span> resp</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, **kwargs)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.open(<span class="string">'get'</span>, **kwargs)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, **kwargs)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.open(<span class="string">'post'</span>, **kwargs)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">assertApiError</span><span class="params">(self, respdict, errcls)</span>:</span></div><div class="line">        self.assertIn(<span class="string">"status"</span>, respdict)</div><div class="line">        self.assertIn(<span class="string">"code"</span>, respdict[<span class="string">"status"</span>])</div><div class="line">        self.assertEqual(respdict[<span class="string">"status"</span>][<span class="string">"code"</span>], errcls.error_code)</div><div class="line"></div><div class="line">    <span class="comment"># 每进行一个测试都要执行下面这两个</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setUp</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">from</span> flask <span class="keyword">import</span> g, current_app</div><div class="line">        g.db.create_all()</div><div class="line">        self.dbsess = g.db.create_scoped_session()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tearDown</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">from</span> flask <span class="keyword">import</span> g</div><div class="line">        <span class="keyword">del</span> self.dbsess</div><div class="line">        g.db.drop_all()</div></pre></td></tr></table></figure>
<p>看到这里真的很佩服志平…果然差距还是太大了呀ToT</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python几个常见高级用法]]></title>
      <url>https://blog.patrickcty.cc/2017/02/01/Python%E5%87%A0%E4%B8%AA%E5%B8%B8%E8%A7%81%E9%AB%98%E7%BA%A7%E7%94%A8%E6%B3%95/</url>
      <content type="html"><![CDATA[<h2 id="filter-function-iterable"><a href="#filter-function-iterable" class="headerlink" title="filter(function, iterable)"></a>filter(function, iterable)</h2><ul>
<li>function：过滤的条件</li>
<li>iterable：要被过滤的对象</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt;a=[1,2,3,4,5,6,7]</div><div class="line">&gt;&gt;&gt;filter(lambda x:x&gt;5, a)</div><div class="line">&gt;&gt;&gt;[6,7]</div></pre></td></tr></table></figure>
<h2 id="map-function-iterable-…"><a href="#map-function-iterable-…" class="headerlink" title="map(function, iterable, …)"></a>map(function, iterable, …)</h2><p>把函数作用在对象的每个元素中</p>
<ul>
<li>function：作用函数</li>
<li>iterable：作用对象</li>
<li><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt;a=[1,2,3]</div><div class="line">&gt;&gt;&gt;b=[4,5,6]</div><div class="line">&gt;&gt;&gt;map(lambda x,y:x+y, a,b)</div><div class="line">&gt;&gt;&gt;[5,7,9]</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="import-name-globals-None-locals-None-fromlist-level-0"><a href="#import-name-globals-None-locals-None-fromlist-level-0" class="headerlink" title="import(name, globals=None, locals=None, fromlist=(), level=0)"></a><strong>import</strong>(name, globals=None, locals=None, fromlist=(), level=0)</h2><p>用来import模块，另外返回值是模块对象</p>
<ul>
<li><p>import spam相当于</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">spam = __import__(&apos;spam&apos;, globals(), locals(), [], 0)</div></pre></td></tr></table></figure>
</li>
<li><p>import spam.ham相当于</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">spam = __import__(&apos;spam.ham&apos;, globals(), locals(), [], 0)</div></pre></td></tr></table></figure>
</li>
<li><p>from spam.ham import eggs, sausage as saus相当于</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">food = __import__(&apos;spam.ham&apos;, globals(), locals(), [eggs, sausage], 0)</div><div class="line">eggs = food.eggs</div><div class="line">sauage = food.sausage</div></pre></td></tr></table></figure>
</li>
<li><p>level是用于决定是否执行绝对导入。-1是绝对相对都会尝试，默认。0是绝对。正数表示相对当前模块的父目录的层数。</p>
</li>
</ul>
<h2 id="format"><a href="#format" class="headerlink" title="format()"></a>format()</h2><p>这是字符对象的函数，用来格式化字符串</p>
<ul>
<li><p>基本用法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&apos;&#123;0&#125;,&#123;1&#125;&apos;.format(&apos;kzc&apos;,18)  </div><div class="line">&gt;&gt;&gt;&apos;kzc,18&apos;  </div><div class="line">&apos;&#123;&#125;,&#123;&#125;&apos;.format(&apos;kzc&apos;,18)  </div><div class="line">&gt;&gt;&gt;&apos;kzc,18&apos;  </div><div class="line">&apos;&#123;1&#125;,&#123;0&#125;,&#123;1&#125;&apos;.format(&apos;kzc&apos;,18)  </div><div class="line">&gt;&gt;&gt;&apos;18,kzc,18&apos;</div></pre></td></tr></table></figure>
</li>
<li><p>占位符<br>：前面是表示对应后面的第几个数<br>：后面一位表示用这个填充<br>：后面的&gt;表示向右对齐</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&apos;&#123;:&gt;8&#125;&apos;.format(&apos;189&apos;)</div><div class="line">&gt;&gt;&gt;&apos;     189&apos;</div><div class="line">&apos;&#123;:0&gt;8&#125;&apos;.format(&apos;189&apos;)</div><div class="line">&gt;&gt;&gt;&apos;00000189&apos;</div><div class="line">&apos;&#123;:a&gt;8&#125;&apos;.format(&apos;189&apos;)</div><div class="line">&gt;&gt;&gt;&apos;aaaaa189&apos;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python高级用法（一）]]></title>
      <url>https://blog.patrickcty.cc/2017/02/01/Python%E9%AB%98%E7%BA%A7%E7%94%A8%E6%B3%95%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      <content type="html"><![CDATA[<p> Python高级用法（一）</p>
<h3 id="Python赋值方式可以有很多种，特别是对于可迭代变量，eg：list，tuple，字符串"><a href="#Python赋值方式可以有很多种，特别是对于可迭代变量，eg：list，tuple，字符串" class="headerlink" title="Python赋值方式可以有很多种，特别是对于可迭代变量，eg：list，tuple，字符串"></a>Python赋值方式可以有很多种，特别是对于可迭代变量，eg：list，tuple，字符串</h3><p>一个list的内容赋值给多个变量<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; list1 = [&apos;this&apos;, &apos;is&apos;, &apos;a&apos;, &apos;list&apos;]</div><div class="line">&gt;&gt;&gt; a, *b, c = list1</div><div class="line">&gt;&gt;&gt; a</div><div class="line">&apos;this&apos;</div><div class="line">&gt;&gt;&gt; b</div><div class="line">[&apos;is&apos;, &apos;a&apos;]</div></pre></td></tr></table></figure></p>
<h3 id="Python对数据结构支持也不错"><a href="#Python对数据结构支持也不错" class="headerlink" title="Python对数据结构支持也不错"></a>Python对数据结构支持也不错</h3><p>队列<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; from collections import deque</div><div class="line">&gt;&gt;&gt; q = deque(maxlen=3)  # 容量为三的队列，多了就自动队头元素出队</div><div class="line">&gt;&gt;&gt; q.append(1)</div><div class="line">&gt;&gt;&gt; r = deque([1, 2, 3], maxlen=5)</div><div class="line">&gt;&gt;&gt; r.popleft()</div><div class="line">1</div><div class="line">&gt;&gt;&gt; r.pop()</div><div class="line">3</div></pre></td></tr></table></figure></p>
<p>堆<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; import heapq</div><div class="line">&gt;&gt;&gt; nums = [1, 8, 2, 23, 7, -4, 18, 23, 42, 37, 2]</div><div class="line">&gt;&gt;&gt; heapq.nlargest(5, nums)  # 最大的五个</div><div class="line">[42, 37, 23, 23, 18]</div><div class="line">&gt;&gt;&gt; heapq.nsmallest(5, nums)</div><div class="line">[-4, 1, 2, 2, 7]</div><div class="line">&gt;&gt;&gt; heapq.heapify(nums)  # 进行堆排序，每次出堆的都是最小的</div><div class="line">&gt;&gt;&gt; nums</div><div class="line">[-4, 2, 1, 23, 7, 2, 18, 23, 42, 37, 8]</div><div class="line">&gt;&gt;&gt; headpq.headpop(nums)</div><div class="line">-4</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python的静态方法与类方法]]></title>
      <url>https://blog.patrickcty.cc/2017/02/01/Python%E7%9A%84%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95%E4%B8%8E%E7%B1%BB%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">class Patrick:</div><div class="line">    </div><div class="line">    @classmethod</div><div class="line">    def cty(cls):</div><div class="line">        print(&apos;This is a class method&apos;)</div><div class="line">        </div><div class="line">    @staticmethod</div><div class="line">    def cheng():</div><div class="line">        print(&apos;This is a static method&apos;)</div><div class="line">        </div><div class="line">    @property</div><div class="line">    def tian(self, name=&apos;cty&apos;)</div><div class="line">        print(&apos;name &#123;&#125; cannot bechanged&apos;.format(name))</div><div class="line">        </div><div class="line">pat = Patrick()</div><div class="line">pat.cty()</div><div class="line">pat.cheng()</div></pre></td></tr></table></figure>
<p>二者分别用上面的装饰器来修饰</p>
<p>类方法以类名为参数，使用时与实例无关</p>
<p>静态方法使用时与实例无关</p>
<p>另外@property修饰的函数是一个只读函数</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JNU练习赛——B]]></title>
      <url>https://blog.patrickcty.cc/2017/02/01/JNU%E7%BB%83%E4%B9%A0%E8%B5%9B%E2%80%94%E2%80%94B/</url>
      <content type="html"><![CDATA[<h1 id="Problem-B-Max-Sum"><a href="#Problem-B-Max-Sum" class="headerlink" title="Problem B:Max Sum"></a>Problem B:Max Sum</h1><p><a href="http://note.youdao.com/http://acm.hdu.edu.cn/diy/contest_showproblem.php?pid=1003&amp;cid=31109" target="_blank" rel="external">原题链接</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><blockquote>
<p>Given a sequence a[1],a[2],a[3]……a[n], your job is to calculate the max sum of a sub-sequence. For example, given (6,-1,5,4,-7), the max sum in this sequence is 6 + (-1) + 5 + 4 = 14.</p>
</blockquote>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><blockquote>
<p>The first line of the input contains an integer T(1&lt;=T&lt;=20) which means the number of test cases. Then T lines follow, each line starts with a number N(1&lt;=N&lt;=100000), then N integers followed(all the integers are between -1000 and 1000).</p>
</blockquote>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><blockquote>
<p>For each test case, you should output two lines. The first line is “Case #:”, # means the number of the test case. The second line contains three integers, the Max Sum in the sequence, the start position of the sub-sequence, the end position of the sub-sequence. If there are more than one result, output the first one. Output a blank line between two cases.</p>
</blockquote>
<h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><blockquote>
<p>2</p>
<p>5 6 -1 5 4 -7</p>
<p>7 0 6 -1 1 -6 7 -5</p>
</blockquote>
<h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><blockquote>
<p>Case 1:</p>
<p>14 1 4</p>
<p>Case 2:</p>
<p>7 1 6</p>
<p>MarkDown显示不出来相应的效果，还是得看原题</p>
</blockquote>
<h2 id="个人感想"><a href="#个人感想" class="headerlink" title="个人感想"></a>个人感想</h2><p>这一题其实并不难，只是我很多情况都没考虑进去，所以提交了八次都是WA。自己的考虑问题的能力还需要锻炼！</p>
<p>比如start不为负，比如所有数全为负这些情况。</p>
<h2 id="我的思路"><a href="#我的思路" class="headerlink" title="我的思路"></a>我的思路</h2><p>我错误的认为第一个数必须是正数，其实负数，零都可以。</p>
<p>可以用sum来判断第一个数，假设sum是从指定的第一个数到现在的和，如果和大于零则第一个数不改变，小于零就变成新输入的数。但是如果从头到尾都是负数，也就是说sum值一直在变小，这样直接改就会出错，因此start值的更新要等到新的sum比原来的max值大，这时候更新start和end值。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    freopen(<span class="string">"in.txt"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</div><div class="line">    <span class="keyword">int</span> T;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);  <span class="comment">// 测试的次数</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; T; ++i)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> n;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);  <span class="comment">// 序列的长度</span></div><div class="line">        <span class="keyword">int</span> sum;</div><div class="line">        <span class="keyword">int</span> num;</div><div class="line">        <span class="keyword">int</span> max;</div><div class="line">        <span class="keyword">int</span> pos = <span class="number">1</span>;</div><div class="line">        <span class="keyword">int</span> start = <span class="number">1</span>;</div><div class="line">        <span class="keyword">int</span> end = <span class="number">1</span>;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;num);</div><div class="line">        max = sum = num;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">2</span>; j &lt;= n; ++j)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;num);</div><div class="line">            <span class="keyword">if</span> (sum + num &lt; num)  <span class="comment">// 如果都是负数的话</span></div><div class="line">            &#123;</div><div class="line">                pos = j;  <span class="comment">// 开始点不能立即更新，应该和结束点一起更新，不然可能出现结束点比开始点还大的情况</span></div><div class="line">                sum = num;</div><div class="line">            &#125; <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                sum += num;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (sum &gt; max)</div><div class="line">            &#123;</div><div class="line">                max = sum;</div><div class="line">                start = pos;</div><div class="line">                end = j;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Case %d:\n%d %d %d%s"</span>, i + <span class="number">1</span>, max, start, end, (i == (T - <span class="number">1</span>))?<span class="string">"\n\0"</span>:<span class="string">"\n\n"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>ACM是一个团队活动，就算我的思维有局限性，但是大家一起问题就不会一直卡住了～</p>
<p><a href="http://blog.csdn.net/bruce_zeng/article/details/8818304" target="_blank" rel="external">一个参考范例</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JavaSrcipt入门基本知识(2)]]></title>
      <url>https://blog.patrickcty.cc/2017/02/01/JavaSrcipt%E5%85%A5%E9%97%A8%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86(2)/</url>
      <content type="html"><![CDATA[<h1 id="JavaSrcipt入门基本知识-2"><a href="#JavaSrcipt入门基本知识-2" class="headerlink" title="JavaSrcipt入门基本知识(2)"></a><a href="http://www.imooc.com/learn/10" target="_blank" rel="external">JavaSrcipt入门基本知识(2)</a></h1><h2 id="常用对象"><a href="#常用对象" class="headerlink" title="常用对象"></a>常用对象</h2><ul>
<li><p>数组</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var array = new Array();</div></pre></td></tr></table></figure>
</li>
<li><p>日期</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var date = new Date();</div></pre></td></tr></table></figure>
</li>
<li><p>字符串</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var string = new String();</div></pre></td></tr></table></figure>
</li>
<li><p>数学(固有的对象，无需创建)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var mypi=Math.PI; </div><div class="line">var myabs=Math.abs(-15);</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="浏览器对象"><a href="#浏览器对象" class="headerlink" title="浏览器对象"></a>浏览器对象</h2><h3 id="计时器"><a href="#计时器" class="headerlink" title="计时器"></a>计时器</h3><ul>
<li><p>setInterval(代码,交互时间)</p>
<ul>
<li>代码：要调用的函数或要执行的代码串。</li>
<li>交互时间：周期性执行或调用表达式之间的时间间隔，以毫秒计（1s=1000ms）。</li>
<li>返回值：一个可以传递给 clearInterval() 从而取消对”代码”的周期性执行的值。</li>
<li>作用：在执行时,从载入页面后每隔指定的时间执行代码。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var time=new Date();          </div><div class="line">var attime=time.getHours()+&quot;:&quot;+time.getMinutes()+&quot;:&quot;+time.getSeconds();</div><div class="line">document.getElementById(&quot;clock&quot;).value = attime;  // id为clock的显示当前时间,并且每秒改变</div><div class="line">set Interval(clock, 1000);</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>clearInterval(id_of_setInterval)</p>
<ul>
<li>参数是上面提到的返回值</li>
<li>作用：结束上面的计时器</li>
</ul>
</li>
<li><p>setTimeout(代码,延迟时间)</p>
<ul>
<li>要调用的函数或要执行的代码串。</li>
<li>延时时间：在执行代码前需等待的时间，以毫秒为单位（1s=1000ms)。</li>
<li>作用：在载入后延迟指定时间后,去执行一次表达式,<strong>仅执行一次</strong>。</li>
<li>返回值：和之前的类似</li>
</ul>
</li>
<li><p>clearTimeout(id_of_setTimeout)</p>
<ul>
<li>和之前的基本一样</li>
</ul>
</li>
</ul>
<h3 id="history对象"><a href="#history对象" class="headerlink" title="history对象"></a>history对象</h3><p>history对象记录了浏览过的URL，可以通过它来前进后退。<br>注意：每个浏览器窗口，每个标签都有自己的history对象与特定的window对象关联</p>
<ul>
<li>window.history.length为当前窗口浏览历史总长度</li>
<li>window.history.forward()加载下一个URL</li>
<li>window.history.back()加载上一个URL</li>
<li>window.history.go(number)加载某个具体页面，根据数字来判定向前与向后</li>
</ul>
<h3 id="location对象"><a href="#location对象" class="headerlink" title="location对象"></a>location对象</h3><p>用于获取或设置窗体的URL，并且可以用于解析URL。</p>
<h3 id="navigator对象"><a href="#navigator对象" class="headerlink" title="navigator对象"></a>navigator对象</h3><p>包含有关浏览器的信息，通常用于检测浏览器与操作系统的版本。</p>
<p>用navigator.userAgent来判断使用浏览器种类从而来处理兼容性问题</p>
<h3 id="screen对象"><a href="#screen对象" class="headerlink" title="screen对象"></a>screen对象</h3><p>用于获取用户的屏幕信息。</p>
<p>用法：window.screen.属性</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JavaSrcipt入门基本知识]]></title>
      <url>https://blog.patrickcty.cc/2017/02/01/JavaSrcipt%E5%85%A5%E9%97%A8%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/</url>
      <content type="html"><![CDATA[<h1 id="JavaSrcipt入门基本知识"><a href="#JavaSrcipt入门基本知识" class="headerlink" title="JavaSrcipt入门基本知识"></a>JavaSrcipt入门基本知识</h1><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><ul>
<li><p>JS的数组和Java的很像，要使用都得先声明再new</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> array = <span class="keyword">new</span> <span class="built_in">Array</span>()  <span class="comment">// Array是数组类名，可以不带参数</span></div><div class="line"><span class="keyword">var</span> array = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">5</span>)  <span class="comment">// 五个元素</span></div><div class="line"><span class="keyword">var</span> array = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">3</span>， <span class="number">4</span>， <span class="number">5</span>)  <span class="comment">// 声明并赋值</span></div></pre></td></tr></table></figure>
</li>
<li><p>数组规定很松散，可以随意增加元素</p>
</li>
<li>用.length来查看长度</li>
<li><p>二维数组</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"> // 方法一</div><div class="line"> var myarr=new Array();  //先声明一维 </div><div class="line">for(var i=0;i&lt;2;i++)&#123;   //一维长度为2</div><div class="line">   myarr[i]=new Array();  //再声明二维 </div><div class="line">   for(var j=0;j&lt;3;j++)&#123;   //二维长度为3</div><div class="line">   myarr[i][j]=i+j;   // 赋值，每个数组元素的值为i+j</div><div class="line">   &#125;</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> // 方法二</div><div class="line"> var Myarr = [[0 , 1 , 2 ],[1 , 2 , 3]]</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><ul>
<li>onclick()鼠标点击事件</li>
<li>onmouseover()鼠标经过事件</li>
<li>onmouseout()鼠标移开事件</li>
<li>onfocus()光标聚集事件</li>
<li>onblur()失焦事件</li>
<li>onselect()内容选中事件</li>
<li>onchange()文本框内容改变事件</li>
<li>onload()加载事件，一般在body标签里面</li>
<li>onoutload()卸载事件，主要是点击链接跳转的时候触发</li>
</ul>
<h2 id="依旧是一个练习"><a href="#依旧是一个练习" class="headerlink" title="依旧是一个练习"></a>依旧是一个练习</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span> 事件<span class="tag">&lt;/<span class="name">title</span>&gt;</span>  </div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">   <span class="function"><span class="keyword">function</span> <span class="title">count</span>(<span class="params"></span>)</span>&#123;</div><div class="line">       <span class="keyword">var</span> a = <span class="built_in">document</span>.getElementById(<span class="string">"txt1"</span>).value;  <span class="comment">// .value不要忘，要不然就是一个对象</span></div><div class="line">       <span class="keyword">var</span> method = <span class="built_in">document</span>.getElementById(<span class="string">"select"</span>).value;</div><div class="line">       <span class="keyword">var</span> b = <span class="built_in">document</span>.getElementById(<span class="string">"txt2"</span>).value;</div><div class="line">       <span class="keyword">var</span> result;</div><div class="line">       <span class="keyword">switch</span> (method)</div><div class="line">       &#123;</div><div class="line">           <span class="keyword">case</span> <span class="string">"+"</span>:  <span class="comment">// JS字符也是双引号</span></div><div class="line">               result = <span class="built_in">parseInt</span>(a) + <span class="built_in">parseInt</span>(b);</div><div class="line">               <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="string">"-"</span>:</div><div class="line">                result = a - b;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="string">"*"</span>:</div><div class="line">               result = a * b;</div><div class="line">               <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="string">"/"</span>:</div><div class="line">                result = a / b;</div><div class="line">       &#125;</div><div class="line">        <span class="built_in">document</span>.getElementById(<span class="string">"fruit"</span>).value = result;  <span class="comment">// 给文本框的文本加入内容也是直接赋值就可以了</span></div><div class="line">   &#125;</div><div class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span> </div><div class="line"> <span class="tag">&lt;/<span class="name">head</span>&gt;</span> </div><div class="line"> <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'text'</span> <span class="attr">id</span>=<span class="string">'txt1'</span> /&gt;</span> </div><div class="line">   <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">'select'</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">'+'</span>&gt;</span>+<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"-"</span>&gt;</span>-<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"*"</span>&gt;</span>*<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"/"</span>&gt;</span>/<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'text'</span> <span class="attr">id</span>=<span class="string">'txt2'</span> /&gt;</span> </div><div class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'button'</span> <span class="attr">value</span>=<span class="string">' = '</span> <span class="attr">onclick</span>=<span class="string">"count()"</span>/&gt;</span> <span class="comment">&lt;!--通过 = 按钮来调用创建的函数，得到结果--&gt;</span> </div><div class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'text'</span> <span class="attr">id</span>=<span class="string">'fruit'</span> /&gt;</span>   </div><div class="line"> <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JavaSrcipt入门基本操作]]></title>
      <url>https://blog.patrickcty.cc/2017/02/01/JavaSrcipt%E5%85%A5%E9%97%A8%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
      <content type="html"><![CDATA[<h1 id="JavaSrcipt入门基本操作"><a href="#JavaSrcipt入门基本操作" class="headerlink" title="JavaSrcipt入门基本操作"></a>JavaSrcipt入门基本操作</h1><h2 id="基本知识"><a href="#基本知识" class="headerlink" title="基本知识"></a>基本知识</h2><ul>
<li><script type="text/javascript"></script>插入JS代码</li>
<li><script src="script.js"></script>引用外部的JS代码</li>
<li>用var声明变量</li>
<li>定义函数<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">function 函数名()</div><div class="line">&#123;</div><div class="line">     函数代码;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="互动方法"><a href="#互动方法" class="headerlink" title="互动方法"></a>互动方法</h2><ul>
<li>document.write()直接在网页中输出内容</li>
<li>alert()弹窗，只有确定</li>
<li>confirm()弹窗，确定取消选择，返回值为boolean型</li>
<li>prompt(str1, str2)输入，输入内容作为返回值，取消则返回null</li>
<li>window.open([URL], [窗口名称], [参数字符串])打开窗口</li>
<li>window.close()/<window object="">.close关闭某个窗口</window></li>
</ul>
<h2 id="DOM操作"><a href="#DOM操作" class="headerlink" title="DOM操作"></a>DOM操作</h2><ul>
<li>document.getElementById(“id”)通过id获取元素，获取的是对象，如果要读取内容后面加上.innerHTML</li>
<li>Object.style.property其中property是具体的样式，通过赋值可以改变样式</li>
<li>Object.style.display对应CSS的display</li>
<li>Object.className操作类名</li>
</ul>
<h2 id="小小的实例"><a href="#小小的实例" class="headerlink" title="小小的实例"></a>小小的实例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE HTML&gt;</div><div class="line"></div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;meta http-equiv=&quot;Content-Type&quot; Content=&quot;text/html; charset=utf-8&quot; /&gt;</div><div class="line">&lt;title&gt;javascript&lt;/title&gt;</div><div class="line">&lt;style type=&quot;text/css&quot;&gt;</div><div class="line">body&#123;font-size:12px;&#125;</div><div class="line">#txt&#123;</div><div class="line">    height:400px;</div><div class="line">    width:600px;</div><div class="line">    border:#333 solid 1px;</div><div class="line">	padding:5px;&#125;</div><div class="line">p&#123;</div><div class="line">	line-height:18px;</div><div class="line">	text-indent:2em;&#125;</div><div class="line">&lt;/style&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">  &lt;h2 id=&quot;con&quot;&gt;JavaScript课程&lt;/H2&gt;</div><div class="line">  &lt;div id=&quot;txt&quot;&gt; </div><div class="line">     &lt;h5&gt;JavaScript为网页添加动态效果并实现与用户交互的功能。&lt;/h5&gt;</div><div class="line">        &lt;p&gt;1. JavaScript入门篇，让不懂JS的你，快速了解JS。&lt;/p&gt;</div><div class="line">        &lt;p&gt;2. JavaScript进阶篇，让你掌握JS的基础语法、函数、数组、事件、内置对象、BOM浏览器、DOM操作。&lt;/p&gt;</div><div class="line">        &lt;p&gt;3. 学完以上两门基础课后，在深入学习JavaScript的变量作用域、事件、对象、运动、cookie、正则表达式、ajax等课程。&lt;/p&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">  &lt;form&gt;</div><div class="line">  &lt;!--当点击相应按钮，执行相应操作，为按钮添加相应事件--&gt;</div><div class="line">    &lt;input type=&quot;button&quot; value=&quot;改变颜色&quot; onclick=&quot;changeColor()&quot; /&gt;  </div><div class="line">    &lt;input type=&quot;button&quot; value=&quot;改变宽高&quot; onclick=&quot;changeSize()&quot; /&gt;</div><div class="line">    &lt;input type=&quot;button&quot; value=&quot;隐藏内容&quot; onclick=&quot;hide()&quot; /&gt;</div><div class="line">    &lt;input type=&quot;button&quot; value=&quot;显示内容&quot; onclick=&quot;show()&quot; /&gt;</div><div class="line">    &lt;input type=&quot;button&quot; value=&quot;取消设置&quot; onclick=&quot;cancel()&quot; /&gt;</div><div class="line">  &lt;/form&gt;</div><div class="line">  &lt;script type=&quot;text/javascript&quot;&gt;</div><div class="line">  var obj = document.getElementById(&quot;txt&quot;);</div><div class="line">  //定义&quot;改变颜色&quot;的函数</div><div class="line">  function changeColor()</div><div class="line">  &#123;</div><div class="line">      obj.style.color = &quot;yellow&quot;;  // 记得加引号！！！</div><div class="line">      obj.style.backgroundColor = &quot;pink&quot;;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  //定义&quot;改变宽高&quot;的函数</div><div class="line">  function changeSize()</div><div class="line">  &#123;</div><div class="line">      obj.style.width = &quot;100px&quot;;  // 记得加引号！！！</div><div class="line">      obj.style.height = &quot;1000px&quot;;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  //定义&quot;隐藏内容&quot;的函数</div><div class="line">  function hide()</div><div class="line">  &#123;</div><div class="line">      obj.style.display = &quot;none&quot;;  // diaplay不要拼错</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  //定义&quot;显示内容&quot;的函数</div><div class="line">  function show()</div><div class="line">  &#123;</div><div class="line">      obj.style.display = &quot;block&quot;;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  //定义&quot;取消设置&quot;的函数</div><div class="line">  function cancel()</div><div class="line">  &#123;</div><div class="line">      var cel = confirm(&quot;Are you sure?&quot;);</div><div class="line">      if (cel)</div><div class="line">      &#123;</div><div class="line">          // 删除了style属性就相当于取消了所有手动设置</div><div class="line">          obj.removeAttribute(&quot;style&quot;);  </div><div class="line">      &#125;</div><div class="line">  &#125;</div><div class="line">  &lt;/script&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p>上面这个实例还坑了我一把…</p>
<p>赋值都是要带引号的啊！！</p>
<p>一开始五个都是错的…</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[https，想要使用你没那么容易]]></title>
      <url>https://blog.patrickcty.cc/2017/02/01/https%EF%BC%8C%E6%83%B3%E8%A6%81%E4%BD%BF%E7%94%A8%E4%BD%A0%E6%B2%A1%E9%82%A3%E4%B9%88%E5%AE%B9%E6%98%93/</url>
      <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>今天在搞博客的时候突然想给域名加上https，正好瞟到腾讯云里面又免费的SSL证书可以申请，于是抱着试一试的心态点了进去。没想到耗费了大半个下午。</p>
<h2 id="得到SSL证书"><a href="#得到SSL证书" class="headerlink" title="得到SSL证书"></a>得到SSL证书</h2><p>其实获得SSL证书并不难，由于域名还有服务器都在腾讯云上，所以在腾讯云上申请一个证书就比较容易了。</p>
<p>刚开始的时候我还以为http变成https非常困难，后来知道只用申请一个SSL证书就可以https加持了，然而事情就是这么简单么？</p>
<p>一开始我只想给我的个人博客加上https，结果在申请SSL证书的时候卡住了，倒是jnugeek.cn很快就申请通过了，于是决定先给jnugeek.cn加上https。</p>
<h2 id="显示https没那么容易"><a href="#显示https没那么容易" class="headerlink" title="显示https没那么容易"></a>显示https没那么容易</h2><p>根据腾讯云的文档，在nginx上使用https只用下载证书然后把证书安装在相应的地方并修改nginx的配置文件就可以了，在改的时候我也遇到了很多的坑，不过也这也加深了我对nginx的理解。下面附上nginx的相关配置：</p>
<pre><code>server {
    listen 443;  # https监听443端口
    server_name www.domain.com; #填写绑定证书的域名
    ssl on;
    ssl_certificate 1_www.domain.com_bundle.crt;
    ssl_certificate_key 2_www.domain.com.key;
    ssl_session_timeout 5m;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2; #按照这个协议配置
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;#按照这个套件配置
    ssl_prefer_server_ciphers on;
    location / {
        root   html; #站点目录
        index  index.html index.htm;
    }
}

server {
    listen 80;  # http监听80端口
    server_name www.domain.com;
    rewrite ^(.*) https://$host$1 permanent;  # 把80进来的请求重定向到https
}
</code></pre><p>其中每个server都是独立的虚拟机，因为http和https本身就是不相互兼容的，所以这里指定两个也不奇怪了。</p>
<p>关于nginx的配置<a href="https://my.oschina.net/u/1156660/blog/364955" target="_blank" rel="external">这个</a>说的很清楚了。</p>
<p> 刚开始我就在server的配置吃了一点小亏，我只是机械的把ssl的部分加上去了，结果果然是没什么卵用，直到改成上面这种样式才终于可以了！</p>
<p> 于是乎在浏览器就惊喜的看到了https～而且即使输入的是http也会自动定向到https～到这里的时候我真的超级开心！然而我还是高兴地太早了，https的那把绿色的小锁并没有显示出来…</p>
<h2 id="网站中含有不安全的内容"><a href="#网站中含有不安全的内容" class="headerlink" title="网站中含有不安全的内容"></a>网站中含有不安全的内容</h2><p>使用上了https后并没有想象中的那么棒，相反很多问题出现了。</p>
<p>当我用Ubuntu自带的浏览器打开时我发现它提示网站中含有不安全的内容，Google之后发现是因为https和http混合使用。网站上那些放在七牛云上的静态文件现在反而让网站成为了不安全网站，而且后来我在Chrome上看的时候发现js都被屏蔽了，图片也是显示黄色三角警告。</p>
<p>后来我看到，黑客可能通过http对js文件进行篡改，而js代码又是可执行的，于是可以造成很严重的后果，这样看来js被屏蔽也是可以理解的。</p>
<p>为了解决这个问题，我打算把静态文件转系到一个https的服务器上，然而试了腾讯云的对象储存服务，以及七牛云的相关服务后发现依然是http。</p>
<p>很多大公司他们的静态文件都是放在自己专门的服务器上的，这样的话就不用依靠第三方的了，这对于我们这种学生党，个人开发者就不是很好了…不过其实七牛云上面好像有相应的https服务，这是然而当时因为另外的问题决定暂时放弃https了。</p>
<p>在折腾对象储存服务，还接触到了CDN，CDN是把各个不同的请求，根据地域等从不同的服务器分发，这样就能加快加载速度了。</p>
<p>之后我还发现了https问题并不只在静态文件上，post的时候也出现了问题，当我提交表单的时候并没有跳转回相应的界面，而是最简陋的白色背景界面…这时候我才意识到这样贸然上https确实不太明智，于是决定先回到http了。然而我改回http之后还是有一些问题，看来是网站本身的问题了，这锅https不背！</p>
<p>其实关于ajax，如果是相对路径那么就没影响，绝对路径就要考虑http与https的问题了。</p>
<p>但是当我在服务器中改变了相应的文件之后，发现依旧是https，然而刷新的时候会报错，后来我看到一旦浏览器使用https建立了安全连接之后就不会再用http访问了…即使我改过来了依旧不行…不过好在应该只有我受影响了…</p>
<p>https果然不是那么容易就能搞定的啊。（说不定只是我太菜了而已…现在看来主要是静态文件加载的问题，以及网站本身的一些bug..总之上https还是要权衡，毕竟我这个不涉及到隐私信息，支付等。</p>
<h2 id="关于https"><a href="#关于https" class="headerlink" title="关于https"></a>关于https</h2><p>https比起http要安全的原因就是https在浏览器和应用中另外还加了一层，在这一层中他对明文传输的TCP/UDP进行了加密，这样就保证了相应的安全。</p>
<p>还有就是网站加入了SSL证书，这个证书很难被伪造不被发现，也就是说长得很像钓鱼链接就更容易被识别啦。</p>
<h2 id="也学了好多域名的知识呢"><a href="#也学了好多域名的知识呢" class="headerlink" title="也学了好多域名的知识呢"></a>也学了好多域名的知识呢</h2><p>另外因为最近在搞个人博客，为了搞得更好就又申请了一个域名，同时也把域名升级到了https～虽然并没有本质的区别，但是装逼度高了不少～</p>
<h3 id="GitHub-Pages的域名"><a href="#GitHub-Pages的域名" class="headerlink" title="GitHub Pages的域名"></a>GitHub Pages的域名</h3><p>对于一个GitHub账号来说，GitHub Pages可以有很多，但是以自己的账号名+github+io为域名的GitHub Pages只有一个。而对于很多生成的博客来说，只有用这个域名才不会出现路径上的问题。而这样的域名只有你把仓库名也改成相应的自己的账号名+github+io就可以了，这是一个坑一定要注意。</p>
<p>如果想使用自己的域名，则两步走：</p>
<ul>
<li>在域名解析控制台里面加入一个记录类型为CNAME的记录，并把记录值改为你的原本域名</li>
<li>直接在GitHub的设置你面改成你的自己的域名</li>
</ul>
<h3 id="关于域名解析"><a href="#关于域名解析" class="headerlink" title="关于域名解析"></a>关于域名解析</h3><p>我们一开始申请到的域名都是一级域名，而我们平常看到的www.xxxx.com是二级域名。</p>
<p>那些www甚至blog打头的都是经过解析的结果，其实只要在域名解析中指定主机就可以了。</p>
<p>主要的记录类型：</p>
<ul>
<li>CNAME：将域名指向另一个域名</li>
<li>A：将域名指向一个ipv4地址</li>
</ul>
<p>主机记录：</p>
<ul>
<li>就是二级域名打头的那些，如果是@就使用一级域名</li>
</ul>
<p>记录值就与上面的记录类型相对应就可以了。</p>
<h3 id="给GitHub-Pages的自定义域名加上https"><a href="#给GitHub-Pages的自定义域名加上https" class="headerlink" title="给GitHub Pages的自定义域名加上https"></a>给GitHub Pages的自定义域名加上https</h3><p>直接加证书是不是很现实的，因为服务器是GitHub上的，所以就要用另外的方法了。</p>
<p>这里用到了CloudFlare。原理就是：</p>
<ul>
<li>域名使用CloudFlare的域名服务器解析</li>
<li>它提供的服务处于我们的网站服务器和我们的网站访问者之间，其原理是缓存了我们服务器上的页面，所以实际用户建立的 HTTPS 连接是用户的浏览器与 Kloudsec 之间的。<a href="http://mazhuang.org/2016/05/21/enable-https-for-github-pages/" target="_blank" rel="external">本句出处</a></li>
</ul>
<p><a href="https://segmentfault.com/a/1190000007740693" target="_blank" rel="external">相关教程</a></p>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>折腾了一大圈，尽管结果不尽如人意，不过还是学到了不少东西的。</p>
<p>另外自己还是太弱了，以后还要继续加油呀。</p>
<p>P.S.为了搞这个都没有复习…囧…</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hexo与模块化与自动化]]></title>
      <url>https://blog.patrickcty.cc/2017/02/01/Hexo%E4%B8%8E%E6%A8%A1%E5%9D%97%E5%8C%96%E4%B8%8E%E8%87%AA%E5%8A%A8%E5%8C%96/</url>
      <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><ul>
<li>关于数据结构的创新作业，其实我并没有什么相关思路，一是因为自己知识有限，做不出来精美的app或者前端界面等</li>
<li>但是自己对互联网前沿的知识还是有一定关注的，正好最近搭建一个个人博客的欲望也比较强烈，于是借着这个机会来对Hexo搭建博客进行一个比较深入的分析</li>
<li>注：因为能力有限，相关的代码基本都是Hexo和第三方主题自带。</li>
</ul>
<h1 id="传统的搭建一个博客的方法"><a href="#传统的搭建一个博客的方法" class="headerlink" title="传统的搭建一个博客的方法"></a>传统的搭建一个博客的方法</h1><ul>
<li>自己编写前端页面</li>
<li>自己编写后台逻辑处理前端请求，连接数据库</li>
<li>将博客部署到服务器上</li>
</ul>
<p>我们可以感受到传统搭建一个博客的步骤是十分麻烦的，尽管我只列举了三条，但是事实上每一步的步骤都要耗费大量的经历。不过在开源浪潮的推动下，如今博客的搭建已经大大简化了，而我今天要分析的Hexo就是一个十分好用的高度模块化，自动化，可定制的个人博客。</p>
<h1 id="WordPress"><a href="#WordPress" class="headerlink" title="WordPress"></a>WordPress</h1><p>说到博客就不得不提到WordPress，作为自己搭建的个人博客的鼻祖，WordPress在博客里面占有重要的分量，尽管这么多年来体系越来越完善。但是体量大，需要PHP编程相关知识，以及同样的部署问题，到如今显得有些“不合群”了。</p>
<h1 id="为什么选择Hexo"><a href="#为什么选择Hexo" class="headerlink" title="为什么选择Hexo"></a>为什么选择Hexo</h1><ul>
<li>开源</li>
<li>安装使用简单</li>
<li>高度模块化，可定制化</li>
<li>高度自动化，操作极度简化</li>
</ul>
<h1 id="关于Hexo的分析"><a href="#关于Hexo的分析" class="headerlink" title="关于Hexo的分析"></a>关于Hexo的分析</h1><p>Hexo是开源并且基于node.js编写成的，Hexo也是通过node来进行页面的渲染，通过更改配置文件可以进行信息的定制。</p>
<p>同时Hexo模块化很强，主体的Hexo框架集成了基本的逻辑，theme文件夹里面的内容为定制提供了很大的便利，同样theme文件夹里面的内容也是根据配置文件与留出来的相应的api进行相应的页面渲染。</p>
<p>另外，依赖于Git进行版本控制使得使用GitHub Pages来部署更简单。</p>
<h2 id="一键安装"><a href="#一键安装" class="headerlink" title="一键安装"></a>一键安装</h2><ul>
<li>由于Hexo基于node.js以及通过Git来进行版本控制</li>
<li>因此安装好node.js以及Git后直接用npm就可以安装Hexo了</li>
</ul>
<h2 id="一键初始化"><a href="#一键初始化" class="headerlink" title="一键初始化"></a>一键初始化</h2><ul>
<li>刚安装的Hexo的配置文件已经基本上能使用了，自己稍微修改就可以更个人化</li>
<li><p>渲染静态文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo g  // 或者使用全称hexo generate</div></pre></td></tr></table></figure>
</li>
<li><p>运行Hexo服务</p>
<ul>
<li>这样Hexo就会在本机的4000端口运行（默认）</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo s  // 全称hexo server</div></pre></td></tr></table></figure>
<ul>
<li>部署Hexo<ul>
<li>只用在配置文件指定相应的部署路径就可以很快部署了</li>
<li>支持GitHub Pages和Heroku等多种形式</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo d  // hexo deploy</div></pre></td></tr></table></figure>
<p>经过以上几步就可以看到自己的博客了。</p>
<h3 id="值得一提的是"><a href="#值得一提的是" class="headerlink" title="值得一提的是"></a>值得一提的是</h3><ul>
<li>这几个步骤也体现了自动化</li>
<li>使用者只用专注于内容</li>
<li>其他页面逻辑都会由hexo来处理</li>
<li>甚至版本控制hexo都自动进行了，省略了add和commit的步骤</li>
</ul>
<h2 id="高度定制"><a href="#高度定制" class="headerlink" title="高度定制"></a>高度定制</h2><ul>
<li>你可以在theme里面定制你自己的页面样式，目录等等，不过如果要自己定制的话必须遵循hexo的规范，不然页面可能渲染不出来</li>
<li>有许多第三方模块可以自己选择，比如评论，流量统计等，安装也十分简单，npm来进行就可以了</li>
</ul>
<h2 id="至于发表博客"><a href="#至于发表博客" class="headerlink" title="至于发表博客"></a>至于发表博客</h2><ul>
<li>直接把相应md文件放到对应的文件夹，剩下的就不需要你来管了</li>
<li>使用代码直接就生成新文章<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo new [layout] &lt;title&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Hexo的缺点"><a href="#Hexo的缺点" class="headerlink" title="Hexo的缺点"></a>Hexo的缺点</h2><ul>
<li>高度模块化的一个弊病就是自由度会相应降低，不过好在Hexo的主体框架也比较完善了，因此基本也不会遇到自己想要的功能实现不了这种情况</li>
</ul>
<h2 id="最后一些脑洞"><a href="#最后一些脑洞" class="headerlink" title="最后一些脑洞"></a>最后一些脑洞</h2><p>如果要把Hexo和数据结构这门课程联系起来的话</p>
<ul>
<li>由于Hexo的渲染页面功能十分强大，而数据结构又是一个相对抽象的内容</li>
<li>所以可以利用Hexo的优势来进行==代码可视化==</li>
<li>也就是说你看到的图，树不再是代码中的那些抽象结构，而是真正的表现在页面的图形</li>
<li>这样也能降低许多学习门槛吧，不过现在因为能力问题，只能假想了，以后能力达到了就会去进行相应的尝试</li>
</ul>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>生命不息，创新不止。但是创新是基于扎实的基本功的，只有自己能力充分了创新才不会那么的苍白。这也是自己继续要做的吧，打好基本功，同时不要安于现状，失去创新的想法！</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Go Home]]></title>
      <url>https://blog.patrickcty.cc/2017/02/01/Go%20Home/</url>
      <content type="html"><![CDATA[<h1 id="Go-Home"><a href="#Go-Home" class="headerlink" title="Go Home"></a>Go Home</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;明天就要回家了。待在学校了这么多天，从放假前的期待，到真正开始留校时候的百无聊赖，到吕方也走的时候的小小的绝望，到最后的适应以及淡然。（然而连兴安都关了这就没法适应了。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这么多天中一个重要的情绪就是孤单寂寞，这种一个人的时候我也经历过，但是从来没有过这么深刻的感受。但其实，以前经历的一个人和现在的一个人是完全不一样的。不是因为独自一人而寂寞，而是没有可以找到的人。就是这样的情况，独自一个人在一个城市。朋友都离开了，这种感觉和那些独自一人去远方求学，在异国他乡举目无亲的感觉有点像，不过现在是完全没有人…连认识人的机会都没有。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;不过说了这么多，阻碍我的最大因素最后倒不是这种孤独感，而是物质的缺乏…三餐都没有着落…店铺全都关门了…我也想静下心来搞自己的事，然而要想着吃饭的问题…一天几桶泡面和面包…真的有点反胃了…</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;无论如何，总归是要回家了，虽然家里也不见得那么美好，不过好歹我知道那些人就在那里，我知道我不用为吃的问题发愁，只用考虑吃什么～恩，下次留宿也要找到一起的人～</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[GDUT新生赛]]></title>
      <url>https://blog.patrickcty.cc/2017/02/01/GDUT%E6%96%B0%E7%94%9F%E8%B5%9B%E2%80%94D(%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92)/</url>
      <content type="html"><![CDATA[<h1 id="Problem-D-勤奋的涟漪2"><a href="#Problem-D-勤奋的涟漪2" class="headerlink" title="Problem D: 勤奋的涟漪2"></a>Problem D: 勤奋的涟漪2</h1><p><a href="http://note.youdao.com/" target="_blank" rel="external">原题链接</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><blockquote>
<p>涟漪进入集训队后，他会去实验室训练或者去操场锻炼。 接下来n天，每天的情况是一下4种中的一种： 1.当天体育馆关门了和没有训练赛 2.当天体育馆关门了和有训练赛 3.当天体育馆开放和没有训练赛 4.当天体育馆开放和有训练赛 涟漪知道之后n天的情况。 涟漪每一天可以休息，或者打训练赛（当天有训练赛）或者运动（当天体育馆开放）。 涟漪要制定一个训练计划，决定每天干什么，但是涟漪不会连续两天都运动或者连续两天都打训练赛， 请帮涟漪找出她最少休息的天数（她不打训练赛和运动）。 休息的时候，她会做下面的数学题</p>
<p><img src="https://okdkbnczs.qnssl.com/image/ACM/fx.png" alt="image"></p>
</blockquote>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><blockquote>
<p>第一行一个整数t（t&lt;=100）,代表测试数据， 第二行一个整数 n（1&lt;=n&lt;=100） 第三行有n个数a1,a2,a3,….an(0&lt;=ai&lt;=3)) ai=0 ,代表第一种情况 ai=1,代表第二种情况 ai=2 ,代表第三种情况 ai=3 ,代表第四种情况</p>
</blockquote>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><blockquote>
<p>输出 一个数 表示（涟漪休息的天数） 乘以（数学题的答案的积）。</p>
</blockquote>
<h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><blockquote>
<p>4</p>
<p>7</p>
<p>1 3 3 2 1 2 3</p>
<p>1</p>
<p>1</p>
<p>1</p>
<p>2</p>
<p>1</p>
<p>3</p>
</blockquote>
<h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><blockquote>
<p>0</p>
<p>0</p>
<p>0</p>
<p>0</p>
</blockquote>
<h2 id="个人感想"><a href="#个人感想" class="headerlink" title="个人感想"></a>个人感想</h2><p>当他们讲题的时候说这是动态规划我是一脸懵逼的。另外还是要自己思考，直接接受别人的思想不仅收获很小而且还很容易茫然。</p>
<h2 id="我的思路"><a href="#我的思路" class="headerlink" title="我的思路"></a>我的思路</h2><p>这题的限制条件就是连续两天不能是相同的状态，休息除外，因此因该有一个ystday来储存上一天的行为，workday来储存不是休息的天数</p>
<p>ystday值：</p>
<ul>
<li>0：休息</li>
<li>1：训练</li>
<li>2：锻炼</li>
<li>3：锻炼或者训练</li>
</ul>
<p>然后根据当天的情况来进行相应的判断</p>
<p>当天情况：</p>
<ul>
<li>0：只能休息，workday不变</li>
<li>1：训练或者休息，只要ystday不是1，workday就加一，并且把ystday变为1；否则workday不变，ystday变为0</li>
<li>2：锻炼或者休息，和上面的类似</li>
<li>3：三者都可以，workday加一，如果ystday是1或者2，ystday就变成2或者1，否则ystday变为3</li>
<li>【其实ystday的0和3可以合并】</li>
</ul>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line"><span class="comment">//    freopen("test.in", "r", stdin);</span></div><div class="line">    <span class="keyword">int</span> t;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</div><div class="line">    <span class="keyword">while</span> (t--)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> n;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">        <span class="keyword">int</span> ystday, workday;</div><div class="line">        ystday = workday = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> today;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;today);</div><div class="line">            <span class="keyword">switch</span> (today)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">case</span> <span class="number">0</span>:</div><div class="line">                    ystday = <span class="number">0</span>;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">                    <span class="keyword">if</span> (ystday != <span class="number">1</span>)</div><div class="line">                    &#123;</div><div class="line">                        ystday = <span class="number">1</span>;</div><div class="line">                        workday += <span class="number">1</span>;</div><div class="line">                    &#125; <span class="keyword">else</span></div><div class="line">                        ystday = <span class="number">0</span>;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> <span class="number">2</span>:</div><div class="line">                    <span class="keyword">if</span> (ystday != <span class="number">2</span>)</div><div class="line">                    &#123;</div><div class="line">                        ystday = <span class="number">2</span>;</div><div class="line">                        workday += <span class="number">1</span>;</div><div class="line">                    &#125; <span class="keyword">else</span></div><div class="line">                        ystday = <span class="number">0</span>;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> <span class="number">3</span>:</div><div class="line">                    workday += <span class="number">1</span>;</div><div class="line">                    <span class="keyword">if</span> (ystday == <span class="number">1</span>)</div><div class="line">                        ystday = <span class="number">2</span>;</div><div class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (ystday == <span class="number">2</span>)</div><div class="line">                        ystday = <span class="number">1</span>;</div><div class="line">                    <span class="keyword">else</span></div><div class="line">                        ystday = <span class="number">3</span>;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, (n - workday) * <span class="number">-24</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>其实我这个做法依然是动态规划，本质上是一样的，只不过我用ystday来储存前一天的状态而讲解的是直接用数组储存所有情况</p>
<p><a href="http://blog.csdn.net/jnxxhzz/article/details/53455350#" target="_blank" rel="external">一个参考范例</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[GDUT新生赛—C(又栽在long long上面了)]]></title>
      <url>https://blog.patrickcty.cc/2017/02/01/GDUT%E6%96%B0%E7%94%9F%E8%B5%9B%E2%80%94C(%E5%8F%88%E6%A0%BD%E5%9C%A8long%20long%E4%B8%8A%E9%9D%A2%E4%BA%86)/</url>
      <content type="html"><![CDATA[<h1 id="Problem-C-剁手女生节"><a href="#Problem-C-剁手女生节" class="headerlink" title="Problem C: 剁手女生节"></a>Problem C: 剁手女生节</h1><p><a href="http://gdutcode.sinaapp.com/problem.php?cid=1051&amp;pid=2" target="_blank" rel="external">原题链接</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>由于女生节准备到了，ming打算给班上女生送一份大礼。没错，就是数学练习册！</p>
<p>ming先前就已经收藏了 n 本练习册了，一直不舍得做，这次突然决定把它们都拿出来当作礼物送出去<br>！<br>但是，ming班上一共有 4 个女生，为了不要显得自己偏爱哪一个，他觉得每个女生都应该分到同等数量的练习册。</p>
<p>这样的话，原来的 n 本就可能不太够了。于是他去逛亚马当商城。</p>
<p>他发现，最近ACM（Association of Counting Method）又出版了好多新版数学练习册：高数、线代、离散、概率论…</p>
<p>而且商店有三种促销优惠套餐：</p>
<p>第一种：任选 1 本练习册，送欧几里德主题套尺。只需 a 个比特币；</p>
<p>第二种：任选 2 本练习册，送莱布尼兹同款2B铅笔。只需 b 个比特币；</p>
<p>第三种：任选 3 本练习册，送爱因思坦专用橡皮擦。只需 c 个比特币。</p>
<p>那么问题来了：吃土ming如何用最少的比特币购买若干本练习册，使得全部（包括原来的n本）可以平分给四个女生？</p>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>每组输入是一行四个整数：n，a，b，c（1 &lt;= n，a，b，c &lt;= 1e9）意思如题目描述。</p>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>对每组输入，输出一行一个整数，表示ming要花的最少的比特币数。</p>
<h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><p>3</p>
<p>1 1 3 4</p>
<p>6 2 1 1</p>
<p>4 4 4 4</p>
<h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><p>3</p>
<p>1</p>
<p>0</p>
<h2 id="个人感想"><a href="#个人感想" class="headerlink" title="个人感想"></a>个人感想</h2><p>即使原始数据还没超过int最后还是可能变成long long才能AC，比如这个。</p>
<p>还有就是之前不知道为什么莫名其妙的一堆秘制错误，删掉那些输出语句反而就好了…</p>
<h2 id="我的思路"><a href="#我的思路" class="headerlink" title="我的思路"></a>我的思路</h2><p>没什么多说的，情况考虑清楚就可以了，比如三本书反而比一本书便宜之类的</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">Min</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> x, <span class="keyword">long</span> <span class="keyword">long</span> y)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (x &gt; y)</div><div class="line">        <span class="keyword">return</span> y;</div><div class="line">    <span class="keyword">else</span></div><div class="line">        <span class="keyword">return</span> x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> t;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</div><div class="line">    <span class="keyword">while</span> (t--)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> n;</div><div class="line">        <span class="keyword">long</span> <span class="keyword">long</span> a, b, c;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%lld%lld%lld"</span>, &amp;n, &amp;a, &amp;b, &amp;c);</div><div class="line">        <span class="keyword">long</span> <span class="keyword">long</span> min = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> need = <span class="number">4</span> - n % <span class="number">4</span>;</div><div class="line">        <span class="keyword">switch</span> (need)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">                min = Min(a, b + c);</div><div class="line">                min = Min(min, <span class="number">3</span> * c);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="number">2</span>:</div><div class="line">                min = Min(Min(b, <span class="number">2</span> * a), <span class="number">2</span> * c);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="number">3</span>:</div><div class="line">                min = Min(Min(<span class="number">3</span> * a, a + b), c);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="number">4</span>:</div><div class="line">                min = <span class="number">0</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, min);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>各种表达式一定不要手贱打错！</p>
<p>3a这个是错的！要么就是3*a！</p>
<p>最后在强调一次long long！</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[GDUT新生赛]]></title>
      <url>https://blog.patrickcty.cc/2017/02/01/GDUT%E6%96%B0%E7%94%9F%E8%B5%9B%E2%80%94B(%E8%A2%AB%E4%B8%80%E9%81%93%E6%B0%B4%E9%A2%98%E6%B0%94%E5%93%AD%EF%BC%8C%E5%85%B6%E5%AE%9E%E5%B9%B6%E4%B8%8D%E6%98%AF%E5%BE%88%E6%B0%B4)/</url>
      <content type="html"><![CDATA[<h1 id="Problem-B：Zhazhahe究竟有多二"><a href="#Problem-B：Zhazhahe究竟有多二" class="headerlink" title="Problem B：Zhazhahe究竟有多二"></a>Problem B：Zhazhahe究竟有多二</h1><p><a href="http://gdutcode.sinaapp.com/problem.php?cid=1051&amp;pid=1" target="_blank" rel="external">原题链接</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Zhazhahe竟然能二到把耳机扔到洗衣机里去洗，真的是二到了一种程度，现在我们需要判断一下zhazhahe二的程度（就是计算zhazhahe的脑残值有几个2的因子），下面给你一个n，n!表示zhazhahe的脑残值。</p>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>输入一个正整数t(0&lt;t&lt;3000)表示样例组数，每组样例输入一个正整数n(0&lt;n&lt;1e18)，n!表示zhazhahe的脑残值</p>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>输出一个正整数表示zhazhahe二的程度</p>
<h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><p>3</p>
<p>2</p>
<p>4</p>
<p>15</p>
<h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><p>1</p>
<p>3</p>
<p>11</p>
<h2 id="个人感想"><a href="#个人感想" class="headerlink" title="个人感想"></a>个人感想</h2><p>真的十分想吐槽这道题…前后经历了TLE-&gt;RE-&gt;WA最后终于AC了，不过里面还是有一些坑需要我以后继续注意</p>
<h2 id="我的思路"><a href="#我的思路" class="headerlink" title="我的思路"></a>我的思路</h2><p>我已开始是直接求n!然后再求因子，然而这样太暴力了O(n^2)真的不是好玩的…一个TLE救过来了，后来想着用log2(n)来减少除的个数，用n-=2代替减1，然而O(n^2)还是O(n^2)。</p>
<p>之后看到了这样的一个公式：</p>
<blockquote>
<p>==n!素因子分解中素数p的幂为 [n/p]+[n/(p^2)]+[n/(p^3)]+……==</p>
</blockquote>
<p>于是用这个结论就避免了TLE</p>
<p>然而要注意的是他给的n的范围很大，用int是解决不了的，因为越界了所以会出现RE</p>
<p>而且要把所有的都改成ll，n，two，rst，有一个忘了改就会变成WA</p>
<p>最后把所有的都改过来了就可以AC了</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="comment">// n!素因子分解中素数p的幂为 [n/p]+[n/(p^2)]+[n/(p^3)]+……</span></div><div class="line"><span class="comment">// RE...</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> t;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</div><div class="line">    <span class="keyword">while</span> (t--)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">long</span> <span class="keyword">long</span> n;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;n);</div><div class="line">        <span class="keyword">long</span> <span class="keyword">long</span> rst = <span class="number">0</span>;</div><div class="line">        <span class="keyword">long</span> <span class="keyword">long</span> two = <span class="number">2</span>;</div><div class="line">        <span class="keyword">while</span> (two &lt;= n)</div><div class="line">        &#123;</div><div class="line">            rst += n / two;</div><div class="line">            two *= <span class="number">2</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, rst);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>这个故事告诉我们</p>
<ul>
<li>要努力优化自己的算法，一些基本的结论要知道</li>
<li>要仔细的看题目，越界很容易出现RE，另外int是4个字节每个字节8位二进制数，范围是-2^31~2^31-1</li>
<li>改代码的时候把全部都改过来…</li>
</ul>
<p><a href="http://blog.csdn.net/xuexiacm/article/details/8122267" target="_blank" rel="external">附上一个各种类型的范围</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[GDUT新生赛—A(二进制的神奇用法)]]></title>
      <url>https://blog.patrickcty.cc/2017/02/01/GDUT%E6%96%B0%E7%94%9F%E8%B5%9B%E2%80%94A(%E4%BA%8C%E8%BF%9B%E5%88%B6%E7%9A%84%E7%A5%9E%E5%A5%87%E7%94%A8%E6%B3%95)/</url>
      <content type="html"><![CDATA[<h1 id="Problem-A-pigofzhou的巧克力棒"><a href="#Problem-A-pigofzhou的巧克力棒" class="headerlink" title="Problem A: pigofzhou的巧克力棒"></a>Problem A: pigofzhou的巧克力棒</h1><p><a href="http://gdutcode.sinaapp.com/problem.php?cid=1051&amp;pid=0" target="_blank" rel="external">原题链接</a></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><blockquote>
<p>众所周知，pigofzhou有许多妹子。有一天，pigofzhou得到了一根巧克力棒，他想把这根巧克力棒分给他的妹子们。具体地，这根巧克力棒长为 n，他想将这根巧克力棒折成 n 段长为 1 的巧克力棒，然后分给妹子们。</p>
<p>但是他妹子之一中的 15zhazhahe 有强迫症。若它每次将一根长为 k 的巧克力棒折成两段长为 a 和 b 的巧克力棒，此时若 a=b，则15zhazhahe会得到一点高兴值。</p>
<p>pigofzhou想知道15zhazhahe最多能获得多少高兴值。</p>
</blockquote>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><blockquote>
<p>输入数据为T组(T &lt;= 10000)，每组数据读入一个n（n&lt;=1000000000）</p>
</blockquote>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><blockquote>
<p>一行一个整数代表能获得的最大高兴值</p>
</blockquote>
<h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><blockquote>
<p>1</p>
<p>5</p>
</blockquote>
<h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><blockquote>
<p>3</p>
</blockquote>
<h2 id="个人感想"><a href="#个人感想" class="headerlink" title="个人感想"></a>个人感想</h2><p>我一直以为这是水题，结果在知道解法的情况下还是做了一下午才AC…我真的好菜呀orz，要继续加油啦！</p>
<h2 id="我的思路"><a href="#我的思路" class="headerlink" title="我的思路"></a>我的思路</h2><p>一开始我以为直接一次次的对半分就可以了，然而这样得到的并不是最大值。最大的情况是这样一种分法：分成若干个数，这每个数都是2^n，这样继续每次分就有最大值了。</p>
<p>话说这个方法还是上次听他们讲解的时候知道的…至于怎么样分，答案是二进制。比如15=8+4+2+1，二15变成二进制数为1111=1000+100+10+1正好和上面的算式对应。</p>
<p>然后8对应的最大高兴值是4+2+1=8-1，4同理为2+1=4-1。</p>
<p>这样思路就很清楚了，先把输入的n变成二进制数，然后再根据每一位的数来求出最后的结果。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> <span class="built_in">array</span>[<span class="number">30</span>];  <span class="comment">// 直接在函数参数里面用数组名有莫名的报错...</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">ten2two</span><span class="params">(<span class="keyword">int</span> n, <span class="built_in">array</span> &amp;a)</span>  <span class="comment">// 转化为二进制数并将结果保存在数组中</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (n != <span class="number">0</span>)  <span class="comment">// 除二取余法</span></div><div class="line">    &#123;</div><div class="line">        a[i] = n % <span class="number">2</span>;</div><div class="line">        n = n / <span class="number">2</span>;</div><div class="line">        i++;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> i - <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> T;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</div><div class="line">    <span class="keyword">while</span> (T--)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> n;</div><div class="line">        <span class="built_in">array</span> a;</div><div class="line">        <span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="keyword">sizeof</span>(a));  <span class="comment">// 一键赋初值</span></div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">        <span class="keyword">int</span> happiness = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> num = ten2two(n, a);  <span class="comment">// 二进制数的最高位</span></div><div class="line">        <span class="keyword">for</span> (; num &gt;= <span class="number">0</span>; --num)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span> (a[num] == <span class="number">1</span>)</div><div class="line">                <span class="comment">// pow是求次方，这里是2^num，结果应该是double型的，我这里直接赋给int</span></div><div class="line">                happiness = happiness + <span class="built_in">pow</span>(<span class="number">2</span>, num) - <span class="number">1</span>;  </div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, happiness);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>二进制数神奇的用法真多，不愧是底层的机器语言，跪拜。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CSS定位]]></title>
      <url>https://blog.patrickcty.cc/2017/02/01/CSS%E5%AE%9A%E4%BD%8D/</url>
      <content type="html"><![CDATA[<h2 id="绝对定位"><a href="#绝对定位" class="headerlink" title="绝对定位"></a>绝对定位</h2><p>绝对定位并不一定是是相对浏览器固定一个位置</p>
<p>而是</p>
<ul>
<li>先把该元素从文档流中拖出来，原来在文档流中的位置被取代</li>
<li>然后寻找已经定位的最近的祖先元素并相对它来定位，如果没有的话就相当于被最初的包含块</li>
</ul>
<h2 id="相对定位"><a href="#相对定位" class="headerlink" title="相对定位"></a>相对定位</h2><p>而相对定位相对的是文档流</p>
<h2 id="固定定位"><a href="#固定定位" class="headerlink" title="固定定位"></a>固定定位</h2><p>相对于浏览器固定在某个地方不动，比如很多网站的菜单栏</p>
<h2 id="CSS定位机制"><a href="#CSS定位机制" class="headerlink" title="CSS定位机制"></a>CSS定位机制</h2><blockquote>
<p>CSS 有三种基本的定位机制：普通流、浮动和绝对定位。</p>
<p>除非专门指定，否则所有框都在普通流中定位。也就是说，普通流中的元素的位置由元素在 (X)HTML 中的位置决定。</p>
<p>块级框从上到下一个接一个地排列，框之间的垂直距离是由框的垂直外边距计算出来。</p>
</blockquote>
<h2 id="CSS-position-属性"><a href="#CSS-position-属性" class="headerlink" title="CSS position 属性"></a>CSS position 属性</h2><blockquote>
<p>通过使用 position 属性，我们可以选择 4 种不同类型的定位，这会影响元素框生成的方式。</p>
<p>position 属性值的含义：</p>
<ul>
<li><p>static<br>元素框正常生成。块级元素生成一个矩形框，作为文档流的一部分，行内元素则会创建一个或多个行框，置于其父元素中。</p>
</li>
<li><p>relative<br>元素框偏移某个距离。元素仍保持其未定位前的形状，它原本所占的空间仍保留。</p>
</li>
<li><p>absolute<br>元素框从文档流完全删除，并相对于其包含块定位。包含块可能是文档中的另一个元素或者是初始包含块。元素原先在正常文档流中所占的空间会关闭，就好像元素原来不存在一样。元素定位后生成一个块级框，而不论原来它在正常流中生成何种类型的框。</p>
</li>
<li><p>fixed<br>元素框的表现类似于将 position 设置为 absolute，不过其包含块是视窗本身。</p>
</li>
</ul>
<p>提示：相对定位实际上被看作普通流定位模型的一部分，因为元素的位置相对于它在普通流中的位置。</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[《Carol》]]></title>
      <url>https://blog.patrickcty.cc/2017/02/01/%E3%80%8ACarol%E3%80%8B/</url>
      <content type="html"><![CDATA[<h1 id="《Carol》"><a href="#《Carol》" class="headerlink" title="《Carol》"></a>《Carol》</h1><h2 id="感受"><a href="#感受" class="headerlink" title="感受"></a>感受</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这是一部爱情诗，在一个安静的下午观看最佳。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;只可惜我观看的时候心不静，一直在看手机。但是电影中的诗意还是感染着我。电影剧情比较舒缓，像是一首舒缓的叙事曲。但是剧中两个女性的挣扎以及暧昧都漂浮在空气中。那还是50年代，那时候这还是一个禁忌的话题。爱情的勇气，爱情的挣扎，现实的冲击，电影都完美的表现出来了。庆幸Abby最终走出了那一步～</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;下次看电影不能玩手机啦Orz。</p>
<h2 id="评分"><a href="#评分" class="headerlink" title="评分"></a>评分</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;9/10。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;推荐找个安静的时候静下心来观看。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[day-5为止的一些总结]]></title>
      <url>https://blog.patrickcty.cc/2017/02/01/day-5%E4%B8%BA%E6%AD%A2%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<h3 id="到这里为止web框架已经基本成型了，比较一下和flask的差别"><a href="#到这里为止web框架已经基本成型了，比较一下和flask的差别" class="headerlink" title="到这里为止web框架已经基本成型了，比较一下和flask的差别"></a>到这里为止web框架已经基本成型了，比较一下和flask的差别</h3><h4 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h4><ul>
<li>flask:使用MySQLdb模块</li>
<li>awesome:创建了全局的连接池</li>
</ul>
<h4 id="初始化app"><a href="#初始化app" class="headerlink" title="初始化app"></a>初始化app</h4><ul>
<li>flask:使用flask.Flask类</li>
<li>awesome:使用aiohttl.web.Application类</li>
</ul>
<h4 id="渲染模板"><a href="#渲染模板" class="headerlink" title="渲染模板"></a>渲染模板</h4><ul>
<li>flask:内置jinja2，直接用render_template()来渲染</li>
<li>awesome:要激活jinja2环境(jinja2.Environment类)</li>
</ul>
<h4 id="url处理函数"><a href="#url处理函数" class="headerlink" title="url处理函数"></a>url处理函数</h4><ul>
<li>flask:直接把想要的路径用@app.route()和函数绑定就可以了</li>
<li>awesome:</li>
</ul>
<ol>
<li>编写函数来绑定路径</li>
<li>编写RequestHandler来封装url函数</li>
<li>注册url处理函数</li>
</ol>
<h4 id="跑起应用"><a href="#跑起应用" class="headerlink" title="跑起应用"></a>跑起应用</h4><ul>
<li>flask:直接app.run()</li>
<li>awesome:</li>
</ul>
<ol>
<li>loop.create_server(app.make_handler(), ‘127.0.0.1’, 9000)</li>
<li>让loop一直运行</li>
</ol>
<h4 id="根据以上的这些步骤，awesome基本已经集成了flask的基本功能了，真的是从零开始搭建一个网站"><a href="#根据以上的这些步骤，awesome基本已经集成了flask的基本功能了，真的是从零开始搭建一个网站" class="headerlink" title="根据以上的这些步骤，awesome基本已经集成了flask的基本功能了，真的是从零开始搭建一个网站"></a>根据以上的这些步骤，awesome基本已经集成了flask的基本功能了，真的是从零开始搭建一个网站</h4><h4 id="尽管不懂得还有很多，不过还是由衷的佩服那些造轮子的人，大大减小了我们的开发的学习成本"><a href="#尽管不懂得还有很多，不过还是由衷的佩服那些造轮子的人，大大减小了我们的开发的学习成本" class="headerlink" title="尽管不懂得还有很多，不过还是由衷的佩服那些造轮子的人，大大减小了我们的开发的学习成本"></a>尽管不懂得还有很多，不过还是由衷的佩服那些造轮子的人，大大减小了我们的开发的学习成本</h4>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ACM疑问]]></title>
      <url>https://blog.patrickcty.cc/2017/02/01/ACM%E7%96%91%E9%97%AE/</url>
      <content type="html"><![CDATA[<ul>
<li>输出结果是每输入一次都输出还是一次性全部输出<blockquote>
<p>每一次输出就可以了</p>
</blockquote>
</li>
<li>需不需要检验输入的是不是满足题意<blockquote>
<p>不需要</p>
</blockquote>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ACM提高效率的方法]]></title>
      <url>https://blog.patrickcty.cc/2017/02/01/ACM%E6%8F%90%E9%AB%98%E6%95%88%E7%8E%87%E7%9A%84%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<h2 id="以文件流来检验输入输出而不是一行行的输入-在提交的时候应该注释掉"><a href="#以文件流来检验输入输出而不是一行行的输入-在提交的时候应该注释掉" class="headerlink" title="以文件流来检验输入输出而不是一行行的输入 (在提交的时候应该注释掉)"></a>以文件流来检验输入输出而不是一行行的输入 (在提交的时候应该注释掉)</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// in.txt为要读取的文件</span></div><div class="line"><span class="comment">// r为只读</span></div><div class="line"><span class="comment">// stdin为标准输入</span></div><div class="line">freopen(<span class="string">"in.txt"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</div></pre></td></tr></table></figure>
<ul>
<li>最后提交的时候一定要注释掉，不然会有Runtime Error</li>
</ul>
<h2 id="一键给数组赋初值"><a href="#一键给数组赋初值" class="headerlink" title="一键给数组赋初值"></a>一键给数组赋初值</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="built_in">memset</span>(<span class="built_in">array</span>, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="built_in">array</span>));</div></pre></td></tr></table></figure>
<ul>
<li>其中array可以是任意指针</li>
<li>0这个地方可以为任意特定的值</li>
<li>第三个地方指定长度</li>
<li>作用为：将内存的前n个字节设置为特定的值</li>
</ul>
<h2 id="打表而不是每一次都进行运算"><a href="#打表而不是每一次都进行运算" class="headerlink" title="打表而不是每一次都进行运算"></a>打表而不是每一次都进行运算</h2><ul>
<li>如果频繁的涉及到判断就先把所有结果放在表里面而不是每次都进行运算</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ACM输入输出注意]]></title>
      <url>https://blog.patrickcty.cc/2017/02/01/ACM%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E6%B3%A8%E6%84%8F/</url>
      <content type="html"><![CDATA[<h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><ul>
<li>当没给结束条件时</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">while(scanf(&quot;%d&quot;, &amp;a) != EOF)  // EOF是文件的结束</div><div class="line">// 由此可以猜想到ACM验证是通过文件读取来进行的</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ACM关键词]]></title>
      <url>https://blog.patrickcty.cc/2017/02/01/ACM%E5%85%B3%E9%94%AE%E8%AF%8D/</url>
      <content type="html"><![CDATA[<ul>
<li>动态规划</li>
<li>&amp;运算，^(异或)运算</li>
<li>二进制</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[《血战钢锯岭》]]></title>
      <url>https://blog.patrickcty.cc/2017/01/24/%E3%80%8A%E8%A1%80%E6%88%98%E9%92%A2%E9%94%AF%E5%B2%AD%E3%80%8B/</url>
      <content type="html"><![CDATA[<h1 id="《血战钢锯岭》"><a href="#《血战钢锯岭》" class="headerlink" title="《血战钢锯岭》"></a>《血战钢锯岭》</h1><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;直接进入正文。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这部电影给我的感觉就是震撼，特别是战争的时候，电影拍摄得十分真实，尽管我没经历过战争，不过战争的惨烈完全映入了我的脑海，尽管是战胜国美国拍的电影，但是电影还是十分客观，既有美国士兵的英勇，友情，同时他们面对惨烈情况的懦弱也没有省去；另外，对于战败国日本的刻画，也是十分客观，因为日本兵不是主体，所以只表现了他们的不怕死，无畏，这种精神，也没有去抹黑他们。这部战争片比以往看过的很多国产抗日片要好得多。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;关于战争的场面，真的是十分真实，无论是那些血淋淋的伤口，还是人们面对剧痛的呻吟，以此伤兵营的惨状，都十分真实，恐怕很多人看到这样的场景都会做噩梦甚至寝食难安。更不用说那些亲历战争的士兵们了，难怪很多经历过战争的士兵心理都落下了疾病。看完后我只想说愿世界少一点战争，多一点和平。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;其次令我印象深刻的就是主角对于信仰的坚持，而这坚持是和家庭是有分不开的关系的。男主的父亲是一个经历过一战的退伍军人，战争中兄弟的死亡给他带来了极大的打击，甚至把他的性格都完全转变了。他经常无故发疯，并且殴打孩子和妻子。因为父亲，主角在小时候十分好斗，再一次打架中他用砖头打中了哥哥的脑袋并且差一点打死哥哥，从此不杀人的信条深刻在主角的脑海中。后来有一次，父亲发疯时，拿着枪打母亲，被主角制止了，因为这一次事故，主角对枪也十分厌恶，并发誓不再碰枪。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;但是因为主角不想其他人都去战场厮杀自己却在家里于是他也参军了，但是去战场上怎么能不拿枪不杀人呢？于是他的信仰与现实产生了剧烈的碰撞，即使因为这个处处被侮辱，经受各种不公平的待遇，甚至进监狱，主角的信仰都没有改变。就这样，一个不用枪，不杀人的士兵上了战场，在那个晚上，他救下了将近一百人，成就了一段传奇。甚至在地洞中他还冒着危险救了一个日本军人。这是信仰的力量，这是个人毅力的力量。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;剧中的爱情也很打动人，即使内心不舍，还是要把心爱的人送上战场；即使处境艰难，只要看到心爱的人的照片就能继续坚持下去。正是主角的“不一样”，打动了女主，正是主角的“不一样”，以及爱情，让主角能坚持过了营地的各种误解，坚持过了战争的洗礼。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最后，感谢以前战士们的浴血奋战，成就了我们今天的和平美好的世界。</p>
<h2 id="评分"><a href="#评分" class="headerlink" title="评分"></a>评分</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;9.5/10。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;视觉震撼，内容丰富，可能是我看到的最好的战争片。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[终于考完啦]]></title>
      <url>https://blog.patrickcty.cc/2017/01/13/%E7%BB%88%E4%BA%8E%E8%80%83%E5%AE%8C%E5%95%A6/</url>
      <content type="html"><![CDATA[<h1 id="终于考完啦"><a href="#终于考完啦" class="headerlink" title="终于考完啦"></a>终于考完啦</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;经历了四周的高强度的复习，终于在1.12号十二点十分考完了所有科目，这也意味着大二上到此正式结束了。尽管在考最后几门的时候就一直十分期待考完之后放假但是当真正考完走出教学楼的那一刻，却突然感觉十分空虚，完全不知道接下来应该干什么。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;前两周是复习周，或者对于我和很多其他的同学来说是“预习周”。说实话这学期我基本没有好好学习的科目，大多数课都是上课不听讲，甚至图论都没去上过几次课…这也给我挖下了很大的坑。而熊不仅在平时学好了课内的内容，又搞了很多课外的内容，真的感觉他很了不起，他在学习的专注真的很值得我去学习！</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我感觉我最大的问题就是很难保持长时间的专注，上课也是，复习也是，自学也是，总是很容易就产生一种厌烦的情绪然后学习的欲望就没了就很难继续下去了。其实玩手机的时候也一样，经常就是玩着玩着就不知道干什么了…但是又不想学习，就是一种什么都不想干的状态…典型的玩也没玩好，学也没学好…这是最致命的弱点了吧。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在考完的同时，很多科目的成绩也出来了，说实话，这学期相比上一个学期又有了不小的退步…真的感觉下学期应该好好学习了…但是不知道我到时候会不会又继续重复这学期的状态…寒假也到来了，之前考试之前就有的一些计划，现在希望能高效的执行下去…如果寒假能做到，那么我想下学期也应该能做到吧…希望我寒假不要太荒废…</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;回到复习的内容，这次的复习感觉没抓到重点，也就是方法还有一些问题。像是数据结构复习得比较详细，甚至很多算法都再次实现了一次，但是这样范围拉的很大很深以至于到了真正考试的时候很多东西反而都忘掉了…而数电和Java则是另一个极端，太过于抽象以至于很多考的内容在看的时候都跳过去了，复习的只是一些框架性的内容，小的细节反而忘掉了这就导致这两门的分数都不太好看…特别是数电…直接创下了历史新低。概率论也有这个问题，不过问题不是很大，图论的话因为内容太多最后还是有一些给忘掉了orz…</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;功在平时，初中的数学老师说的果然没错…如果平时完全没有好好搞得话，最后真的会很坑的，上学期的科目都还好，而现在很多的难度都突然加大，完全留在期末真的是很不明智的选择。不过在平时的话也不能盲目的去搞，而是要理解，比如图论，概念特别多，但是如果你理解了他这样做的目的，你就可以更加游刃有余地处理同时也不会觉得没什么卵用了。高屋建瓴总是比零散的学要好得多！</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;后两周是考试周。说实话复习周的压力比考试周要大，复习周的时候几乎每天都是从早学到晚…就只有在图书馆闭馆的时候会比较浪，不过有了几个一起学习的队友感觉也没有那么累了呢～</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;考试周的时候反而比较放松，大考大玩小考小玩这个真言依旧十分适用。因为这学期考试比较密集所以也没往年的那么浪了，不过还是基本每天一部电影的节奏～讲真，到了后来剧都差不多看完了就完全不知道要干什么了…在自己空闲时间给自己找点事干，这也是很重要的一点啊…</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;总之考完啦，离回家也有好几天，这几天就该浪就浪，该学就学！关键是搞清楚自己该干什么！美好的寒假，从今天开始！</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[教务处模拟登陆的问题]]></title>
      <url>https://blog.patrickcty.cc/2016/11/24/%E6%95%99%E5%8A%A1%E5%A4%84%E6%A8%A1%E6%8B%9F%E7%99%BB%E9%99%86%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>前不久想直接用cookie登入教务处获得数据结果cookie死活设置不了，于是这次想先模拟登陆再获得数据。</p>
<h2 id="事前准备"><a href="#事前准备" class="headerlink" title="事前准备"></a>事前准备</h2><h3 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h3><ul>
<li>目标API：<a href="http://jwxt.jnu.edu.cn/Login.aspx" target="_blank" rel="external">http://jwxt.jnu.edu.cn/Login.aspx</a></li>
<li>需要的字段：<blockquote>
<ul>
<li>__VIEWSTATE:/wEPDwUKMjA1ODgwODUwMg9kFgJmD2QWAgIBDw8WAh4EVGV4dAUk5pqo5Y2X5aSn5a2m57u85ZCI5pWZ5Yqh566h55CG57O757ufZGRkQHzthBmMTOkUl+ppvHZCGZFIgkY=</li>
<li>__VIEWSTATEGENERATOR:C2EE9ABB</li>
<li>__EVENTVALIDATION:/wEWBwKa9aHcDAKDnbD2DALVp9zJDAKi+6bHDgKC3IeGDAKt86PwBQLv3aq9BwKtfLsN0olpYtRu4kxVBpo9Oquj</li>
<li>txtYHBS:2015053961  // 学号</li>
<li>txtYHMM:passwd  // 密码</li>
<li>txtFJM:k23y  // 验证码</li>
<li>btnLogin:%B5%C7++++%C2%BC</li>
</ul>
</blockquote>
</li>
</ul>
<h3 id="获得信息"><a href="#获得信息" class="headerlink" title="获得信息"></a>获得信息</h3><p>登陆之后进入信息所在的页面就可以，页面URI可以从JS中直接看到</p>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>无论用户名密码验证码对不对最后返回的结果都是500</p>
<hr>
<h2 id="另一篇"><a href="#另一篇" class="headerlink" title="另一篇"></a>另一篇</h2><p>受同学的启发，准备用爬虫爬取教务处的页面，至于干什么还没想那么远…</p>
<p>结果用requests伪造请求头进去之后发现这是动态页面，而只用requests加载不出来</p>
<p>于是想用selenium来加载js，这时候就需要改变页面的cookie。然而在设置cookie的时候会报错：Can only set Cookies for the current domain</p>
<p>Google了好多都没找到解决方案</p>
<p>于是想requests和selenium结合，结果真的有这个库selenium-requests，没想到原理居然还是调用selenium里面的内容…所以还是报同样的错…</p>
<p>折腾前面的几种方法折腾了好久，似乎还是不行</p>
<p>cookie是从header里面提取的，也有从Chrome插件里面提取读取为JSON再解析的，两者似乎都不起作用</p>
<p>本来想直接登录再直接从对象中获取cookie然而需要验证码这就很麻烦了。然而我觉得登陆之后获取cookie似乎和直接得到没区别。</p>
<p>直接在requests里面使用cookie进入后使用Session.cookies结果发现是空的？？？</p>
<p>又是一个玄学的问题。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[爬取糗事百科感想]]></title>
      <url>https://blog.patrickcty.cc/2016/11/19/%E7%88%AC%E5%8F%96%E7%B3%97%E4%BA%8B%E7%99%BE%E7%A7%91%E6%84%9F%E6%83%B3/</url>
      <content type="html"><![CDATA[<p>requests + bs4</p>
<ul>
<li>糗事百科访问做了一定的限制，要用requests伪造请求头</li>
<li>界面是纯静态界面，用bs4提取页面主体信息就可以了</li>
</ul>
<h2 id="requests"><a href="#requests" class="headerlink" title="requests"></a>requests</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">session = requests.Session()</div><div class="line">headers = &#123;&apos;User-Agent&apos;: &apos;xxxx&apos;&#125;</div><div class="line">html = session(url, headers=headers).text</div></pre></td></tr></table></figure>
<h2 id="bs4"><a href="#bs4" class="headerlink" title="bs4"></a>bs4</h2><p>比较熟悉，写一下要点</p>
<ul>
<li>可以用bsObj.h1来获得h1的内容</li>
<li>注意一般都是以list的形式，注意下标</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">author = joke.findAll(&apos;div&apos;, &#123;&apos;class&apos;: &apos;author clearfix&apos;&#125;)[0].findAll(&apos;h2&apos;)[0].get_text()</div></pre></td></tr></table></figure>
<h2 id="亮点：面向对象编程"><a href="#亮点：面向对象编程" class="headerlink" title="亮点：面向对象编程"></a>亮点：面向对象编程</h2><ul>
<li>把整个功能以一个class的形式集成</li>
<li>通过类里面的函数一步步实现功能</li>
</ul>
<p>面向对象：</p>
<ul>
<li><strong>init</strong>()：来初始化一些变量，通常是公共的（全局）</li>
<li>把一个大功能分散成若干个步骤</li>
<li>调用变量或者函数用self.func或self.v</li>
</ul>
]]></content>
    </entry>
    
  
  
    
    <entry>
      <title><![CDATA[初次见面我是Patrick]]></title>
      <url>https://blog.patrickcty.cc/about/index.html</url>
      <content type="html"><![CDATA[<h1 id="初次见面我是Patrick"><a href="#初次见面我是Patrick" class="headerlink" title="初次见面我是Patrick"></a>初次见面我是Patrick</h1><h2 id="杂谈"><a href="#杂谈" class="headerlink" title="杂谈"></a>杂谈</h2><h2 id="名字的故事"><a href="#名字的故事" class="headerlink" title="名字的故事"></a>名字的故事</h2><p>Patrick这个名字是我从《冒险小虎队》里面的一个主角得来的灵感，一开始的英文名还是叫Peter。同样是P开头，Patrick中多了几分硬朗，并且看起来酷酷的。于是乎就确定了这个名字～到后来偶然发现那个粉粉的小海星也是Patrick，一下子多了几分惊喜感～</p>
<h2 id="最爱颜色的故事"><a href="#最爱颜色的故事" class="headerlink" title="最爱颜色的故事"></a>最爱颜色的故事</h2><p>我最喜欢的颜色是黄色，那种淡淡的黄色。</p>
<p>小学的时候很喜欢蓝色，那个年龄段大家都这样；之后逐渐转向黑白银，因为多了几分叛逆与与众不同吧，当然还有几分装酷的成分在里面；到后来又变成了绿色，因为贴近自然并且也很舒服；后来又由绿色变成了浅色系的薄荷绿，以及一系列类似的，一直到现在对颜色的喜爱都停留在了浅色系。</p>
<p>现在的话淡黄色，活泼却又不像荧光色那样张扬，同时又比较让人亲近，或许这些特性也和我的性格有一定的关系吧～</p>
<p>P.S.高中的时候一度很喜欢荧光色，买过荧光绿的跑鞋，尽管被坑了买了假货，穿起来很晃眼，不过呢，太张扬了反而显得很轻浮以及格格不入吧，后来就对这些荧光色是疏远啦。</p>
<h2 id="我是海贼迷！"><a href="#我是海贼迷！" class="headerlink" title="我是海贼迷！"></a>我是海贼迷！</h2><p>从封面可以看到我是一个海贼迷～</p>
<p>说起海贼，还是高二的时候入的坑，当时是高中的第一个同桌他在看海贼，尽管他没有安利我，但是在他的吸引下我也开始追海贼了～当时海贼只有五百集，就那样一天天的，居然很快就追完了。话说我当时是冲着山治看的，看到山治出场的时候还激动了好一阵子。</p>
<p>海贼一直都能带给我感动，索隆吃被踩过的饭团，乌索普被大家所认可邀请上船，娜美无助地看着路飞哭泣，山治跪倒在海上餐厅向哲夫告别，乔巴从害怕到接纳草帽一伙，罗宾的想活下去，弗兰奇过去的无助，布鲁克五十年的孤独，路飞的失去哥哥的痛苦…</p>
<p>每个人的身上都有太多可以说的了，海贼是自由的象征，他们也是为了自由而活，很长一段时间，Free like a pirate也作为我的motto陪伴我度过了漫长的岁月。</p>
<p>我想，海贼会一直陪着我，我也会和我的孩子一起看，一起看这群比谁都快乐，比谁都自由的人。草帽海贼团的海贼旗悬挂在我的床头，海贼的精神，也会一直的悬挂在我的心中～</p>
<h2 id="也是硬件控！"><a href="#也是硬件控！" class="headerlink" title="也是硬件控！"></a>也是硬件控！</h2><p>哈哈一个程序员(伪)终究要走上的道路。</p>
<p>起初是因为Chrome经常卡死然后小伙伴安利内存于是就下定决心买了内存条，原本我还是一个电脑硬件的小白，完全不知道怎么拆装电脑，入了之后尽管没完全拆下来，不过有了相应的知识，后来买SSD的时候装就方便多啦。装了内存之后感觉有了质的飞跃，Chrome不经常崩溃了，多开几个软件也不会很卡了。以此为契机走上了一条烧硬件的道路，从此生活费不够用系列233。</p>
<p>之后又感觉屏幕太小看代码太费眼睛于是又找机会入了外接显示器，还是曲面的，感觉完全不一样了。</p>
<p>再之后就是SSD了，这个不仅让我拆机能力点满而且我装系统能力也有了大大的提升，不过这个也是一个一直踩坑的过程，<em>这个以后有空可以详细写一下</em>。还好最后完美的解决了所有的问题，换了SSD之后体验又上升了一个档次，最显著的就是开机时间与打开IDE的时间233。</p>
<p>后面入了机械键盘之后就消停了，终于满足了用带有灯光的键盘的愿望，十分感动233。</p>
<p>硬件应该就到此为止了，至于显卡和CPU，还好我不玩游戏233，不然可是个巨坑233。下一步就是好好锻炼编程能力了～</p>
<h2 id="Linux使用者"><a href="#Linux使用者" class="headerlink" title="Linux使用者"></a>Linux使用者</h2><p>作为一个程序员怎么能不用Linux/Unix系统，讲真，装个相关软件依赖什么的简直方便到哭。而且更改了主题之后颜值是妥妥的（尽管这是一条歪路，搞Linux的研究什么主题233。</p>
<p>现在虽然Linux用了挺久，不过就用过Ubuntu和Deepin，最终还是坚守Ubuntu，其他发行版的话，想搞了再去折腾，反正装起来挺简单的，也不会突然自动更新（滑稽。说来惭愧现在还是把Linux当一个桌面用…很多高级功能都还没接触，不过边用边学嘛～</p>
<h2 id="手机爱好者"><a href="#手机爱好者" class="headerlink" title="手机爱好者"></a>手机爱好者</h2><p>平常关注的最多的信息就是手机的信息了，尽管并不是一个在手机上折腾的人，其实想在现在用的Pro5上装上谷歌服务，Xposed然而要么是有一些奇怪的地方比如Google Play安装不了软件，要么就是Xposed的模块直接没用…这样就很尴尬了。</p>
<p>至于为什么关注手机呢，因为手机作为最常接触的电子产品，一个好的可以提升不少幸福感233。其实之前Note7是综合最棒的，可惜设计有致命硬伤而且官方态度还那样…</p>
<p>现在想要一个双曲面+玻璃后盖+拍照特别是夜景要好+耳机插口在下方+屏幕5.2左右+Type C，可惜现在还没有特别符合要求的，S7e是不错，不过还是有一些小地方不满足，而且最重要的是价格233，都不好意思再和家里要钱换手机，自己的话想要攒这么多又很难orz，所以看一看yy一下就好233。</p>
<h2 id="编程菜鸟"><a href="#编程菜鸟" class="headerlink" title="编程菜鸟"></a>编程菜鸟</h2><p>最后，我是一个编程菜鸟，刚入门，希望能越来越好～</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[links]]></title>
      <url>https://blog.patrickcty.cc/links/index.html</url>
      <content type="html"></content>
    </entry>
    
  
</search>
